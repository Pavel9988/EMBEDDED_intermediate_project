
FInal_firmware_Tigella.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae84  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800b050  0800b050  0000c050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0a8  0800b0a8  0000d05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b0a8  0800b0a8  0000c0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0b0  0800b0b0  0000d05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0b0  0800b0b0  0000c0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b0b4  0800b0b4  0000c0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800b0b8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e0  2000005c  0800b114  0000d05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a3c  0800b114  0000da3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eae0  00000000  00000000  0000d08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f38  00000000  00000000  0001bb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  0001daa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af9  00000000  00000000  0001e8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022925  00000000  00000000  0001f399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000111ee  00000000  00000000  00041cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d597f  00000000  00000000  00052eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012882b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041fc  00000000  00000000  00128870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0012ca6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000005c 	.word	0x2000005c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800b034 	.word	0x0800b034

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000060 	.word	0x20000060
 8000204:	0800b034 	.word	0x0800b034

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_uldivmod>:
 8000b30:	b953      	cbnz	r3, 8000b48 <__aeabi_uldivmod+0x18>
 8000b32:	b94a      	cbnz	r2, 8000b48 <__aeabi_uldivmod+0x18>
 8000b34:	2900      	cmp	r1, #0
 8000b36:	bf08      	it	eq
 8000b38:	2800      	cmpeq	r0, #0
 8000b3a:	bf1c      	itt	ne
 8000b3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b40:	f04f 30ff 	movne.w	r0, #4294967295
 8000b44:	f000 b988 	b.w	8000e58 <__aeabi_idiv0>
 8000b48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b50:	f000 f806 	bl	8000b60 <__udivmoddi4>
 8000b54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5c:	b004      	add	sp, #16
 8000b5e:	4770      	bx	lr

08000b60 <__udivmoddi4>:
 8000b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b64:	9d08      	ldr	r5, [sp, #32]
 8000b66:	468e      	mov	lr, r1
 8000b68:	4604      	mov	r4, r0
 8000b6a:	4688      	mov	r8, r1
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d14a      	bne.n	8000c06 <__udivmoddi4+0xa6>
 8000b70:	428a      	cmp	r2, r1
 8000b72:	4617      	mov	r7, r2
 8000b74:	d962      	bls.n	8000c3c <__udivmoddi4+0xdc>
 8000b76:	fab2 f682 	clz	r6, r2
 8000b7a:	b14e      	cbz	r6, 8000b90 <__udivmoddi4+0x30>
 8000b7c:	f1c6 0320 	rsb	r3, r6, #32
 8000b80:	fa01 f806 	lsl.w	r8, r1, r6
 8000b84:	fa20 f303 	lsr.w	r3, r0, r3
 8000b88:	40b7      	lsls	r7, r6
 8000b8a:	ea43 0808 	orr.w	r8, r3, r8
 8000b8e:	40b4      	lsls	r4, r6
 8000b90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b94:	fa1f fc87 	uxth.w	ip, r7
 8000b98:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b9c:	0c23      	lsrs	r3, r4, #16
 8000b9e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ba2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ba6:	fb01 f20c 	mul.w	r2, r1, ip
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d909      	bls.n	8000bc2 <__udivmoddi4+0x62>
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bb4:	f080 80ea 	bcs.w	8000d8c <__udivmoddi4+0x22c>
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	f240 80e7 	bls.w	8000d8c <__udivmoddi4+0x22c>
 8000bbe:	3902      	subs	r1, #2
 8000bc0:	443b      	add	r3, r7
 8000bc2:	1a9a      	subs	r2, r3, r2
 8000bc4:	b2a3      	uxth	r3, r4
 8000bc6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bca:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bd2:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bd6:	459c      	cmp	ip, r3
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0x8e>
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000be0:	f080 80d6 	bcs.w	8000d90 <__udivmoddi4+0x230>
 8000be4:	459c      	cmp	ip, r3
 8000be6:	f240 80d3 	bls.w	8000d90 <__udivmoddi4+0x230>
 8000bea:	443b      	add	r3, r7
 8000bec:	3802      	subs	r0, #2
 8000bee:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bf2:	eba3 030c 	sub.w	r3, r3, ip
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	b11d      	cbz	r5, 8000c02 <__udivmoddi4+0xa2>
 8000bfa:	40f3      	lsrs	r3, r6
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	e9c5 3200 	strd	r3, r2, [r5]
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d905      	bls.n	8000c16 <__udivmoddi4+0xb6>
 8000c0a:	b10d      	cbz	r5, 8000c10 <__udivmoddi4+0xb0>
 8000c0c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c10:	2100      	movs	r1, #0
 8000c12:	4608      	mov	r0, r1
 8000c14:	e7f5      	b.n	8000c02 <__udivmoddi4+0xa2>
 8000c16:	fab3 f183 	clz	r1, r3
 8000c1a:	2900      	cmp	r1, #0
 8000c1c:	d146      	bne.n	8000cac <__udivmoddi4+0x14c>
 8000c1e:	4573      	cmp	r3, lr
 8000c20:	d302      	bcc.n	8000c28 <__udivmoddi4+0xc8>
 8000c22:	4282      	cmp	r2, r0
 8000c24:	f200 8105 	bhi.w	8000e32 <__udivmoddi4+0x2d2>
 8000c28:	1a84      	subs	r4, r0, r2
 8000c2a:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c2e:	2001      	movs	r0, #1
 8000c30:	4690      	mov	r8, r2
 8000c32:	2d00      	cmp	r5, #0
 8000c34:	d0e5      	beq.n	8000c02 <__udivmoddi4+0xa2>
 8000c36:	e9c5 4800 	strd	r4, r8, [r5]
 8000c3a:	e7e2      	b.n	8000c02 <__udivmoddi4+0xa2>
 8000c3c:	2a00      	cmp	r2, #0
 8000c3e:	f000 8090 	beq.w	8000d62 <__udivmoddi4+0x202>
 8000c42:	fab2 f682 	clz	r6, r2
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	f040 80a4 	bne.w	8000d94 <__udivmoddi4+0x234>
 8000c4c:	1a8a      	subs	r2, r1, r2
 8000c4e:	0c03      	lsrs	r3, r0, #16
 8000c50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c54:	b280      	uxth	r0, r0
 8000c56:	b2bc      	uxth	r4, r7
 8000c58:	2101      	movs	r1, #1
 8000c5a:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c5e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c66:	fb04 f20c 	mul.w	r2, r4, ip
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x11e>
 8000c6e:	18fb      	adds	r3, r7, r3
 8000c70:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c74:	d202      	bcs.n	8000c7c <__udivmoddi4+0x11c>
 8000c76:	429a      	cmp	r2, r3
 8000c78:	f200 80e0 	bhi.w	8000e3c <__udivmoddi4+0x2dc>
 8000c7c:	46c4      	mov	ip, r8
 8000c7e:	1a9b      	subs	r3, r3, r2
 8000c80:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c84:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c88:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c8c:	fb02 f404 	mul.w	r4, r2, r4
 8000c90:	429c      	cmp	r4, r3
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0x144>
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x142>
 8000c9c:	429c      	cmp	r4, r3
 8000c9e:	f200 80ca 	bhi.w	8000e36 <__udivmoddi4+0x2d6>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	1b1b      	subs	r3, r3, r4
 8000ca6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000caa:	e7a5      	b.n	8000bf8 <__udivmoddi4+0x98>
 8000cac:	f1c1 0620 	rsb	r6, r1, #32
 8000cb0:	408b      	lsls	r3, r1
 8000cb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cb6:	431f      	orrs	r7, r3
 8000cb8:	fa0e f401 	lsl.w	r4, lr, r1
 8000cbc:	fa20 f306 	lsr.w	r3, r0, r6
 8000cc0:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cc4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cc8:	4323      	orrs	r3, r4
 8000cca:	fa00 f801 	lsl.w	r8, r0, r1
 8000cce:	fa1f fc87 	uxth.w	ip, r7
 8000cd2:	fbbe f0f9 	udiv	r0, lr, r9
 8000cd6:	0c1c      	lsrs	r4, r3, #16
 8000cd8:	fb09 ee10 	mls	lr, r9, r0, lr
 8000cdc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ce0:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cea:	d909      	bls.n	8000d00 <__udivmoddi4+0x1a0>
 8000cec:	193c      	adds	r4, r7, r4
 8000cee:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cf2:	f080 809c 	bcs.w	8000e2e <__udivmoddi4+0x2ce>
 8000cf6:	45a6      	cmp	lr, r4
 8000cf8:	f240 8099 	bls.w	8000e2e <__udivmoddi4+0x2ce>
 8000cfc:	3802      	subs	r0, #2
 8000cfe:	443c      	add	r4, r7
 8000d00:	eba4 040e 	sub.w	r4, r4, lr
 8000d04:	fa1f fe83 	uxth.w	lr, r3
 8000d08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d10:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d14:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x1ce>
 8000d1c:	193c      	adds	r4, r7, r4
 8000d1e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d22:	f080 8082 	bcs.w	8000e2a <__udivmoddi4+0x2ca>
 8000d26:	45a4      	cmp	ip, r4
 8000d28:	d97f      	bls.n	8000e2a <__udivmoddi4+0x2ca>
 8000d2a:	3b02      	subs	r3, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d32:	eba4 040c 	sub.w	r4, r4, ip
 8000d36:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d3a:	4564      	cmp	r4, ip
 8000d3c:	4673      	mov	r3, lr
 8000d3e:	46e1      	mov	r9, ip
 8000d40:	d362      	bcc.n	8000e08 <__udivmoddi4+0x2a8>
 8000d42:	d05f      	beq.n	8000e04 <__udivmoddi4+0x2a4>
 8000d44:	b15d      	cbz	r5, 8000d5e <__udivmoddi4+0x1fe>
 8000d46:	ebb8 0203 	subs.w	r2, r8, r3
 8000d4a:	eb64 0409 	sbc.w	r4, r4, r9
 8000d4e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d52:	fa22 f301 	lsr.w	r3, r2, r1
 8000d56:	431e      	orrs	r6, r3
 8000d58:	40cc      	lsrs	r4, r1
 8000d5a:	e9c5 6400 	strd	r6, r4, [r5]
 8000d5e:	2100      	movs	r1, #0
 8000d60:	e74f      	b.n	8000c02 <__udivmoddi4+0xa2>
 8000d62:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d66:	0c01      	lsrs	r1, r0, #16
 8000d68:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d72:	463b      	mov	r3, r7
 8000d74:	4638      	mov	r0, r7
 8000d76:	463c      	mov	r4, r7
 8000d78:	46b8      	mov	r8, r7
 8000d7a:	46be      	mov	lr, r7
 8000d7c:	2620      	movs	r6, #32
 8000d7e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d82:	eba2 0208 	sub.w	r2, r2, r8
 8000d86:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d8a:	e766      	b.n	8000c5a <__udivmoddi4+0xfa>
 8000d8c:	4601      	mov	r1, r0
 8000d8e:	e718      	b.n	8000bc2 <__udivmoddi4+0x62>
 8000d90:	4610      	mov	r0, r2
 8000d92:	e72c      	b.n	8000bee <__udivmoddi4+0x8e>
 8000d94:	f1c6 0220 	rsb	r2, r6, #32
 8000d98:	fa2e f302 	lsr.w	r3, lr, r2
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	40b1      	lsls	r1, r6
 8000da0:	fa20 f202 	lsr.w	r2, r0, r2
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	430a      	orrs	r2, r1
 8000daa:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	fb0e 3318 	mls	r3, lr, r8, r3
 8000db4:	0c11      	lsrs	r1, r2, #16
 8000db6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dba:	fb08 f904 	mul.w	r9, r8, r4
 8000dbe:	40b0      	lsls	r0, r6
 8000dc0:	4589      	cmp	r9, r1
 8000dc2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dc6:	b280      	uxth	r0, r0
 8000dc8:	d93e      	bls.n	8000e48 <__udivmoddi4+0x2e8>
 8000dca:	1879      	adds	r1, r7, r1
 8000dcc:	f108 3cff 	add.w	ip, r8, #4294967295
 8000dd0:	d201      	bcs.n	8000dd6 <__udivmoddi4+0x276>
 8000dd2:	4589      	cmp	r9, r1
 8000dd4:	d81f      	bhi.n	8000e16 <__udivmoddi4+0x2b6>
 8000dd6:	eba1 0109 	sub.w	r1, r1, r9
 8000dda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dde:	fb09 f804 	mul.w	r8, r9, r4
 8000de2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de6:	b292      	uxth	r2, r2
 8000de8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dec:	4542      	cmp	r2, r8
 8000dee:	d229      	bcs.n	8000e44 <__udivmoddi4+0x2e4>
 8000df0:	18ba      	adds	r2, r7, r2
 8000df2:	f109 31ff 	add.w	r1, r9, #4294967295
 8000df6:	d2c4      	bcs.n	8000d82 <__udivmoddi4+0x222>
 8000df8:	4542      	cmp	r2, r8
 8000dfa:	d2c2      	bcs.n	8000d82 <__udivmoddi4+0x222>
 8000dfc:	f1a9 0102 	sub.w	r1, r9, #2
 8000e00:	443a      	add	r2, r7
 8000e02:	e7be      	b.n	8000d82 <__udivmoddi4+0x222>
 8000e04:	45f0      	cmp	r8, lr
 8000e06:	d29d      	bcs.n	8000d44 <__udivmoddi4+0x1e4>
 8000e08:	ebbe 0302 	subs.w	r3, lr, r2
 8000e0c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e10:	3801      	subs	r0, #1
 8000e12:	46e1      	mov	r9, ip
 8000e14:	e796      	b.n	8000d44 <__udivmoddi4+0x1e4>
 8000e16:	eba7 0909 	sub.w	r9, r7, r9
 8000e1a:	4449      	add	r1, r9
 8000e1c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e20:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e24:	fb09 f804 	mul.w	r8, r9, r4
 8000e28:	e7db      	b.n	8000de2 <__udivmoddi4+0x282>
 8000e2a:	4673      	mov	r3, lr
 8000e2c:	e77f      	b.n	8000d2e <__udivmoddi4+0x1ce>
 8000e2e:	4650      	mov	r0, sl
 8000e30:	e766      	b.n	8000d00 <__udivmoddi4+0x1a0>
 8000e32:	4608      	mov	r0, r1
 8000e34:	e6fd      	b.n	8000c32 <__udivmoddi4+0xd2>
 8000e36:	443b      	add	r3, r7
 8000e38:	3a02      	subs	r2, #2
 8000e3a:	e733      	b.n	8000ca4 <__udivmoddi4+0x144>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	443b      	add	r3, r7
 8000e42:	e71c      	b.n	8000c7e <__udivmoddi4+0x11e>
 8000e44:	4649      	mov	r1, r9
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x222>
 8000e48:	eba1 0109 	sub.w	r1, r1, r9
 8000e4c:	46c4      	mov	ip, r8
 8000e4e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e52:	fb09 f804 	mul.w	r8, r9, r4
 8000e56:	e7c4      	b.n	8000de2 <__udivmoddi4+0x282>

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	0000      	movs	r0, r0
	...

08000e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e60:	b5b0      	push	{r4, r5, r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e66:	f005 fb21 	bl	80064ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6a:	f003 fe1b 	bl	8004aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e6e:	f003 ff69 	bl	8004d44 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e72:	f003 ff47 	bl	8004d04 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e76:	f003 ff1b 	bl	8004cb0 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000e7a:	f003 fe81 	bl	8004b80 <MX_CAN1_Init>
  MX_TIM11_Init();
 8000e7e:	f003 feeb 	bl	8004c58 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000e82:	4810      	ldr	r0, [pc, #64]	@ (8000ec4 <main+0x64>)
 8000e84:	f005 fd70 	bl	8006968 <HAL_CAN_Start>
  HAL_CAN_ResetError(&hcan1);
 8000e88:	480e      	ldr	r0, [pc, #56]	@ (8000ec4 <main+0x64>)
 8000e8a:	f006 f9ee 	bl	800726a <HAL_CAN_ResetError>
  //
      //HAL_UART_Receive_IT(&huart2, Rx_general_UART_Buffer, sizeof(Rx_general_UART_Buffer));
      HAL_UART_Receive_DMA(&huart2, Rx_general_UART_Buffer, sizeof(Rx_general_UART_Buffer));
 8000e8e:	2226      	movs	r2, #38	@ 0x26
 8000e90:	490d      	ldr	r1, [pc, #52]	@ (8000ec8 <main+0x68>)
 8000e92:	480e      	ldr	r0, [pc, #56]	@ (8000ecc <main+0x6c>)
 8000e94:	f008 f868 	bl	8008f68 <HAL_UART_Receive_DMA>
      //__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
  HAL_TIM_Base_Init(&htim11);
 8000e98:	480d      	ldr	r0, [pc, #52]	@ (8000ed0 <main+0x70>)
 8000e9a:	f007 fd39 	bl	8008910 <HAL_TIM_Base_Init>
  if (HAL_TIM_Base_Start_IT(&htim11) != HAL_OK)
 8000e9e:	480c      	ldr	r0, [pc, #48]	@ (8000ed0 <main+0x70>)
 8000ea0:	f007 fd90 	bl	80089c4 <HAL_TIM_Base_Start_IT>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <main+0x4e>
  {
      Error_Handler();
 8000eaa:	f005 fa47 	bl	800633c <Error_Handler>
  }
  Node[0].BASE_ID_NODE=2;//a questo punto si imposta un ciclo che si aspetta che vengano settati i valori dei due nodi o da usart2 o da wifi, poi seguirà un setting automatico di tutti i messaggi predefiniti e valori da azzerare....
 8000eae:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <main+0x74>)
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	601a      	str	r2, [r3, #0]
  Node[1].BASE_ID_NODE=3;//battezzo pari lo sterzo e dispari la trazione
 8000eb4:	4b07      	ldr	r3, [pc, #28]	@ (8000ed4 <main+0x74>)
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	f8c3 239c 	str.w	r2, [r3, #924]	@ 0x39c

  for(int i=0;i<NUMBER_OF_NODES ;i++){
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
 8000ec0:	e3c9      	b.n	8001656 <main+0x7f6>
 8000ec2:	bf00      	nop
 8000ec4:	20000078 	.word	0x20000078
 8000ec8:	200008cc 	.word	0x200008cc
 8000ecc:	200000e8 	.word	0x200000e8
 8000ed0:	200000a0 	.word	0x200000a0
 8000ed4:	20000190 	.word	0x20000190
	  //config nmt
	  //Node[i].TxBuffer={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	  //Node[i].state_Drive_string='stato_non_definito';
	  //Node[i].state_NMT_string='stato_non_definito';
	  Node[i].Update_state_usart_pending=true;
 8000ed8:	4ac4      	ldr	r2, [pc, #784]	@ (80011ec <main+0x38c>)
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8000ee0:	fb01 f303 	mul.w	r3, r1, r3
 8000ee4:	4413      	add	r3, r2
 8000ee6:	f203 23fa 	addw	r3, r3, #762	@ 0x2fa
 8000eea:	2201      	movs	r2, #1
 8000eec:	701a      	strb	r2, [r3, #0]
	  Node[i].Speed_search_for_zero=1000;
 8000eee:	4abf      	ldr	r2, [pc, #764]	@ (80011ec <main+0x38c>)
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8000ef6:	fb01 f303 	mul.w	r3, r1, r3
 8000efa:	4413      	add	r3, r2
 8000efc:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8000f00:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f04:	601a      	str	r2, [r3, #0]
	  Node[i].Profile_Velocity=1000;
 8000f06:	4ab9      	ldr	r2, [pc, #740]	@ (80011ec <main+0x38c>)
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8000f0e:	fb01 f303 	mul.w	r3, r1, r3
 8000f12:	4413      	add	r3, r2
 8000f14:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8000f18:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f1c:	601a      	str	r2, [r3, #0]
	  Node[i].Target_Velocity=1000;
 8000f1e:	4ab3      	ldr	r2, [pc, #716]	@ (80011ec <main+0x38c>)
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8000f26:	fb01 f303 	mul.w	r3, r1, r3
 8000f2a:	4413      	add	r3, r2
 8000f2c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8000f30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f34:	601a      	str	r2, [r3, #0]
	  Node[i].Targhet_Position=1000;
 8000f36:	4aad      	ldr	r2, [pc, #692]	@ (80011ec <main+0x38c>)
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8000f3e:	fb01 f303 	mul.w	r3, r1, r3
 8000f42:	4413      	add	r3, r2
 8000f44:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8000f48:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f4c:	601a      	str	r2, [r3, #0]
	  Node[i].Tx_STD_Header_NMT.StdId=0;
 8000f4e:	4aa7      	ldr	r2, [pc, #668]	@ (80011ec <main+0x38c>)
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8000f56:	fb01 f303 	mul.w	r3, r1, r3
 8000f5a:	4413      	add	r3, r2
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
	  Node[i].Tx_STD_Header_NMT.ExtId=0;
 8000f62:	4aa2      	ldr	r2, [pc, #648]	@ (80011ec <main+0x38c>)
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8000f6a:	fb01 f303 	mul.w	r3, r1, r3
 8000f6e:	4413      	add	r3, r2
 8000f70:	3308      	adds	r3, #8
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
	  Node[i].Tx_STD_Header_NMT.IDE=CAN_ID_STD;
 8000f76:	4a9d      	ldr	r2, [pc, #628]	@ (80011ec <main+0x38c>)
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8000f7e:	fb01 f303 	mul.w	r3, r1, r3
 8000f82:	4413      	add	r3, r2
 8000f84:	330c      	adds	r3, #12
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
	  Node[i].Tx_STD_Header_NMT.TransmitGlobalTime = DISABLE;
 8000f8a:	4a98      	ldr	r2, [pc, #608]	@ (80011ec <main+0x38c>)
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8000f92:	fb01 f303 	mul.w	r3, r1, r3
 8000f96:	4413      	add	r3, r2
 8000f98:	3318      	adds	r3, #24
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
	  Node[i].Tx_STD_Header_NMT.RTR = CAN_RTR_DATA;
 8000f9e:	4a93      	ldr	r2, [pc, #588]	@ (80011ec <main+0x38c>)
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8000fa6:	fb01 f303 	mul.w	r3, r1, r3
 8000faa:	4413      	add	r3, r2
 8000fac:	3310      	adds	r3, #16
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
	  Node[i].Tx_STD_Header_NMT.DLC=2;
 8000fb2:	4a8e      	ldr	r2, [pc, #568]	@ (80011ec <main+0x38c>)
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8000fba:	fb01 f303 	mul.w	r3, r1, r3
 8000fbe:	4413      	add	r3, r2
 8000fc0:	3314      	adds	r3, #20
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	601a      	str	r2, [r3, #0]
	  Node[i].TxData_NMT[1]=Node[i].BASE_ID_NODE;
 8000fc6:	4a89      	ldr	r2, [pc, #548]	@ (80011ec <main+0x38c>)
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8000fce:	fb01 f303 	mul.w	r3, r1, r3
 8000fd2:	4413      	add	r3, r2
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	b2d8      	uxtb	r0, r3
 8000fd8:	4a84      	ldr	r2, [pc, #528]	@ (80011ec <main+0x38c>)
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8000fe0:	fb01 f303 	mul.w	r3, r1, r3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	339d      	adds	r3, #157	@ 0x9d
 8000fe8:	4602      	mov	r2, r0
 8000fea:	701a      	strb	r2, [r3, #0]

	  Node[i].Tx_STD_Header_PDO[0].StdId=0x200+Node[i].BASE_ID_NODE;
 8000fec:	4a7f      	ldr	r2, [pc, #508]	@ (80011ec <main+0x38c>)
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8000ff4:	fb01 f303 	mul.w	r3, r1, r3
 8000ff8:	4413      	add	r3, r2
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f503 7200 	add.w	r2, r3, #512	@ 0x200
 8001000:	497a      	ldr	r1, [pc, #488]	@ (80011ec <main+0x38c>)
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001008:	fb00 f303 	mul.w	r3, r0, r3
 800100c:	440b      	add	r3, r1
 800100e:	331c      	adds	r3, #28
 8001010:	601a      	str	r2, [r3, #0]
	  Node[i].Tx_STD_Header_PDO[1].StdId=0x300+Node[i].BASE_ID_NODE;
 8001012:	4a76      	ldr	r2, [pc, #472]	@ (80011ec <main+0x38c>)
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800101a:	fb01 f303 	mul.w	r3, r1, r3
 800101e:	4413      	add	r3, r2
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f503 7240 	add.w	r2, r3, #768	@ 0x300
 8001026:	4971      	ldr	r1, [pc, #452]	@ (80011ec <main+0x38c>)
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 800102e:	fb00 f303 	mul.w	r3, r0, r3
 8001032:	440b      	add	r3, r1
 8001034:	3334      	adds	r3, #52	@ 0x34
 8001036:	601a      	str	r2, [r3, #0]
	  Node[i].Tx_STD_Header_PDO[2].StdId=0x400+Node[i].BASE_ID_NODE;
 8001038:	4a6c      	ldr	r2, [pc, #432]	@ (80011ec <main+0x38c>)
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001040:	fb01 f303 	mul.w	r3, r1, r3
 8001044:	4413      	add	r3, r2
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 800104c:	4967      	ldr	r1, [pc, #412]	@ (80011ec <main+0x38c>)
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001054:	fb00 f303 	mul.w	r3, r0, r3
 8001058:	440b      	add	r3, r1
 800105a:	334c      	adds	r3, #76	@ 0x4c
 800105c:	601a      	str	r2, [r3, #0]
	  //Node[i].Tx_STD_Header_PDO[3].StdId=0x500+Node[i].BASE_ID_NODE;
	  Node[i].Tx_STD_Header_PDO[0].DLC=7;
 800105e:	4a63      	ldr	r2, [pc, #396]	@ (80011ec <main+0x38c>)
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001066:	fb01 f303 	mul.w	r3, r1, r3
 800106a:	4413      	add	r3, r2
 800106c:	332c      	adds	r3, #44	@ 0x2c
 800106e:	2207      	movs	r2, #7
 8001070:	601a      	str	r2, [r3, #0]
	  Node[i].Tx_STD_Header_PDO[1].DLC=6;
 8001072:	4a5e      	ldr	r2, [pc, #376]	@ (80011ec <main+0x38c>)
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800107a:	fb01 f303 	mul.w	r3, r1, r3
 800107e:	4413      	add	r3, r2
 8001080:	3344      	adds	r3, #68	@ 0x44
 8001082:	2206      	movs	r2, #6
 8001084:	601a      	str	r2, [r3, #0]
	  Node[i].Tx_STD_Header_PDO[2].DLC=8;
 8001086:	4a59      	ldr	r2, [pc, #356]	@ (80011ec <main+0x38c>)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800108e:	fb01 f303 	mul.w	r3, r1, r3
 8001092:	4413      	add	r3, r2
 8001094:	335c      	adds	r3, #92	@ 0x5c
 8001096:	2208      	movs	r2, #8
 8001098:	601a      	str	r2, [r3, #0]
	  Node[i].Tx_STD_Header_PDO[0].IDE=CAN_ID_STD;
 800109a:	4a54      	ldr	r2, [pc, #336]	@ (80011ec <main+0x38c>)
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80010a2:	fb01 f303 	mul.w	r3, r1, r3
 80010a6:	4413      	add	r3, r2
 80010a8:	3324      	adds	r3, #36	@ 0x24
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
	  Node[i].Tx_STD_Header_PDO[1].IDE=CAN_ID_STD;
 80010ae:	4a4f      	ldr	r2, [pc, #316]	@ (80011ec <main+0x38c>)
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80010b6:	fb01 f303 	mul.w	r3, r1, r3
 80010ba:	4413      	add	r3, r2
 80010bc:	333c      	adds	r3, #60	@ 0x3c
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
	  Node[i].Tx_STD_Header_PDO[2].IDE=CAN_ID_STD;
 80010c2:	4a4a      	ldr	r2, [pc, #296]	@ (80011ec <main+0x38c>)
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80010ca:	fb01 f303 	mul.w	r3, r1, r3
 80010ce:	4413      	add	r3, r2
 80010d0:	3354      	adds	r3, #84	@ 0x54
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]


	  Node[i].buffer_shift_refister=0;
 80010d6:	4a45      	ldr	r2, [pc, #276]	@ (80011ec <main+0x38c>)
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80010de:	fb01 f303 	mul.w	r3, r1, r3
 80010e2:	4413      	add	r3, r2
 80010e4:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
	  Node[i].buffer_shift_refister_main=0;
 80010ec:	4a3f      	ldr	r2, [pc, #252]	@ (80011ec <main+0x38c>)
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80010f4:	fb01 f303 	mul.w	r3, r1, r3
 80010f8:	4413      	add	r3, r2
 80010fa:	f203 23e5 	addw	r3, r3, #741	@ 0x2e5
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]

	  	  Node[i].Tx_STD_Header_PDO[0].ExtId=Node[i].Tx_STD_Header_PDO[1].ExtId=Node[i].Tx_STD_Header_PDO[2].ExtId=0;
 8001102:	4a3a      	ldr	r2, [pc, #232]	@ (80011ec <main+0x38c>)
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800110a:	fb01 f303 	mul.w	r3, r1, r3
 800110e:	4413      	add	r3, r2
 8001110:	3350      	adds	r3, #80	@ 0x50
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	4a35      	ldr	r2, [pc, #212]	@ (80011ec <main+0x38c>)
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800111e:	fb01 f303 	mul.w	r3, r1, r3
 8001122:	4413      	add	r3, r2
 8001124:	3350      	adds	r3, #80	@ 0x50
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4930      	ldr	r1, [pc, #192]	@ (80011ec <main+0x38c>)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001130:	fb00 f303 	mul.w	r3, r0, r3
 8001134:	440b      	add	r3, r1
 8001136:	3338      	adds	r3, #56	@ 0x38
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	4a2c      	ldr	r2, [pc, #176]	@ (80011ec <main+0x38c>)
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001142:	fb01 f303 	mul.w	r3, r1, r3
 8001146:	4413      	add	r3, r2
 8001148:	3338      	adds	r3, #56	@ 0x38
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4927      	ldr	r1, [pc, #156]	@ (80011ec <main+0x38c>)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001154:	fb00 f303 	mul.w	r3, r0, r3
 8001158:	440b      	add	r3, r1
 800115a:	3320      	adds	r3, #32
 800115c:	601a      	str	r2, [r3, #0]
	  	  Node[i].Tx_STD_Header_PDO[0].IDE=Node[i].Tx_STD_Header_PDO[1].IDE=Node[i].Tx_STD_Header_PDO[2].IDE=CAN_ID_STD;
 800115e:	4a23      	ldr	r2, [pc, #140]	@ (80011ec <main+0x38c>)
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001166:	fb01 f303 	mul.w	r3, r1, r3
 800116a:	4413      	add	r3, r2
 800116c:	3354      	adds	r3, #84	@ 0x54
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	4a1e      	ldr	r2, [pc, #120]	@ (80011ec <main+0x38c>)
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800117a:	fb01 f303 	mul.w	r3, r1, r3
 800117e:	4413      	add	r3, r2
 8001180:	3354      	adds	r3, #84	@ 0x54
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4919      	ldr	r1, [pc, #100]	@ (80011ec <main+0x38c>)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 800118c:	fb00 f303 	mul.w	r3, r0, r3
 8001190:	440b      	add	r3, r1
 8001192:	333c      	adds	r3, #60	@ 0x3c
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	4a15      	ldr	r2, [pc, #84]	@ (80011ec <main+0x38c>)
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800119e:	fb01 f303 	mul.w	r3, r1, r3
 80011a2:	4413      	add	r3, r2
 80011a4:	333c      	adds	r3, #60	@ 0x3c
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4910      	ldr	r1, [pc, #64]	@ (80011ec <main+0x38c>)
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 80011b0:	fb00 f303 	mul.w	r3, r0, r3
 80011b4:	440b      	add	r3, r1
 80011b6:	3324      	adds	r3, #36	@ 0x24
 80011b8:	601a      	str	r2, [r3, #0]
	  	  Node[i].Tx_STD_Header_PDO[0].TransmitGlobalTime = Node[i].Tx_STD_Header_PDO[1].TransmitGlobalTime=Node[i].Tx_STD_Header_PDO[2].TransmitGlobalTime=DISABLE;
 80011ba:	4a0c      	ldr	r2, [pc, #48]	@ (80011ec <main+0x38c>)
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80011c2:	fb01 f303 	mul.w	r3, r1, r3
 80011c6:	4413      	add	r3, r2
 80011c8:	3360      	adds	r3, #96	@ 0x60
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
 80011ce:	4a07      	ldr	r2, [pc, #28]	@ (80011ec <main+0x38c>)
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80011d6:	fb01 f303 	mul.w	r3, r1, r3
 80011da:	4413      	add	r3, r2
 80011dc:	3360      	adds	r3, #96	@ 0x60
 80011de:	7818      	ldrb	r0, [r3, #0]
 80011e0:	4a02      	ldr	r2, [pc, #8]	@ (80011ec <main+0x38c>)
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80011e8:	e002      	b.n	80011f0 <main+0x390>
 80011ea:	bf00      	nop
 80011ec:	20000190 	.word	0x20000190
 80011f0:	fb01 f303 	mul.w	r3, r1, r3
 80011f4:	4413      	add	r3, r2
 80011f6:	3348      	adds	r3, #72	@ 0x48
 80011f8:	4602      	mov	r2, r0
 80011fa:	701a      	strb	r2, [r3, #0]
 80011fc:	4ac1      	ldr	r2, [pc, #772]	@ (8001504 <main+0x6a4>)
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001204:	fb01 f303 	mul.w	r3, r1, r3
 8001208:	4413      	add	r3, r2
 800120a:	3348      	adds	r3, #72	@ 0x48
 800120c:	7818      	ldrb	r0, [r3, #0]
 800120e:	4abd      	ldr	r2, [pc, #756]	@ (8001504 <main+0x6a4>)
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001216:	fb01 f303 	mul.w	r3, r1, r3
 800121a:	4413      	add	r3, r2
 800121c:	3330      	adds	r3, #48	@ 0x30
 800121e:	4602      	mov	r2, r0
 8001220:	701a      	strb	r2, [r3, #0]
	  	  Node[i].Tx_STD_Header_PDO[0].RTR =Node[i].Tx_STD_Header_PDO[1].RTR =Node[i].Tx_STD_Header_PDO[2].RTR = CAN_RTR_DATA;
 8001222:	4ab8      	ldr	r2, [pc, #736]	@ (8001504 <main+0x6a4>)
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800122a:	fb01 f303 	mul.w	r3, r1, r3
 800122e:	4413      	add	r3, r2
 8001230:	3358      	adds	r3, #88	@ 0x58
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	4ab3      	ldr	r2, [pc, #716]	@ (8001504 <main+0x6a4>)
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800123e:	fb01 f303 	mul.w	r3, r1, r3
 8001242:	4413      	add	r3, r2
 8001244:	3358      	adds	r3, #88	@ 0x58
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	49ae      	ldr	r1, [pc, #696]	@ (8001504 <main+0x6a4>)
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001250:	fb00 f303 	mul.w	r3, r0, r3
 8001254:	440b      	add	r3, r1
 8001256:	3340      	adds	r3, #64	@ 0x40
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	4aaa      	ldr	r2, [pc, #680]	@ (8001504 <main+0x6a4>)
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001262:	fb01 f303 	mul.w	r3, r1, r3
 8001266:	4413      	add	r3, r2
 8001268:	3340      	adds	r3, #64	@ 0x40
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	49a5      	ldr	r1, [pc, #660]	@ (8001504 <main+0x6a4>)
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001274:	fb00 f303 	mul.w	r3, r0, r3
 8001278:	440b      	add	r3, r1
 800127a:	3328      	adds	r3, #40	@ 0x28
 800127c:	601a      	str	r2, [r3, #0]

	  Node[i].NMT_slave_feadback=0;
 800127e:	4aa1      	ldr	r2, [pc, #644]	@ (8001504 <main+0x6a4>)
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001286:	fb01 f303 	mul.w	r3, r1, r3
 800128a:	4413      	add	r3, r2
 800128c:	f203 23e6 	addw	r3, r3, #742	@ 0x2e6
 8001290:	2200      	movs	r2, #0
 8001292:	801a      	strh	r2, [r3, #0]
	  Node[i].NMT_slave_state=0;
 8001294:	4a9b      	ldr	r2, [pc, #620]	@ (8001504 <main+0x6a4>)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800129c:	fb01 f303 	mul.w	r3, r1, r3
 80012a0:	4413      	add	r3, r2
 80012a2:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 80012a6:	2200      	movs	r2, #0
 80012a8:	801a      	strh	r2, [r3, #0]
	  Node[i].NMT_Writer=0;
 80012aa:	4a96      	ldr	r2, [pc, #600]	@ (8001504 <main+0x6a4>)
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80012b2:	fb01 f303 	mul.w	r3, r1, r3
 80012b6:	4413      	add	r3, r2
 80012b8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80012bc:	2200      	movs	r2, #0
 80012be:	801a      	strh	r2, [r3, #0]
	  Node[i].NMT_slave_state_requested=0;
 80012c0:	4a90      	ldr	r2, [pc, #576]	@ (8001504 <main+0x6a4>)
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80012c8:	fb01 f303 	mul.w	r3, r1, r3
 80012cc:	4413      	add	r3, r2
 80012ce:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 80012d2:	2200      	movs	r2, #0
 80012d4:	801a      	strh	r2, [r3, #0]

	  Node[i].Enter_Pre_Operational=false;
 80012d6:	4a8b      	ldr	r2, [pc, #556]	@ (8001504 <main+0x6a4>)
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80012de:	fb01 f303 	mul.w	r3, r1, r3
 80012e2:	4413      	add	r3, r2
 80012e4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
	  Node[i].Reset_Communication=false;
 80012ec:	4a85      	ldr	r2, [pc, #532]	@ (8001504 <main+0x6a4>)
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80012f4:	fb01 f303 	mul.w	r3, r1, r3
 80012f8:	4413      	add	r3, r2
 80012fa:	f203 3327 	addw	r3, r3, #807	@ 0x327
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
	  Node[i].Reset_Node=false;
 8001302:	4a80      	ldr	r2, [pc, #512]	@ (8001504 <main+0x6a4>)
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800130a:	fb01 f303 	mul.w	r3, r1, r3
 800130e:	4413      	add	r3, r2
 8001310:	f503 734a 	add.w	r3, r3, #808	@ 0x328
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
	  Node[i].Start_Remote_Node=false;
 8001318:	4a7a      	ldr	r2, [pc, #488]	@ (8001504 <main+0x6a4>)
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001320:	fb01 f303 	mul.w	r3, r1, r3
 8001324:	4413      	add	r3, r2
 8001326:	f203 3329 	addw	r3, r3, #809	@ 0x329
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
	  Node[i].Stop_Remote_Node=false;
 800132e:	4a75      	ldr	r2, [pc, #468]	@ (8001504 <main+0x6a4>)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001336:	fb01 f303 	mul.w	r3, r1, r3
 800133a:	4413      	add	r3, r2
 800133c:	f203 332a 	addw	r3, r3, #810	@ 0x32a
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]

	  Node[i].Shutdown=false;
 8001344:	4a6f      	ldr	r2, [pc, #444]	@ (8001504 <main+0x6a4>)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800134c:	fb01 f303 	mul.w	r3, r1, r3
 8001350:	4413      	add	r3, r2
 8001352:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
	  Node[i].Switch_On=false;
 800135a:	4a6a      	ldr	r2, [pc, #424]	@ (8001504 <main+0x6a4>)
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001362:	fb01 f303 	mul.w	r3, r1, r3
 8001366:	4413      	add	r3, r2
 8001368:	f203 332d 	addw	r3, r3, #813	@ 0x32d
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
	  Node[i].Disable_voltage=false;
 8001370:	4a64      	ldr	r2, [pc, #400]	@ (8001504 <main+0x6a4>)
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001378:	fb01 f303 	mul.w	r3, r1, r3
 800137c:	4413      	add	r3, r2
 800137e:	f203 332e 	addw	r3, r3, #814	@ 0x32e
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
	  Node[i].Quick_Stop=false;
 8001386:	4a5f      	ldr	r2, [pc, #380]	@ (8001504 <main+0x6a4>)
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800138e:	fb01 f303 	mul.w	r3, r1, r3
 8001392:	4413      	add	r3, r2
 8001394:	f203 332f 	addw	r3, r3, #815	@ 0x32f
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
	  Node[i].Disable_operation=false;
 800139c:	4a59      	ldr	r2, [pc, #356]	@ (8001504 <main+0x6a4>)
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80013a4:	fb01 f303 	mul.w	r3, r1, r3
 80013a8:	4413      	add	r3, r2
 80013aa:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
	  Node[i].Enable_Operation=false;
 80013b2:	4a54      	ldr	r2, [pc, #336]	@ (8001504 <main+0x6a4>)
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80013ba:	fb01 f303 	mul.w	r3, r1, r3
 80013be:	4413      	add	r3, r2
 80013c0:	f203 3331 	addw	r3, r3, #817	@ 0x331
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
	  Node[i].Fault_Reset=false;
 80013c8:	4a4e      	ldr	r2, [pc, #312]	@ (8001504 <main+0x6a4>)
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80013d0:	fb01 f303 	mul.w	r3, r1, r3
 80013d4:	4413      	add	r3, r2
 80013d6:	f203 3332 	addw	r3, r3, #818	@ 0x332
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]
	  Node[i].Transition_Drive_requested=false;
 80013de:	4a49      	ldr	r2, [pc, #292]	@ (8001504 <main+0x6a4>)
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80013e6:	fb01 f303 	mul.w	r3, r1, r3
 80013ea:	4413      	add	r3, r2
 80013ec:	f203 332b 	addw	r3, r3, #811	@ 0x32b
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
	  Node[i].Transition_Drive_requested=false;
 80013f4:	4a43      	ldr	r2, [pc, #268]	@ (8001504 <main+0x6a4>)
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80013fc:	fb01 f303 	mul.w	r3, r1, r3
 8001400:	4413      	add	r3, r2
 8001402:	f203 332b 	addw	r3, r3, #811	@ 0x32b
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]

	  Node[i].Hight_Level_State=-1;
 800140a:	4a3e      	ldr	r2, [pc, #248]	@ (8001504 <main+0x6a4>)
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001412:	fb01 f303 	mul.w	r3, r1, r3
 8001416:	4413      	add	r3, r2
 8001418:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 800141c:	22ff      	movs	r2, #255	@ 0xff
 800141e:	701a      	strb	r2, [r3, #0]
	  Node[i].SubStates_Power_Disabled=-1;
 8001420:	4a38      	ldr	r2, [pc, #224]	@ (8001504 <main+0x6a4>)
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001428:	fb01 f303 	mul.w	r3, r1, r3
 800142c:	4413      	add	r3, r2
 800142e:	f203 331f 	addw	r3, r3, #799	@ 0x31f
 8001432:	22ff      	movs	r2, #255	@ 0xff
 8001434:	701a      	strb	r2, [r3, #0]
	  Node[i].SubStates_Fault=-1;
 8001436:	4a33      	ldr	r2, [pc, #204]	@ (8001504 <main+0x6a4>)
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800143e:	fb01 f303 	mul.w	r3, r1, r3
 8001442:	4413      	add	r3, r2
 8001444:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8001448:	22ff      	movs	r2, #255	@ 0xff
 800144a:	701a      	strb	r2, [r3, #0]
	  Node[i].SubStates_Power_Enabled=-1;
 800144c:	4a2d      	ldr	r2, [pc, #180]	@ (8001504 <main+0x6a4>)
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001454:	fb01 f303 	mul.w	r3, r1, r3
 8001458:	4413      	add	r3, r2
 800145a:	f203 3321 	addw	r3, r3, #801	@ 0x321
 800145e:	22ff      	movs	r2, #255	@ 0xff
 8001460:	701a      	strb	r2, [r3, #0]
	  Node[i].Mode_Of_Operation_State_Machine_Var=0;
 8001462:	4a28      	ldr	r2, [pc, #160]	@ (8001504 <main+0x6a4>)
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800146a:	fb01 f303 	mul.w	r3, r1, r3
 800146e:	4413      	add	r3, r2
 8001470:	f203 3322 	addw	r3, r3, #802	@ 0x322
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]


	  Node[i].buffer_shift_refister_main=0;
 8001478:	4a22      	ldr	r2, [pc, #136]	@ (8001504 <main+0x6a4>)
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001480:	fb01 f303 	mul.w	r3, r1, r3
 8001484:	4413      	add	r3, r2
 8001486:	f203 23e5 	addw	r3, r3, #741	@ 0x2e5
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
	  Node[i].buffer_shift_refister=0;
 800148e:	4a1d      	ldr	r2, [pc, #116]	@ (8001504 <main+0x6a4>)
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001496:	fb01 f303 	mul.w	r3, r1, r3
 800149a:	4413      	add	r3, r2
 800149c:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
	  Node[i].Actual_Position_encoder=0;
 80014a4:	4a17      	ldr	r2, [pc, #92]	@ (8001504 <main+0x6a4>)
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80014ac:	fb01 f303 	mul.w	r3, r1, r3
 80014b0:	4413      	add	r3, r2
 80014b2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
	  Node[i].Actual_Current=0;
 80014ba:	4a12      	ldr	r2, [pc, #72]	@ (8001504 <main+0x6a4>)
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80014c2:	fb01 f303 	mul.w	r3, r1, r3
 80014c6:	4413      	add	r3, r2
 80014c8:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
	  Node[i].NMT_Writer=0;
 80014d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001504 <main+0x6a4>)
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80014d8:	fb01 f303 	mul.w	r3, r1, r3
 80014dc:	4413      	add	r3, r2
 80014de:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80014e2:	2200      	movs	r2, #0
 80014e4:	801a      	strh	r2, [r3, #0]
	  Node[i].Mode_of_operation_out=0;
 80014e6:	4a07      	ldr	r2, [pc, #28]	@ (8001504 <main+0x6a4>)
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80014ee:	fb01 f303 	mul.w	r3, r1, r3
 80014f2:	4413      	add	r3, r2
 80014f4:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
	  for (int j = 0; j < 16; j++){
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
 8001500:	e01f      	b.n	8001542 <main+0x6e2>
 8001502:	bf00      	nop
 8001504:	20000190 	.word	0x20000190
		  Node[i].StatusWord_bool[j]=0;
 8001508:	4a94      	ldr	r2, [pc, #592]	@ (800175c <main+0x8fc>)
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001510:	fb01 f303 	mul.w	r3, r1, r3
 8001514:	441a      	add	r2, r3
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	4413      	add	r3, r2
 800151a:	f203 23ea 	addw	r3, r3, #746	@ 0x2ea
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
		  Node[i].ControlWord_bool[j]=0;
 8001522:	4a8e      	ldr	r2, [pc, #568]	@ (800175c <main+0x8fc>)
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800152a:	fb01 f303 	mul.w	r3, r1, r3
 800152e:	441a      	add	r2, r3
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	4413      	add	r3, r2
 8001534:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
	  for (int j = 0; j < 16; j++){
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	3301      	adds	r3, #1
 8001540:	61bb      	str	r3, [r7, #24]
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	2b0f      	cmp	r3, #15
 8001546:	dddf      	ble.n	8001508 <main+0x6a8>
	  }
	  Node[i].TxBuffer_acii[18]='#';
 8001548:	4a84      	ldr	r2, [pc, #528]	@ (800175c <main+0x8fc>)
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001550:	fb01 f303 	mul.w	r3, r1, r3
 8001554:	4413      	add	r3, r2
 8001556:	f203 3376 	addw	r3, r3, #886	@ 0x376
 800155a:	2223      	movs	r2, #35	@ 0x23
 800155c:	701a      	strb	r2, [r3, #0]
	  Node[i].TxBuffer_acii[19]='#';
 800155e:	4a7f      	ldr	r2, [pc, #508]	@ (800175c <main+0x8fc>)
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001566:	fb01 f303 	mul.w	r3, r1, r3
 800156a:	4413      	add	r3, r2
 800156c:	f203 3377 	addw	r3, r3, #887	@ 0x377
 8001570:	2223      	movs	r2, #35	@ 0x23
 8001572:	701a      	strb	r2, [r3, #0]
	  Node[i].TxBuffer_acii[20]='#';
 8001574:	4a79      	ldr	r2, [pc, #484]	@ (800175c <main+0x8fc>)
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800157c:	fb01 f303 	mul.w	r3, r1, r3
 8001580:	4413      	add	r3, r2
 8001582:	f503 735e 	add.w	r3, r3, #888	@ 0x378
 8001586:	2223      	movs	r2, #35	@ 0x23
 8001588:	701a      	strb	r2, [r3, #0]
	  Node[i].TxBuffer_acii[21]='#';
 800158a:	4a74      	ldr	r2, [pc, #464]	@ (800175c <main+0x8fc>)
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001592:	fb01 f303 	mul.w	r3, r1, r3
 8001596:	4413      	add	r3, r2
 8001598:	f203 3379 	addw	r3, r3, #889	@ 0x379
 800159c:	2223      	movs	r2, #35	@ 0x23
 800159e:	701a      	strb	r2, [r3, #0]
	  Node[i].TxBuffer_acii[22]='#';
 80015a0:	4a6e      	ldr	r2, [pc, #440]	@ (800175c <main+0x8fc>)
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80015a8:	fb01 f303 	mul.w	r3, r1, r3
 80015ac:	4413      	add	r3, r2
 80015ae:	f203 337a 	addw	r3, r3, #890	@ 0x37a
 80015b2:	2223      	movs	r2, #35	@ 0x23
 80015b4:	701a      	strb	r2, [r3, #0]
	  Node[i].TxBuffer_acii[23]='L';
 80015b6:	4a69      	ldr	r2, [pc, #420]	@ (800175c <main+0x8fc>)
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80015be:	fb01 f303 	mul.w	r3, r1, r3
 80015c2:	4413      	add	r3, r2
 80015c4:	f203 337b 	addw	r3, r3, #891	@ 0x37b
 80015c8:	224c      	movs	r2, #76	@ 0x4c
 80015ca:	701a      	strb	r2, [r3, #0]
	  Node[i].TxBuffer_Priority_acii[21]='#';
 80015cc:	4a63      	ldr	r2, [pc, #396]	@ (800175c <main+0x8fc>)
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80015d4:	fb01 f303 	mul.w	r3, r1, r3
 80015d8:	4413      	add	r3, r2
 80015da:	f203 3391 	addw	r3, r3, #913	@ 0x391
 80015de:	2223      	movs	r2, #35	@ 0x23
 80015e0:	701a      	strb	r2, [r3, #0]
	  Node[i].TxBuffer_Priority_acii[22]='#';
 80015e2:	4a5e      	ldr	r2, [pc, #376]	@ (800175c <main+0x8fc>)
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80015ea:	fb01 f303 	mul.w	r3, r1, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	f203 3392 	addw	r3, r3, #914	@ 0x392
 80015f4:	2223      	movs	r2, #35	@ 0x23
 80015f6:	701a      	strb	r2, [r3, #0]
	  Node[i].TxBuffer_Priority_acii[23]='H';
 80015f8:	4a58      	ldr	r2, [pc, #352]	@ (800175c <main+0x8fc>)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001600:	fb01 f303 	mul.w	r3, r1, r3
 8001604:	4413      	add	r3, r2
 8001606:	f203 3393 	addw	r3, r3, #915	@ 0x393
 800160a:	2248      	movs	r2, #72	@ 0x48
 800160c:	701a      	strb	r2, [r3, #0]
	  Node[i].last_timer_tick=0;
 800160e:	4a53      	ldr	r2, [pc, #332]	@ (800175c <main+0x8fc>)
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001616:	fb01 f303 	mul.w	r3, r1, r3
 800161a:	4413      	add	r3, r2
 800161c:	f503 7366 	add.w	r3, r3, #920	@ 0x398
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
	  Node[i].timer_fired=0;
 8001624:	4a4d      	ldr	r2, [pc, #308]	@ (800175c <main+0x8fc>)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800162c:	fb01 f303 	mul.w	r3, r1, r3
 8001630:	4413      	add	r3, r2
 8001632:	f203 3395 	addw	r3, r3, #917	@ 0x395
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
	  Node[i].pending_uart_msg=0;
 800163a:	4a48      	ldr	r2, [pc, #288]	@ (800175c <main+0x8fc>)
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001642:	fb01 f303 	mul.w	r3, r1, r3
 8001646:	4413      	add	r3, r2
 8001648:	f503 7365 	add.w	r3, r3, #916	@ 0x394
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<NUMBER_OF_NODES ;i++){
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	3301      	adds	r3, #1
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	2b01      	cmp	r3, #1
 800165a:	f77f ac3d 	ble.w	8000ed8 <main+0x78>
	  //finire......

  }
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800165e:	2102      	movs	r1, #2
 8001660:	483f      	ldr	r0, [pc, #252]	@ (8001760 <main+0x900>)
 8001662:	f005 fbb7 	bl	8006dd4 <HAL_CAN_ActivateNotification>
  //HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FifO0_FULL);
  //HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FifO0_OVERRUN);
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 8001666:	2110      	movs	r1, #16
 8001668:	483d      	ldr	r0, [pc, #244]	@ (8001760 <main+0x900>)
 800166a:	f005 fbb3 	bl	8006dd4 <HAL_CAN_ActivateNotification>
  //HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FifO1_FULL);
  //HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FifO1_OVERRUN);

  __HAL_RCC_TIM11_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b3c      	ldr	r3, [pc, #240]	@ (8001764 <main+0x904>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	4a3b      	ldr	r2, [pc, #236]	@ (8001764 <main+0x904>)
 8001678:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800167c:	6453      	str	r3, [r2, #68]	@ 0x44
 800167e:	4b39      	ldr	r3, [pc, #228]	@ (8001764 <main+0x904>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001682:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int k=0;k<NUMBER_OF_NODES;k++){
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	f003 b9f9 	b.w	8004a84 <main+0x3c24>
	  if (Node[k].BASE_ID_NODE!=0){
 8001692:	4a32      	ldr	r2, [pc, #200]	@ (800175c <main+0x8fc>)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800169a:	fb01 f303 	mul.w	r3, r1, r3
 800169e:	4413      	add	r3, r2
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f003 81eb 	beq.w	8004a7e <main+0x3c1e>
	  //if i due buffer sono di valore diverso allora autoincremento elaboro il prossimo


	  if(Node[k].buffer_shift_refister!=Node[k].buffer_shift_refister_main){
 80016a8:	4a2c      	ldr	r2, [pc, #176]	@ (800175c <main+0x8fc>)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80016b0:	fb01 f303 	mul.w	r3, r1, r3
 80016b4:	4413      	add	r3, r2
 80016b6:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80016ba:	781a      	ldrb	r2, [r3, #0]
 80016bc:	4927      	ldr	r1, [pc, #156]	@ (800175c <main+0x8fc>)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 80016c4:	fb00 f303 	mul.w	r3, r0, r3
 80016c8:	440b      	add	r3, r1
 80016ca:	f203 23e5 	addw	r3, r3, #741	@ 0x2e5
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	f001 8102 	beq.w	80028da <main+0x1a7a>
		  switch (Node[k].RxHeader_node[Node[k].buffer_shift_refister].StdId-(uint32_t)Node[k].BASE_ID_NODE) {
 80016d6:	4a21      	ldr	r2, [pc, #132]	@ (800175c <main+0x8fc>)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80016de:	fb01 f303 	mul.w	r3, r1, r3
 80016e2:	4413      	add	r3, r2
 80016e4:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	491b      	ldr	r1, [pc, #108]	@ (800175c <main+0x8fc>)
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	4603      	mov	r3, r0
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	1a1b      	subs	r3, r3, r0
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 80016fc:	fb00 f202 	mul.w	r2, r0, r2
 8001700:	4413      	add	r3, r2
 8001702:	440b      	add	r3, r1
 8001704:	33a4      	adds	r3, #164	@ 0xa4
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4914      	ldr	r1, [pc, #80]	@ (800175c <main+0x8fc>)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001710:	fb00 f303 	mul.w	r3, r0, r3
 8001714:	440b      	add	r3, r1
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800171e:	d023      	beq.n	8001768 <main+0x908>
 8001720:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001724:	f201 80a9 	bhi.w	800287a <main+0x1a1a>
 8001728:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800172c:	f000 86b8 	beq.w	80024a0 <main+0x1640>
 8001730:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8001734:	f201 80a1 	bhi.w	800287a <main+0x1a1a>
 8001738:	f5b3 7f60 	cmp.w	r3, #896	@ 0x380
 800173c:	f000 84c0 	beq.w	80020c0 <main+0x1260>
 8001740:	f5b3 7f60 	cmp.w	r3, #896	@ 0x380
 8001744:	f201 8099 	bhi.w	800287a <main+0x1a1a>
 8001748:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800174c:	f000 809c 	beq.w	8001888 <main+0xa28>
 8001750:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8001754:	f000 82c4 	beq.w	8001ce0 <main+0xe80>
 8001758:	f001 b88f 	b.w	800287a <main+0x1a1a>
 800175c:	20000190 	.word	0x20000190
 8001760:	20000078 	.word	0x20000078
 8001764:	40023800 	.word	0x40023800
		  		case 0x700://Heartbeat nmt state
		  			Node[k].NMT_slave_feadback=Node[k].RxData_node[Node[k].buffer_shift_refister][0];
 8001768:	4a67      	ldr	r2, [pc, #412]	@ (8001908 <main+0xaa8>)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001770:	fb01 f303 	mul.w	r3, r1, r3
 8001774:	4413      	add	r3, r2
 8001776:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	4962      	ldr	r1, [pc, #392]	@ (8001908 <main+0xaa8>)
 800177e:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	00d2      	lsls	r2, r2, #3
 8001786:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 800178a:	fb00 f303 	mul.w	r3, r0, r3
 800178e:	4413      	add	r3, r2
 8001790:	440b      	add	r3, r1
 8001792:	3304      	adds	r3, #4
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b218      	sxth	r0, r3
 8001798:	4a5b      	ldr	r2, [pc, #364]	@ (8001908 <main+0xaa8>)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80017a0:	fb01 f303 	mul.w	r3, r1, r3
 80017a4:	4413      	add	r3, r2
 80017a6:	f203 23e6 	addw	r3, r3, #742	@ 0x2e6
 80017aa:	4602      	mov	r2, r0
 80017ac:	801a      	strh	r2, [r3, #0]
		  			Node[k].TxBuffer_Priority_acii[0]=(uint8_t)Node[k].BASE_ID_NODE;
 80017ae:	4a56      	ldr	r2, [pc, #344]	@ (8001908 <main+0xaa8>)
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80017b6:	fb01 f303 	mul.w	r3, r1, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	b2d8      	uxtb	r0, r3
 80017c0:	4a51      	ldr	r2, [pc, #324]	@ (8001908 <main+0xaa8>)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80017c8:	fb01 f303 	mul.w	r3, r1, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	f503 735f 	add.w	r3, r3, #892	@ 0x37c
 80017d2:	4602      	mov	r2, r0
 80017d4:	701a      	strb	r2, [r3, #0]
		  			Node[k].TxBuffer_acii[0]=(uint8_t)Node[k].BASE_ID_NODE;
 80017d6:	4a4c      	ldr	r2, [pc, #304]	@ (8001908 <main+0xaa8>)
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80017de:	fb01 f303 	mul.w	r3, r1, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	b2d8      	uxtb	r0, r3
 80017e8:	4a47      	ldr	r2, [pc, #284]	@ (8001908 <main+0xaa8>)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80017f0:	fb01 f303 	mul.w	r3, r1, r3
 80017f4:	4413      	add	r3, r2
 80017f6:	f503 7359 	add.w	r3, r3, #868	@ 0x364
 80017fa:	4602      	mov	r2, r0
 80017fc:	701a      	strb	r2, [r3, #0]
		  			Node[k].TxBuffer_Priority_acii[1]=Node[k].StatusWord_bool[10];
 80017fe:	4a42      	ldr	r2, [pc, #264]	@ (8001908 <main+0xaa8>)
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001806:	fb01 f303 	mul.w	r3, r1, r3
 800180a:	4413      	add	r3, r2
 800180c:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	4a3c      	ldr	r2, [pc, #240]	@ (8001908 <main+0xaa8>)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800181c:	fb01 f303 	mul.w	r3, r1, r3
 8001820:	4413      	add	r3, r2
 8001822:	f203 337d 	addw	r3, r3, #893	@ 0x37d
 8001826:	4602      	mov	r2, r0
 8001828:	701a      	strb	r2, [r3, #0]
		  			Node[k].TxBuffer_acii[1]=Node[k].RxData_node[Node[k].buffer_shift_refister][0];
 800182a:	4a37      	ldr	r2, [pc, #220]	@ (8001908 <main+0xaa8>)
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	4413      	add	r3, r2
 8001838:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	4932      	ldr	r1, [pc, #200]	@ (8001908 <main+0xaa8>)
 8001840:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	00d2      	lsls	r2, r2, #3
 8001848:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 800184c:	fb00 f303 	mul.w	r3, r0, r3
 8001850:	4413      	add	r3, r2
 8001852:	440b      	add	r3, r1
 8001854:	3304      	adds	r3, #4
 8001856:	7818      	ldrb	r0, [r3, #0]
 8001858:	4a2b      	ldr	r2, [pc, #172]	@ (8001908 <main+0xaa8>)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001860:	fb01 f303 	mul.w	r3, r1, r3
 8001864:	4413      	add	r3, r2
 8001866:	f203 3365 	addw	r3, r3, #869	@ 0x365
 800186a:	4602      	mov	r2, r0
 800186c:	701a      	strb	r2, [r3, #0]

		  			/*if (huart2.gState == HAL_UART_STATE_READY) {//da aggiustare bene amodo
		  					  						    HAL_UART_Transmit_IT(&huart2, (uint8_t*)Node[k].TxBuffer_acii,  strlen(Node[k].TxBuffer_acii));
		  					  						}*///da aggiustare
		  					  			 Node[k].pending_uart_msg=1;
 800186e:	4a26      	ldr	r2, [pc, #152]	@ (8001908 <main+0xaa8>)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001876:	fb01 f303 	mul.w	r3, r1, r3
 800187a:	4413      	add	r3, r2
 800187c:	f503 7365 	add.w	r3, r3, #916	@ 0x394
 8001880:	2201      	movs	r2, #1
 8001882:	701a      	strb	r2, [r3, #0]
		  			break;
 8001884:	f000 bff9 	b.w	800287a <main+0x1a1a>
		  		case 0x180://pdo1
		  			Node[k].StatusWord_app= ((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][1] << 8)|
 8001888:	4a1f      	ldr	r2, [pc, #124]	@ (8001908 <main+0xaa8>)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001890:	fb01 f303 	mul.w	r3, r1, r3
 8001894:	4413      	add	r3, r2
 8001896:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	491a      	ldr	r1, [pc, #104]	@ (8001908 <main+0xaa8>)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	00d2      	lsls	r2, r2, #3
 80018a4:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 80018a8:	fb00 f303 	mul.w	r3, r0, r3
 80018ac:	4413      	add	r3, r2
 80018ae:	440b      	add	r3, r1
 80018b0:	f203 2365 	addw	r3, r3, #613	@ 0x265
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	b29b      	uxth	r3, r3
		  									((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][0]);
 80018ba:	4913      	ldr	r1, [pc, #76]	@ (8001908 <main+0xaa8>)
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 80018c2:	fb00 f202 	mul.w	r2, r0, r2
 80018c6:	440a      	add	r2, r1
 80018c8:	f502 7239 	add.w	r2, r2, #740	@ 0x2e4
 80018cc:	7812      	ldrb	r2, [r2, #0]
 80018ce:	480e      	ldr	r0, [pc, #56]	@ (8001908 <main+0xaa8>)
 80018d0:	f102 014c 	add.w	r1, r2, #76	@ 0x4c
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	00c9      	lsls	r1, r1, #3
 80018d8:	f44f 7467 	mov.w	r4, #924	@ 0x39c
 80018dc:	fb04 f202 	mul.w	r2, r4, r2
 80018e0:	440a      	add	r2, r1
 80018e2:	4402      	add	r2, r0
 80018e4:	3204      	adds	r2, #4
 80018e6:	7812      	ldrb	r2, [r2, #0]
		  			Node[k].StatusWord_app= ((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][1] << 8)|
 80018e8:	4313      	orrs	r3, r2
 80018ea:	b298      	uxth	r0, r3
 80018ec:	4a06      	ldr	r2, [pc, #24]	@ (8001908 <main+0xaa8>)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80018f4:	fb01 f303 	mul.w	r3, r1, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80018fe:	4602      	mov	r2, r0
 8001900:	801a      	strh	r2, [r3, #0]
		  			for (int j=0;j<=15;j++){
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	e03a      	b.n	800197e <main+0xb1e>
 8001908:	20000190 	.word	0x20000190
		  				Node[k].StatusWord_bool[j] = (Node[k].StatusWord_app % 2) == 1;
 800190c:	4ac7      	ldr	r2, [pc, #796]	@ (8001c2c <main+0xdcc>)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001914:	fb01 f303 	mul.w	r3, r1, r3
 8001918:	4413      	add	r3, r2
 800191a:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	b29b      	uxth	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	bf14      	ite	ne
 800192a:	2301      	movne	r3, #1
 800192c:	2300      	moveq	r3, #0
 800192e:	b2d8      	uxtb	r0, r3
 8001930:	4abe      	ldr	r2, [pc, #760]	@ (8001c2c <main+0xdcc>)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001938:	fb01 f303 	mul.w	r3, r1, r3
 800193c:	441a      	add	r2, r3
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4413      	add	r3, r2
 8001942:	f203 23ea 	addw	r3, r3, #746	@ 0x2ea
 8001946:	4602      	mov	r2, r0
 8001948:	701a      	strb	r2, [r3, #0]
		  				Node[k].StatusWord_app = Node[k].StatusWord_app / 2;
 800194a:	4ab8      	ldr	r2, [pc, #736]	@ (8001c2c <main+0xdcc>)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001952:	fb01 f303 	mul.w	r3, r1, r3
 8001956:	4413      	add	r3, r2
 8001958:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	085b      	lsrs	r3, r3, #1
 8001960:	b298      	uxth	r0, r3
 8001962:	4ab2      	ldr	r2, [pc, #712]	@ (8001c2c <main+0xdcc>)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	4413      	add	r3, r2
 8001970:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001974:	4602      	mov	r2, r0
 8001976:	801a      	strh	r2, [r3, #0]
		  			for (int j=0;j<=15;j++){
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	3301      	adds	r3, #1
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	2b0f      	cmp	r3, #15
 8001982:	ddc3      	ble.n	800190c <main+0xaac>
		  			}
		  			Node[k].Mode_of_operation=(uint8_t)Node[k].RxData_node[Node[k].buffer_shift_refister][2];
 8001984:	4aa9      	ldr	r2, [pc, #676]	@ (8001c2c <main+0xdcc>)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800198c:	fb01 f303 	mul.w	r3, r1, r3
 8001990:	4413      	add	r3, r2
 8001992:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	49a4      	ldr	r1, [pc, #656]	@ (8001c2c <main+0xdcc>)
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	00d2      	lsls	r2, r2, #3
 80019a0:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 80019a4:	fb00 f303 	mul.w	r3, r0, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	440b      	add	r3, r1
 80019ac:	f203 2366 	addw	r3, r3, #614	@ 0x266
 80019b0:	7818      	ldrb	r0, [r3, #0]
 80019b2:	4a9e      	ldr	r2, [pc, #632]	@ (8001c2c <main+0xdcc>)
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80019ba:	fb01 f303 	mul.w	r3, r1, r3
 80019be:	4413      	add	r3, r2
 80019c0:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 80019c4:	4602      	mov	r2, r0
 80019c6:	701a      	strb	r2, [r3, #0]

		  			Node[k].Touch_probe_status= ((uint16_t)Node[k].RxData_node[Node[k].buffer_shift_refister][6] << 8)|
		  					  					  					((uint16_t)Node[k].RxData_node[Node[k].buffer_shift_refister][5]);
 80019c8:	4a98      	ldr	r2, [pc, #608]	@ (8001c2c <main+0xdcc>)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80019d0:	fb01 f303 	mul.w	r3, r1, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	461a      	mov	r2, r3
 80019de:	4993      	ldr	r1, [pc, #588]	@ (8001c2c <main+0xdcc>)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	00d2      	lsls	r2, r2, #3
 80019e4:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 80019e8:	fb00 f303 	mul.w	r3, r0, r3
 80019ec:	4413      	add	r3, r2
 80019ee:	440b      	add	r3, r1
 80019f0:	f203 2369 	addw	r3, r3, #617	@ 0x269
 80019f4:	7818      	ldrb	r0, [r3, #0]
		  			Node[k].Touch_probe_status= ((uint16_t)Node[k].RxData_node[Node[k].buffer_shift_refister][6] << 8)|
 80019f6:	4a8d      	ldr	r2, [pc, #564]	@ (8001c2c <main+0xdcc>)
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80019fe:	fb01 f303 	mul.w	r3, r1, r3
 8001a02:	4413      	add	r3, r2
 8001a04:	f203 23fb 	addw	r3, r3, #763	@ 0x2fb
 8001a08:	4602      	mov	r2, r0
 8001a0a:	701a      	strb	r2, [r3, #0]
		  					  			Node[k].Error_code= ((uint16_t)Node[k].RxData_node[Node[k].buffer_shift_refister][4] << 8)|
 8001a0c:	4a87      	ldr	r2, [pc, #540]	@ (8001c2c <main+0xdcc>)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001a14:	fb01 f303 	mul.w	r3, r1, r3
 8001a18:	4413      	add	r3, r2
 8001a1a:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	4982      	ldr	r1, [pc, #520]	@ (8001c2c <main+0xdcc>)
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	00d2      	lsls	r2, r2, #3
 8001a28:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001a2c:	fb00 f303 	mul.w	r3, r0, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	440b      	add	r3, r1
 8001a34:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	b21a      	sxth	r2, r3
		  					  					  			((uint16_t)Node[k].RxData_node[Node[k].buffer_shift_refister][3]);
 8001a40:	497a      	ldr	r1, [pc, #488]	@ (8001c2c <main+0xdcc>)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001a48:	fb00 f303 	mul.w	r3, r0, r3
 8001a4c:	440b      	add	r3, r1
 8001a4e:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4619      	mov	r1, r3
 8001a56:	4875      	ldr	r0, [pc, #468]	@ (8001c2c <main+0xdcc>)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	00c9      	lsls	r1, r1, #3
 8001a5c:	f44f 7467 	mov.w	r4, #924	@ 0x39c
 8001a60:	fb04 f303 	mul.w	r3, r4, r3
 8001a64:	440b      	add	r3, r1
 8001a66:	4403      	add	r3, r0
 8001a68:	f203 2367 	addw	r3, r3, #615	@ 0x267
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	b21b      	sxth	r3, r3
		  					  			Node[k].Error_code= ((uint16_t)Node[k].RxData_node[Node[k].buffer_shift_refister][4] << 8)|
 8001a70:	4313      	orrs	r3, r2
 8001a72:	b21b      	sxth	r3, r3
 8001a74:	b298      	uxth	r0, r3
 8001a76:	4a6d      	ldr	r2, [pc, #436]	@ (8001c2c <main+0xdcc>)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001a7e:	fb01 f303 	mul.w	r3, r1, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8001a88:	4602      	mov	r2, r0
 8001a8a:	801a      	strh	r2, [r3, #0]

		  			Node[k].TxBuffer_acii[2]=Node[k].Hight_Level_State;
 8001a8c:	4a67      	ldr	r2, [pc, #412]	@ (8001c2c <main+0xdcc>)
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001a94:	fb01 f303 	mul.w	r3, r1, r3
 8001a98:	4413      	add	r3, r2
 8001a9a:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8001a9e:	f993 3000 	ldrsb.w	r3, [r3]
 8001aa2:	b2d8      	uxtb	r0, r3
 8001aa4:	4a61      	ldr	r2, [pc, #388]	@ (8001c2c <main+0xdcc>)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001aac:	fb01 f303 	mul.w	r3, r1, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f203 3366 	addw	r3, r3, #870	@ 0x366
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	701a      	strb	r2, [r3, #0]
					Node[k].TxBuffer_acii[3]=Node[k].SubStates_Power_Enabled;
 8001aba:	4a5c      	ldr	r2, [pc, #368]	@ (8001c2c <main+0xdcc>)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001ac2:	fb01 f303 	mul.w	r3, r1, r3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	f203 3321 	addw	r3, r3, #801	@ 0x321
 8001acc:	f993 3000 	ldrsb.w	r3, [r3]
 8001ad0:	b2d8      	uxtb	r0, r3
 8001ad2:	4a56      	ldr	r2, [pc, #344]	@ (8001c2c <main+0xdcc>)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001ada:	fb01 f303 	mul.w	r3, r1, r3
 8001ade:	4413      	add	r3, r2
 8001ae0:	f203 3367 	addw	r3, r3, #871	@ 0x367
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	701a      	strb	r2, [r3, #0]
					Node[k].TxBuffer_acii[4]=Node[k].SubStates_Power_Disabled;
 8001ae8:	4a50      	ldr	r2, [pc, #320]	@ (8001c2c <main+0xdcc>)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001af0:	fb01 f303 	mul.w	r3, r1, r3
 8001af4:	4413      	add	r3, r2
 8001af6:	f203 331f 	addw	r3, r3, #799	@ 0x31f
 8001afa:	f993 3000 	ldrsb.w	r3, [r3]
 8001afe:	b2d8      	uxtb	r0, r3
 8001b00:	4a4a      	ldr	r2, [pc, #296]	@ (8001c2c <main+0xdcc>)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001b08:	fb01 f303 	mul.w	r3, r1, r3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8001b12:	4602      	mov	r2, r0
 8001b14:	701a      	strb	r2, [r3, #0]
					Node[k].TxBuffer_acii[5]=Node[k].SubStates_Fault;
 8001b16:	4a45      	ldr	r2, [pc, #276]	@ (8001c2c <main+0xdcc>)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001b1e:	fb01 f303 	mul.w	r3, r1, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8001b28:	f993 3000 	ldrsb.w	r3, [r3]
 8001b2c:	b2d8      	uxtb	r0, r3
 8001b2e:	4a3f      	ldr	r2, [pc, #252]	@ (8001c2c <main+0xdcc>)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001b36:	fb01 f303 	mul.w	r3, r1, r3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f203 3369 	addw	r3, r3, #873	@ 0x369
 8001b40:	4602      	mov	r2, r0
 8001b42:	701a      	strb	r2, [r3, #0]
					Node[k].TxBuffer_acii[6]=Node[k].Mode_of_operation;
 8001b44:	4a39      	ldr	r2, [pc, #228]	@ (8001c2c <main+0xdcc>)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001b4c:	fb01 f303 	mul.w	r3, r1, r3
 8001b50:	4413      	add	r3, r2
 8001b52:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8001b56:	7818      	ldrb	r0, [r3, #0]
 8001b58:	4a34      	ldr	r2, [pc, #208]	@ (8001c2c <main+0xdcc>)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001b60:	fb01 f303 	mul.w	r3, r1, r3
 8001b64:	4413      	add	r3, r2
 8001b66:	f203 336a 	addw	r3, r3, #874	@ 0x36a
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	701a      	strb	r2, [r3, #0]
					Node[k].TxBuffer_acii[7]=(uint8_t)Node[k].Touch_probe_status;
 8001b6e:	4a2f      	ldr	r2, [pc, #188]	@ (8001c2c <main+0xdcc>)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f203 23fb 	addw	r3, r3, #763	@ 0x2fb
 8001b80:	7818      	ldrb	r0, [r3, #0]
 8001b82:	4a2a      	ldr	r2, [pc, #168]	@ (8001c2c <main+0xdcc>)
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001b8a:	fb01 f303 	mul.w	r3, r1, r3
 8001b8e:	4413      	add	r3, r2
 8001b90:	f203 336b 	addw	r3, r3, #875	@ 0x36b
 8001b94:	4602      	mov	r2, r0
 8001b96:	701a      	strb	r2, [r3, #0]
					Node[k].TxBuffer_acii[8]=Node[k].RxData_node[Node[k].buffer_shift_refister][6];//most significant
 8001b98:	4a24      	ldr	r2, [pc, #144]	@ (8001c2c <main+0xdcc>)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001ba0:	fb01 f303 	mul.w	r3, r1, r3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	491f      	ldr	r1, [pc, #124]	@ (8001c2c <main+0xdcc>)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	00d2      	lsls	r2, r2, #3
 8001bb4:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001bb8:	fb00 f303 	mul.w	r3, r0, r3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f203 236a 	addw	r3, r3, #618	@ 0x26a
 8001bc4:	7818      	ldrb	r0, [r3, #0]
 8001bc6:	4a19      	ldr	r2, [pc, #100]	@ (8001c2c <main+0xdcc>)
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001bce:	fb01 f303 	mul.w	r3, r1, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8001bd8:	4602      	mov	r2, r0
 8001bda:	701a      	strb	r2, [r3, #0]
			        Node[k].TxBuffer_acii[9]=Node[k].RxData_node[Node[k].buffer_shift_refister][5];//least significant
 8001bdc:	4a13      	ldr	r2, [pc, #76]	@ (8001c2c <main+0xdcc>)
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001be4:	fb01 f303 	mul.w	r3, r1, r3
 8001be8:	4413      	add	r3, r2
 8001bea:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	490e      	ldr	r1, [pc, #56]	@ (8001c2c <main+0xdcc>)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	00d2      	lsls	r2, r2, #3
 8001bf8:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001bfc:	fb00 f303 	mul.w	r3, r0, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	440b      	add	r3, r1
 8001c04:	f203 2369 	addw	r3, r3, #617	@ 0x269
 8001c08:	7818      	ldrb	r0, [r3, #0]
 8001c0a:	4a08      	ldr	r2, [pc, #32]	@ (8001c2c <main+0xdcc>)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001c12:	fb01 f303 	mul.w	r3, r1, r3
 8001c16:	4413      	add	r3, r2
 8001c18:	f203 336d 	addw	r3, r3, #877	@ 0x36d
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	701a      	strb	r2, [r3, #0]
			        Node[k].TxBuffer_Priority_acii[1]=Node[k].StatusWord_bool[10];
 8001c20:	4a02      	ldr	r2, [pc, #8]	@ (8001c2c <main+0xdcc>)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001c28:	e002      	b.n	8001c30 <main+0xdd0>
 8001c2a:	bf00      	nop
 8001c2c:	20000190 	.word	0x20000190
 8001c30:	fb01 f303 	mul.w	r3, r1, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	4a27      	ldr	r2, [pc, #156]	@ (8001cdc <main+0xe7c>)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001c46:	fb01 f303 	mul.w	r3, r1, r3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f203 337d 	addw	r3, r3, #893	@ 0x37d
 8001c50:	4602      	mov	r2, r0
 8001c52:	701a      	strb	r2, [r3, #0]
			        Node[k].TxBuffer_Priority_acii[18]=Node[k].StatusWord_bool[11];
 8001c54:	4a21      	ldr	r2, [pc, #132]	@ (8001cdc <main+0xe7c>)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001c5c:	fb01 f303 	mul.w	r3, r1, r3
 8001c60:	4413      	add	r3, r2
 8001c62:	f203 23f5 	addw	r3, r3, #757	@ 0x2f5
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cdc <main+0xe7c>)
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001c72:	fb01 f303 	mul.w	r3, r1, r3
 8001c76:	4413      	add	r3, r2
 8001c78:	f203 338e 	addw	r3, r3, #910	@ 0x38e
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	701a      	strb	r2, [r3, #0]
			        Node[k].TxBuffer_Priority_acii[19]=Node[k].StatusWord_bool[12];
 8001c80:	4a16      	ldr	r2, [pc, #88]	@ (8001cdc <main+0xe7c>)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001c88:	fb01 f303 	mul.w	r3, r1, r3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f203 23f6 	addw	r3, r3, #758	@ 0x2f6
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	4a11      	ldr	r2, [pc, #68]	@ (8001cdc <main+0xe7c>)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001c9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f203 338f 	addw	r3, r3, #911	@ 0x38f
 8001ca8:	4602      	mov	r2, r0
 8001caa:	701a      	strb	r2, [r3, #0]
			        Node[k].TxBuffer_Priority_acii[20]=Node[k].StatusWord_bool[13];
 8001cac:	4a0b      	ldr	r2, [pc, #44]	@ (8001cdc <main+0xe7c>)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001cb4:	fb01 f303 	mul.w	r3, r1, r3
 8001cb8:	4413      	add	r3, r2
 8001cba:	f203 23f7 	addw	r3, r3, #759	@ 0x2f7
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	4a06      	ldr	r2, [pc, #24]	@ (8001cdc <main+0xe7c>)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001cca:	fb01 f303 	mul.w	r3, r1, r3
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 7364 	add.w	r3, r3, #912	@ 0x390
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	701a      	strb	r2, [r3, #0]
		  			break;
 8001cd8:	f000 bdcf 	b.w	800287a <main+0x1a1a>
 8001cdc:	20000190 	.word	0x20000190
		  		case 0x280:
		  			Node[k].Actual_Position_encoder=((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][3] << 24) |//da verificare l'ordine....del mMSB e LSB perche ho un subbione
 8001ce0:	4acb      	ldr	r2, [pc, #812]	@ (8002010 <main+0x11b0>)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001ce8:	fb01 f303 	mul.w	r3, r1, r3
 8001cec:	4413      	add	r3, r2
 8001cee:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	49c6      	ldr	r1, [pc, #792]	@ (8002010 <main+0x11b0>)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	00d2      	lsls	r2, r2, #3
 8001cfc:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001d00:	fb00 f303 	mul.w	r3, r0, r3
 8001d04:	4413      	add	r3, r2
 8001d06:	440b      	add	r3, r1
 8001d08:	f203 2367 	addw	r3, r3, #615	@ 0x267
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	061a      	lsls	r2, r3, #24
		                     	 	 	 	 	 	((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][2] << 16) |
 8001d10:	49bf      	ldr	r1, [pc, #764]	@ (8002010 <main+0x11b0>)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001d18:	fb00 f303 	mul.w	r3, r0, r3
 8001d1c:	440b      	add	r3, r1
 8001d1e:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	4619      	mov	r1, r3
 8001d26:	48ba      	ldr	r0, [pc, #744]	@ (8002010 <main+0x11b0>)
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	00c9      	lsls	r1, r1, #3
 8001d2c:	f44f 7467 	mov.w	r4, #924	@ 0x39c
 8001d30:	fb04 f303 	mul.w	r3, r4, r3
 8001d34:	440b      	add	r3, r1
 8001d36:	4403      	add	r3, r0
 8001d38:	f203 2366 	addw	r3, r3, #614	@ 0x266
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	041b      	lsls	r3, r3, #16
		  			Node[k].Actual_Position_encoder=((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][3] << 24) |//da verificare l'ordine....del mMSB e LSB perche ho un subbione
 8001d40:	431a      	orrs	r2, r3
													((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][1] << 8)  |
 8001d42:	49b3      	ldr	r1, [pc, #716]	@ (8002010 <main+0x11b0>)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001d4a:	fb00 f303 	mul.w	r3, r0, r3
 8001d4e:	440b      	add	r3, r1
 8001d50:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	4619      	mov	r1, r3
 8001d58:	48ad      	ldr	r0, [pc, #692]	@ (8002010 <main+0x11b0>)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	00c9      	lsls	r1, r1, #3
 8001d5e:	f44f 7467 	mov.w	r4, #924	@ 0x39c
 8001d62:	fb04 f303 	mul.w	r3, r4, r3
 8001d66:	440b      	add	r3, r1
 8001d68:	4403      	add	r3, r0
 8001d6a:	f203 2365 	addw	r3, r3, #613	@ 0x265
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	021b      	lsls	r3, r3, #8
		                     	 	 	 	 	 	((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][2] << 16) |
 8001d72:	4313      	orrs	r3, r2
													((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][0]);
 8001d74:	49a6      	ldr	r1, [pc, #664]	@ (8002010 <main+0x11b0>)
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001d7c:	fb00 f202 	mul.w	r2, r0, r2
 8001d80:	440a      	add	r2, r1
 8001d82:	f502 7239 	add.w	r2, r2, #740	@ 0x2e4
 8001d86:	7812      	ldrb	r2, [r2, #0]
 8001d88:	48a1      	ldr	r0, [pc, #644]	@ (8002010 <main+0x11b0>)
 8001d8a:	f102 014c 	add.w	r1, r2, #76	@ 0x4c
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	00c9      	lsls	r1, r1, #3
 8001d92:	f44f 7467 	mov.w	r4, #924	@ 0x39c
 8001d96:	fb04 f202 	mul.w	r2, r4, r2
 8001d9a:	440a      	add	r2, r1
 8001d9c:	4402      	add	r2, r0
 8001d9e:	3204      	adds	r2, #4
 8001da0:	7812      	ldrb	r2, [r2, #0]
													((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][1] << 8)  |
 8001da2:	431a      	orrs	r2, r3
		  			Node[k].Actual_Position_encoder=((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][3] << 24) |//da verificare l'ordine....del mMSB e LSB perche ho un subbione
 8001da4:	499a      	ldr	r1, [pc, #616]	@ (8002010 <main+0x11b0>)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001dac:	fb00 f303 	mul.w	r3, r0, r3
 8001db0:	440b      	add	r3, r1
 8001db2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001db6:	601a      	str	r2, [r3, #0]
		  			Node[k].Actual_Velocity_encoder=((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][7] << 24) |
 8001db8:	4a95      	ldr	r2, [pc, #596]	@ (8002010 <main+0x11b0>)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001dc0:	fb01 f303 	mul.w	r3, r1, r3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4990      	ldr	r1, [pc, #576]	@ (8002010 <main+0x11b0>)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	00d2      	lsls	r2, r2, #3
 8001dd4:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001dd8:	fb00 f303 	mul.w	r3, r0, r3
 8001ddc:	4413      	add	r3, r2
 8001dde:	440b      	add	r3, r1
 8001de0:	f203 236b 	addw	r3, r3, #619	@ 0x26b
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	061a      	lsls	r2, r3, #24
		  					                     	((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][6] << 16) |
 8001de8:	4989      	ldr	r1, [pc, #548]	@ (8002010 <main+0x11b0>)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001df0:	fb00 f303 	mul.w	r3, r0, r3
 8001df4:	440b      	add	r3, r1
 8001df6:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4884      	ldr	r0, [pc, #528]	@ (8002010 <main+0x11b0>)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	00c9      	lsls	r1, r1, #3
 8001e04:	f44f 7467 	mov.w	r4, #924	@ 0x39c
 8001e08:	fb04 f303 	mul.w	r3, r4, r3
 8001e0c:	440b      	add	r3, r1
 8001e0e:	4403      	add	r3, r0
 8001e10:	f203 236a 	addw	r3, r3, #618	@ 0x26a
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	041b      	lsls	r3, r3, #16
		  			Node[k].Actual_Velocity_encoder=((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][7] << 24) |
 8001e18:	431a      	orrs	r2, r3
		  											((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][5] << 8)  |
 8001e1a:	497d      	ldr	r1, [pc, #500]	@ (8002010 <main+0x11b0>)
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001e22:	fb00 f303 	mul.w	r3, r0, r3
 8001e26:	440b      	add	r3, r1
 8001e28:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4877      	ldr	r0, [pc, #476]	@ (8002010 <main+0x11b0>)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	00c9      	lsls	r1, r1, #3
 8001e36:	f44f 7467 	mov.w	r4, #924	@ 0x39c
 8001e3a:	fb04 f303 	mul.w	r3, r4, r3
 8001e3e:	440b      	add	r3, r1
 8001e40:	4403      	add	r3, r0
 8001e42:	f203 2369 	addw	r3, r3, #617	@ 0x269
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	021b      	lsls	r3, r3, #8
		  					                     	((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][6] << 16) |
 8001e4a:	4313      	orrs	r3, r2
		  											((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][4]);
 8001e4c:	4970      	ldr	r1, [pc, #448]	@ (8002010 <main+0x11b0>)
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001e54:	fb00 f202 	mul.w	r2, r0, r2
 8001e58:	440a      	add	r2, r1
 8001e5a:	f502 7239 	add.w	r2, r2, #740	@ 0x2e4
 8001e5e:	7812      	ldrb	r2, [r2, #0]
 8001e60:	4611      	mov	r1, r2
 8001e62:	486b      	ldr	r0, [pc, #428]	@ (8002010 <main+0x11b0>)
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	00c9      	lsls	r1, r1, #3
 8001e68:	f44f 7467 	mov.w	r4, #924	@ 0x39c
 8001e6c:	fb04 f202 	mul.w	r2, r4, r2
 8001e70:	440a      	add	r2, r1
 8001e72:	4402      	add	r2, r0
 8001e74:	f502 721a 	add.w	r2, r2, #616	@ 0x268
 8001e78:	7812      	ldrb	r2, [r2, #0]
		  											((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][5] << 8)  |
 8001e7a:	431a      	orrs	r2, r3
		  			Node[k].Actual_Velocity_encoder=((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][7] << 24) |
 8001e7c:	4964      	ldr	r1, [pc, #400]	@ (8002010 <main+0x11b0>)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001e84:	fb00 f303 	mul.w	r3, r0, r3
 8001e88:	440b      	add	r3, r1
 8001e8a:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8001e8e:	601a      	str	r2, [r3, #0]

		  			Node[k].TxBuffer_Priority_acii[2]=Node[k].RxData_node[Node[k].buffer_shift_refister][3];//verificare sempre il MSB e il LSb
 8001e90:	4a5f      	ldr	r2, [pc, #380]	@ (8002010 <main+0x11b0>)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001e98:	fb01 f303 	mul.w	r3, r1, r3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	495a      	ldr	r1, [pc, #360]	@ (8002010 <main+0x11b0>)
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	00d2      	lsls	r2, r2, #3
 8001eac:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001eb0:	fb00 f303 	mul.w	r3, r0, r3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f203 2367 	addw	r3, r3, #615	@ 0x267
 8001ebc:	7818      	ldrb	r0, [r3, #0]
 8001ebe:	4a54      	ldr	r2, [pc, #336]	@ (8002010 <main+0x11b0>)
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001ec6:	fb01 f303 	mul.w	r3, r1, r3
 8001eca:	4413      	add	r3, r2
 8001ecc:	f203 337e 	addw	r3, r3, #894	@ 0x37e
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	701a      	strb	r2, [r3, #0]
		  			Node[k].TxBuffer_Priority_acii[3]=Node[k].RxData_node[Node[k].buffer_shift_refister][2];
 8001ed4:	4a4e      	ldr	r2, [pc, #312]	@ (8002010 <main+0x11b0>)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001edc:	fb01 f303 	mul.w	r3, r1, r3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4949      	ldr	r1, [pc, #292]	@ (8002010 <main+0x11b0>)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	00d2      	lsls	r2, r2, #3
 8001ef0:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001ef4:	fb00 f303 	mul.w	r3, r0, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	440b      	add	r3, r1
 8001efc:	f203 2366 	addw	r3, r3, #614	@ 0x266
 8001f00:	7818      	ldrb	r0, [r3, #0]
 8001f02:	4a43      	ldr	r2, [pc, #268]	@ (8002010 <main+0x11b0>)
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001f0a:	fb01 f303 	mul.w	r3, r1, r3
 8001f0e:	4413      	add	r3, r2
 8001f10:	f203 337f 	addw	r3, r3, #895	@ 0x37f
 8001f14:	4602      	mov	r2, r0
 8001f16:	701a      	strb	r2, [r3, #0]
		  			Node[k].TxBuffer_Priority_acii[4]=Node[k].RxData_node[Node[k].buffer_shift_refister][1];
 8001f18:	4a3d      	ldr	r2, [pc, #244]	@ (8002010 <main+0x11b0>)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001f20:	fb01 f303 	mul.w	r3, r1, r3
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4938      	ldr	r1, [pc, #224]	@ (8002010 <main+0x11b0>)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	00d2      	lsls	r2, r2, #3
 8001f34:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001f38:	fb00 f303 	mul.w	r3, r0, r3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	440b      	add	r3, r1
 8001f40:	f203 2365 	addw	r3, r3, #613	@ 0x265
 8001f44:	7818      	ldrb	r0, [r3, #0]
 8001f46:	4a32      	ldr	r2, [pc, #200]	@ (8002010 <main+0x11b0>)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001f4e:	fb01 f303 	mul.w	r3, r1, r3
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 7360 	add.w	r3, r3, #896	@ 0x380
 8001f58:	4602      	mov	r2, r0
 8001f5a:	701a      	strb	r2, [r3, #0]
		  			Node[k].TxBuffer_Priority_acii[5]=Node[k].RxData_node[Node[k].buffer_shift_refister][0];
 8001f5c:	4a2c      	ldr	r2, [pc, #176]	@ (8002010 <main+0x11b0>)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001f64:	fb01 f303 	mul.w	r3, r1, r3
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4927      	ldr	r1, [pc, #156]	@ (8002010 <main+0x11b0>)
 8001f72:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	00d2      	lsls	r2, r2, #3
 8001f7a:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001f7e:	fb00 f303 	mul.w	r3, r0, r3
 8001f82:	4413      	add	r3, r2
 8001f84:	440b      	add	r3, r1
 8001f86:	3304      	adds	r3, #4
 8001f88:	7818      	ldrb	r0, [r3, #0]
 8001f8a:	4a21      	ldr	r2, [pc, #132]	@ (8002010 <main+0x11b0>)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001f92:	fb01 f303 	mul.w	r3, r1, r3
 8001f96:	4413      	add	r3, r2
 8001f98:	f203 3381 	addw	r3, r3, #897	@ 0x381
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	701a      	strb	r2, [r3, #0]
		  			Node[k].TxBuffer_Priority_acii[6]=Node[k].RxData_node[Node[k].buffer_shift_refister][7];//verificare sempre il MSB e il LSb
 8001fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8002010 <main+0x11b0>)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001fa8:	fb01 f303 	mul.w	r3, r1, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4916      	ldr	r1, [pc, #88]	@ (8002010 <main+0x11b0>)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	00d2      	lsls	r2, r2, #3
 8001fbc:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8001fc0:	fb00 f303 	mul.w	r3, r0, r3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f203 236b 	addw	r3, r3, #619	@ 0x26b
 8001fcc:	7818      	ldrb	r0, [r3, #0]
 8001fce:	4a10      	ldr	r2, [pc, #64]	@ (8002010 <main+0x11b0>)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001fd6:	fb01 f303 	mul.w	r3, r1, r3
 8001fda:	4413      	add	r3, r2
 8001fdc:	f203 3382 	addw	r3, r3, #898	@ 0x382
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	701a      	strb	r2, [r3, #0]
		  			Node[k].TxBuffer_Priority_acii[7]=Node[k].RxData_node[Node[k].buffer_shift_refister][6];
 8001fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8002010 <main+0x11b0>)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8001fec:	fb01 f303 	mul.w	r3, r1, r3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4905      	ldr	r1, [pc, #20]	@ (8002010 <main+0x11b0>)
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	00d2      	lsls	r2, r2, #3
 8002000:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8002004:	fb00 f303 	mul.w	r3, r0, r3
 8002008:	4413      	add	r3, r2
 800200a:	440b      	add	r3, r1
 800200c:	e002      	b.n	8002014 <main+0x11b4>
 800200e:	bf00      	nop
 8002010:	20000190 	.word	0x20000190
 8002014:	f203 236a 	addw	r3, r3, #618	@ 0x26a
 8002018:	7818      	ldrb	r0, [r3, #0]
 800201a:	4a28      	ldr	r2, [pc, #160]	@ (80020bc <main+0x125c>)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002022:	fb01 f303 	mul.w	r3, r1, r3
 8002026:	4413      	add	r3, r2
 8002028:	f203 3383 	addw	r3, r3, #899	@ 0x383
 800202c:	4602      	mov	r2, r0
 800202e:	701a      	strb	r2, [r3, #0]
		  			Node[k].TxBuffer_Priority_acii[8]=Node[k].RxData_node[Node[k].buffer_shift_refister][5];
 8002030:	4a22      	ldr	r2, [pc, #136]	@ (80020bc <main+0x125c>)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002038:	fb01 f303 	mul.w	r3, r1, r3
 800203c:	4413      	add	r3, r2
 800203e:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	491d      	ldr	r1, [pc, #116]	@ (80020bc <main+0x125c>)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	00d2      	lsls	r2, r2, #3
 800204c:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8002050:	fb00 f303 	mul.w	r3, r0, r3
 8002054:	4413      	add	r3, r2
 8002056:	440b      	add	r3, r1
 8002058:	f203 2369 	addw	r3, r3, #617	@ 0x269
 800205c:	7818      	ldrb	r0, [r3, #0]
 800205e:	4a17      	ldr	r2, [pc, #92]	@ (80020bc <main+0x125c>)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	4413      	add	r3, r2
 800206c:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 8002070:	4602      	mov	r2, r0
 8002072:	701a      	strb	r2, [r3, #0]
		  			Node[k].TxBuffer_Priority_acii[9]=Node[k].RxData_node[Node[k].buffer_shift_refister][4];
 8002074:	4a11      	ldr	r2, [pc, #68]	@ (80020bc <main+0x125c>)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	4413      	add	r3, r2
 8002082:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	490c      	ldr	r1, [pc, #48]	@ (80020bc <main+0x125c>)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	00d2      	lsls	r2, r2, #3
 8002090:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8002094:	fb00 f303 	mul.w	r3, r0, r3
 8002098:	4413      	add	r3, r2
 800209a:	440b      	add	r3, r1
 800209c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80020a0:	7818      	ldrb	r0, [r3, #0]
 80020a2:	4a06      	ldr	r2, [pc, #24]	@ (80020bc <main+0x125c>)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80020aa:	fb01 f303 	mul.w	r3, r1, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	f203 3385 	addw	r3, r3, #901	@ 0x385
 80020b4:	4602      	mov	r2, r0
 80020b6:	701a      	strb	r2, [r3, #0]
		  			// Ricostruzione del valore dell'encoder a 32 bit (little-endian)
		  			break;
 80020b8:	e3df      	b.n	800287a <main+0x1a1a>
 80020ba:	bf00      	nop
 80020bc:	20000190 	.word	0x20000190
		  		case 0x380:
		  			Node[k].Digital_inputs=((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][7] << 24) |
 80020c0:	4acb      	ldr	r2, [pc, #812]	@ (80023f0 <main+0x1590>)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80020c8:	fb01 f303 	mul.w	r3, r1, r3
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	49c6      	ldr	r1, [pc, #792]	@ (80023f0 <main+0x1590>)
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	00d2      	lsls	r2, r2, #3
 80020dc:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 80020e0:	fb00 f303 	mul.w	r3, r0, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	440b      	add	r3, r1
 80020e8:	f203 236b 	addw	r3, r3, #619	@ 0x26b
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	061a      	lsls	r2, r3, #24
	 	 	 	 	 								((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][6] << 16) |
 80020f0:	49bf      	ldr	r1, [pc, #764]	@ (80023f0 <main+0x1590>)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 80020f8:	fb00 f303 	mul.w	r3, r0, r3
 80020fc:	440b      	add	r3, r1
 80020fe:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4619      	mov	r1, r3
 8002106:	48ba      	ldr	r0, [pc, #744]	@ (80023f0 <main+0x1590>)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	00c9      	lsls	r1, r1, #3
 800210c:	f44f 7467 	mov.w	r4, #924	@ 0x39c
 8002110:	fb04 f303 	mul.w	r3, r4, r3
 8002114:	440b      	add	r3, r1
 8002116:	4403      	add	r3, r0
 8002118:	f203 236a 	addw	r3, r3, #618	@ 0x26a
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	041b      	lsls	r3, r3, #16
		  			Node[k].Digital_inputs=((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][7] << 24) |
 8002120:	431a      	orrs	r2, r3
													((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][5] << 8)  |
 8002122:	49b3      	ldr	r1, [pc, #716]	@ (80023f0 <main+0x1590>)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 800212a:	fb00 f303 	mul.w	r3, r0, r3
 800212e:	440b      	add	r3, r1
 8002130:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	4619      	mov	r1, r3
 8002138:	48ad      	ldr	r0, [pc, #692]	@ (80023f0 <main+0x1590>)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	00c9      	lsls	r1, r1, #3
 800213e:	f44f 7467 	mov.w	r4, #924	@ 0x39c
 8002142:	fb04 f303 	mul.w	r3, r4, r3
 8002146:	440b      	add	r3, r1
 8002148:	4403      	add	r3, r0
 800214a:	f203 2369 	addw	r3, r3, #617	@ 0x269
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	021b      	lsls	r3, r3, #8
	 	 	 	 	 								((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][6] << 16) |
 8002152:	4313      	orrs	r3, r2
													((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][4]);
 8002154:	49a6      	ldr	r1, [pc, #664]	@ (80023f0 <main+0x1590>)
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 800215c:	fb00 f202 	mul.w	r2, r0, r2
 8002160:	440a      	add	r2, r1
 8002162:	f502 7239 	add.w	r2, r2, #740	@ 0x2e4
 8002166:	7812      	ldrb	r2, [r2, #0]
 8002168:	4611      	mov	r1, r2
 800216a:	48a1      	ldr	r0, [pc, #644]	@ (80023f0 <main+0x1590>)
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	00c9      	lsls	r1, r1, #3
 8002170:	f44f 7467 	mov.w	r4, #924	@ 0x39c
 8002174:	fb04 f202 	mul.w	r2, r4, r2
 8002178:	440a      	add	r2, r1
 800217a:	4402      	add	r2, r0
 800217c:	f502 721a 	add.w	r2, r2, #616	@ 0x268
 8002180:	7812      	ldrb	r2, [r2, #0]
													((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][5] << 8)  |
 8002182:	431a      	orrs	r2, r3
		  			Node[k].Digital_inputs=((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][7] << 24) |
 8002184:	499a      	ldr	r1, [pc, #616]	@ (80023f0 <main+0x1590>)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 800218c:	fb00 f303 	mul.w	r3, r0, r3
 8002190:	440b      	add	r3, r1
 8002192:	f503 7346 	add.w	r3, r3, #792	@ 0x318
 8002196:	601a      	str	r2, [r3, #0]
		  			Node[k].Actual_Current=((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][3] << 24) |
 8002198:	4a95      	ldr	r2, [pc, #596]	@ (80023f0 <main+0x1590>)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	4990      	ldr	r1, [pc, #576]	@ (80023f0 <main+0x1590>)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	00d2      	lsls	r2, r2, #3
 80021b4:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 80021b8:	fb00 f303 	mul.w	r3, r0, r3
 80021bc:	4413      	add	r3, r2
 80021be:	440b      	add	r3, r1
 80021c0:	f203 2367 	addw	r3, r3, #615	@ 0x267
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	061a      	lsls	r2, r3, #24
		  			     	 	 	 	 	 					((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][2] << 16) |
 80021c8:	4989      	ldr	r1, [pc, #548]	@ (80023f0 <main+0x1590>)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 80021d0:	fb00 f303 	mul.w	r3, r0, r3
 80021d4:	440b      	add	r3, r1
 80021d6:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	4619      	mov	r1, r3
 80021de:	4884      	ldr	r0, [pc, #528]	@ (80023f0 <main+0x1590>)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	00c9      	lsls	r1, r1, #3
 80021e4:	f44f 7467 	mov.w	r4, #924	@ 0x39c
 80021e8:	fb04 f303 	mul.w	r3, r4, r3
 80021ec:	440b      	add	r3, r1
 80021ee:	4403      	add	r3, r0
 80021f0:	f203 2366 	addw	r3, r3, #614	@ 0x266
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	041b      	lsls	r3, r3, #16
		  			Node[k].Actual_Current=((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][3] << 24) |
 80021f8:	431a      	orrs	r2, r3
		  														((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][1] << 8)  |
 80021fa:	497d      	ldr	r1, [pc, #500]	@ (80023f0 <main+0x1590>)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8002202:	fb00 f303 	mul.w	r3, r0, r3
 8002206:	440b      	add	r3, r1
 8002208:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	4619      	mov	r1, r3
 8002210:	4877      	ldr	r0, [pc, #476]	@ (80023f0 <main+0x1590>)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	00c9      	lsls	r1, r1, #3
 8002216:	f44f 7467 	mov.w	r4, #924	@ 0x39c
 800221a:	fb04 f303 	mul.w	r3, r4, r3
 800221e:	440b      	add	r3, r1
 8002220:	4403      	add	r3, r0
 8002222:	f203 2365 	addw	r3, r3, #613	@ 0x265
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	021b      	lsls	r3, r3, #8
		  			     	 	 	 	 	 					((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][2] << 16) |
 800222a:	4313      	orrs	r3, r2
		  														((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][0]);
 800222c:	4970      	ldr	r1, [pc, #448]	@ (80023f0 <main+0x1590>)
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8002234:	fb00 f202 	mul.w	r2, r0, r2
 8002238:	440a      	add	r2, r1
 800223a:	f502 7239 	add.w	r2, r2, #740	@ 0x2e4
 800223e:	7812      	ldrb	r2, [r2, #0]
 8002240:	486b      	ldr	r0, [pc, #428]	@ (80023f0 <main+0x1590>)
 8002242:	f102 014c 	add.w	r1, r2, #76	@ 0x4c
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	00c9      	lsls	r1, r1, #3
 800224a:	f44f 7467 	mov.w	r4, #924	@ 0x39c
 800224e:	fb04 f202 	mul.w	r2, r4, r2
 8002252:	440a      	add	r2, r1
 8002254:	4402      	add	r2, r0
 8002256:	3204      	adds	r2, #4
 8002258:	7812      	ldrb	r2, [r2, #0]
		  														((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][1] << 8)  |
 800225a:	431a      	orrs	r2, r3
		  			Node[k].Actual_Current=((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][3] << 24) |
 800225c:	4964      	ldr	r1, [pc, #400]	@ (80023f0 <main+0x1590>)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8002264:	fb00 f303 	mul.w	r3, r0, r3
 8002268:	440b      	add	r3, r1
 800226a:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800226e:	601a      	str	r2, [r3, #0]
		  			Node[k].TxBuffer_Priority_acii[10]=Node[k].RxData_node[Node[k].buffer_shift_refister][3];//verificare sempre il MSB e il LSb
 8002270:	4a5f      	ldr	r2, [pc, #380]	@ (80023f0 <main+0x1590>)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	4413      	add	r3, r2
 800227e:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	495a      	ldr	r1, [pc, #360]	@ (80023f0 <main+0x1590>)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	00d2      	lsls	r2, r2, #3
 800228c:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8002290:	fb00 f303 	mul.w	r3, r0, r3
 8002294:	4413      	add	r3, r2
 8002296:	440b      	add	r3, r1
 8002298:	f203 2367 	addw	r3, r3, #615	@ 0x267
 800229c:	7818      	ldrb	r0, [r3, #0]
 800229e:	4a54      	ldr	r2, [pc, #336]	@ (80023f0 <main+0x1590>)
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	f203 3386 	addw	r3, r3, #902	@ 0x386
 80022b0:	4602      	mov	r2, r0
 80022b2:	701a      	strb	r2, [r3, #0]
		  			Node[k].TxBuffer_Priority_acii[11]=Node[k].RxData_node[Node[k].buffer_shift_refister][2];
 80022b4:	4a4e      	ldr	r2, [pc, #312]	@ (80023f0 <main+0x1590>)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80022bc:	fb01 f303 	mul.w	r3, r1, r3
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	4949      	ldr	r1, [pc, #292]	@ (80023f0 <main+0x1590>)
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	00d2      	lsls	r2, r2, #3
 80022d0:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 80022d4:	fb00 f303 	mul.w	r3, r0, r3
 80022d8:	4413      	add	r3, r2
 80022da:	440b      	add	r3, r1
 80022dc:	f203 2366 	addw	r3, r3, #614	@ 0x266
 80022e0:	7818      	ldrb	r0, [r3, #0]
 80022e2:	4a43      	ldr	r2, [pc, #268]	@ (80023f0 <main+0x1590>)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	f203 3387 	addw	r3, r3, #903	@ 0x387
 80022f4:	4602      	mov	r2, r0
 80022f6:	701a      	strb	r2, [r3, #0]
		  			Node[k].TxBuffer_Priority_acii[12]=Node[k].RxData_node[Node[k].buffer_shift_refister][1];
 80022f8:	4a3d      	ldr	r2, [pc, #244]	@ (80023f0 <main+0x1590>)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	4938      	ldr	r1, [pc, #224]	@ (80023f0 <main+0x1590>)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	00d2      	lsls	r2, r2, #3
 8002314:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8002318:	fb00 f303 	mul.w	r3, r0, r3
 800231c:	4413      	add	r3, r2
 800231e:	440b      	add	r3, r1
 8002320:	f203 2365 	addw	r3, r3, #613	@ 0x265
 8002324:	7818      	ldrb	r0, [r3, #0]
 8002326:	4a32      	ldr	r2, [pc, #200]	@ (80023f0 <main+0x1590>)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	4413      	add	r3, r2
 8002334:	f503 7362 	add.w	r3, r3, #904	@ 0x388
 8002338:	4602      	mov	r2, r0
 800233a:	701a      	strb	r2, [r3, #0]
		  			Node[k].TxBuffer_Priority_acii[13]=Node[k].RxData_node[Node[k].buffer_shift_refister][0];
 800233c:	4a2c      	ldr	r2, [pc, #176]	@ (80023f0 <main+0x1590>)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	4413      	add	r3, r2
 800234a:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4927      	ldr	r1, [pc, #156]	@ (80023f0 <main+0x1590>)
 8002352:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	00d2      	lsls	r2, r2, #3
 800235a:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 800235e:	fb00 f303 	mul.w	r3, r0, r3
 8002362:	4413      	add	r3, r2
 8002364:	440b      	add	r3, r1
 8002366:	3304      	adds	r3, #4
 8002368:	7818      	ldrb	r0, [r3, #0]
 800236a:	4a21      	ldr	r2, [pc, #132]	@ (80023f0 <main+0x1590>)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002372:	fb01 f303 	mul.w	r3, r1, r3
 8002376:	4413      	add	r3, r2
 8002378:	f203 3389 	addw	r3, r3, #905	@ 0x389
 800237c:	4602      	mov	r2, r0
 800237e:	701a      	strb	r2, [r3, #0]
		  			Node[k].TxBuffer_Priority_acii[14]=Node[k].RxData_node[Node[k].buffer_shift_refister][7];//verificare sempre il MSB e il LSb
 8002380:	4a1b      	ldr	r2, [pc, #108]	@ (80023f0 <main+0x1590>)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	4916      	ldr	r1, [pc, #88]	@ (80023f0 <main+0x1590>)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	00d2      	lsls	r2, r2, #3
 800239c:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 80023a0:	fb00 f303 	mul.w	r3, r0, r3
 80023a4:	4413      	add	r3, r2
 80023a6:	440b      	add	r3, r1
 80023a8:	f203 236b 	addw	r3, r3, #619	@ 0x26b
 80023ac:	7818      	ldrb	r0, [r3, #0]
 80023ae:	4a10      	ldr	r2, [pc, #64]	@ (80023f0 <main+0x1590>)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80023b6:	fb01 f303 	mul.w	r3, r1, r3
 80023ba:	4413      	add	r3, r2
 80023bc:	f203 338a 	addw	r3, r3, #906	@ 0x38a
 80023c0:	4602      	mov	r2, r0
 80023c2:	701a      	strb	r2, [r3, #0]
		  			Node[k].TxBuffer_Priority_acii[15]=Node[k].RxData_node[Node[k].buffer_shift_refister][6];
 80023c4:	4a0a      	ldr	r2, [pc, #40]	@ (80023f0 <main+0x1590>)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	4905      	ldr	r1, [pc, #20]	@ (80023f0 <main+0x1590>)
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	00d2      	lsls	r2, r2, #3
 80023e0:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 80023e4:	fb00 f303 	mul.w	r3, r0, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	440b      	add	r3, r1
 80023ec:	e002      	b.n	80023f4 <main+0x1594>
 80023ee:	bf00      	nop
 80023f0:	20000190 	.word	0x20000190
 80023f4:	f203 236a 	addw	r3, r3, #618	@ 0x26a
 80023f8:	7818      	ldrb	r0, [r3, #0]
 80023fa:	4a28      	ldr	r2, [pc, #160]	@ (800249c <main+0x163c>)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	f203 338b 	addw	r3, r3, #907	@ 0x38b
 800240c:	4602      	mov	r2, r0
 800240e:	701a      	strb	r2, [r3, #0]
		  			Node[k].TxBuffer_Priority_acii[16]=Node[k].RxData_node[Node[k].buffer_shift_refister][5];
 8002410:	4a22      	ldr	r2, [pc, #136]	@ (800249c <main+0x163c>)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	4413      	add	r3, r2
 800241e:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	491d      	ldr	r1, [pc, #116]	@ (800249c <main+0x163c>)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	00d2      	lsls	r2, r2, #3
 800242c:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8002430:	fb00 f303 	mul.w	r3, r0, r3
 8002434:	4413      	add	r3, r2
 8002436:	440b      	add	r3, r1
 8002438:	f203 2369 	addw	r3, r3, #617	@ 0x269
 800243c:	7818      	ldrb	r0, [r3, #0]
 800243e:	4a17      	ldr	r2, [pc, #92]	@ (800249c <main+0x163c>)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	4413      	add	r3, r2
 800244c:	f503 7363 	add.w	r3, r3, #908	@ 0x38c
 8002450:	4602      	mov	r2, r0
 8002452:	701a      	strb	r2, [r3, #0]
		  			Node[k].TxBuffer_Priority_acii[17]=Node[k].RxData_node[Node[k].buffer_shift_refister][4];
 8002454:	4a11      	ldr	r2, [pc, #68]	@ (800249c <main+0x163c>)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800245c:	fb01 f303 	mul.w	r3, r1, r3
 8002460:	4413      	add	r3, r2
 8002462:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	490c      	ldr	r1, [pc, #48]	@ (800249c <main+0x163c>)
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	00d2      	lsls	r2, r2, #3
 8002470:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8002474:	fb00 f303 	mul.w	r3, r0, r3
 8002478:	4413      	add	r3, r2
 800247a:	440b      	add	r3, r1
 800247c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002480:	7818      	ldrb	r0, [r3, #0]
 8002482:	4a06      	ldr	r2, [pc, #24]	@ (800249c <main+0x163c>)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800248a:	fb01 f303 	mul.w	r3, r1, r3
 800248e:	4413      	add	r3, r2
 8002490:	f203 338d 	addw	r3, r3, #909	@ 0x38d
 8002494:	4602      	mov	r2, r0
 8002496:	701a      	strb	r2, [r3, #0]
		  			break;
 8002498:	e1ef      	b.n	800287a <main+0x1a1a>
 800249a:	bf00      	nop
 800249c:	20000190 	.word	0x20000190

		  		case 0x480://Heartbeat nmt state
		  			Node[k].Memorized_position_positive=((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][3] << 24) |
 80024a0:	4acb      	ldr	r2, [pc, #812]	@ (80027d0 <main+0x1970>)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80024a8:	fb01 f303 	mul.w	r3, r1, r3
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	49c6      	ldr	r1, [pc, #792]	@ (80027d0 <main+0x1970>)
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	00d2      	lsls	r2, r2, #3
 80024bc:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 80024c0:	fb00 f303 	mul.w	r3, r0, r3
 80024c4:	4413      	add	r3, r2
 80024c6:	440b      	add	r3, r1
 80024c8:	f203 2367 	addw	r3, r3, #615	@ 0x267
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	061a      	lsls	r2, r3, #24
	 	 	 	 	 									((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][2] << 16) |
 80024d0:	49bf      	ldr	r1, [pc, #764]	@ (80027d0 <main+0x1970>)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 80024d8:	fb00 f303 	mul.w	r3, r0, r3
 80024dc:	440b      	add	r3, r1
 80024de:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	4619      	mov	r1, r3
 80024e6:	48ba      	ldr	r0, [pc, #744]	@ (80027d0 <main+0x1970>)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	00c9      	lsls	r1, r1, #3
 80024ec:	f44f 7467 	mov.w	r4, #924	@ 0x39c
 80024f0:	fb04 f303 	mul.w	r3, r4, r3
 80024f4:	440b      	add	r3, r1
 80024f6:	4403      	add	r3, r0
 80024f8:	f203 2366 	addw	r3, r3, #614	@ 0x266
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	041b      	lsls	r3, r3, #16
		  			Node[k].Memorized_position_positive=((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][3] << 24) |
 8002500:	431a      	orrs	r2, r3
														((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][1] << 8)  |
 8002502:	49b3      	ldr	r1, [pc, #716]	@ (80027d0 <main+0x1970>)
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 800250a:	fb00 f303 	mul.w	r3, r0, r3
 800250e:	440b      	add	r3, r1
 8002510:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	4619      	mov	r1, r3
 8002518:	48ad      	ldr	r0, [pc, #692]	@ (80027d0 <main+0x1970>)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	00c9      	lsls	r1, r1, #3
 800251e:	f44f 7467 	mov.w	r4, #924	@ 0x39c
 8002522:	fb04 f303 	mul.w	r3, r4, r3
 8002526:	440b      	add	r3, r1
 8002528:	4403      	add	r3, r0
 800252a:	f203 2365 	addw	r3, r3, #613	@ 0x265
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	021b      	lsls	r3, r3, #8
	 	 	 	 	 									((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][2] << 16) |
 8002532:	4313      	orrs	r3, r2
														((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][0]);
 8002534:	49a6      	ldr	r1, [pc, #664]	@ (80027d0 <main+0x1970>)
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 800253c:	fb00 f202 	mul.w	r2, r0, r2
 8002540:	440a      	add	r2, r1
 8002542:	f502 7239 	add.w	r2, r2, #740	@ 0x2e4
 8002546:	7812      	ldrb	r2, [r2, #0]
 8002548:	48a1      	ldr	r0, [pc, #644]	@ (80027d0 <main+0x1970>)
 800254a:	f102 014c 	add.w	r1, r2, #76	@ 0x4c
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	00c9      	lsls	r1, r1, #3
 8002552:	f44f 7467 	mov.w	r4, #924	@ 0x39c
 8002556:	fb04 f202 	mul.w	r2, r4, r2
 800255a:	440a      	add	r2, r1
 800255c:	4402      	add	r2, r0
 800255e:	3204      	adds	r2, #4
 8002560:	7812      	ldrb	r2, [r2, #0]
														((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][1] << 8)  |
 8002562:	431a      	orrs	r2, r3
		  			Node[k].Memorized_position_positive=((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][3] << 24) |
 8002564:	499a      	ldr	r1, [pc, #616]	@ (80027d0 <main+0x1970>)
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 800256c:	fb00 f303 	mul.w	r3, r0, r3
 8002570:	440b      	add	r3, r1
 8002572:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8002576:	601a      	str	r2, [r3, #0]

		  			Node[k].Memorized_position_negative=((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][7] << 24) |
 8002578:	4a95      	ldr	r2, [pc, #596]	@ (80027d0 <main+0x1970>)
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	4413      	add	r3, r2
 8002586:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	4990      	ldr	r1, [pc, #576]	@ (80027d0 <main+0x1970>)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	00d2      	lsls	r2, r2, #3
 8002594:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8002598:	fb00 f303 	mul.w	r3, r0, r3
 800259c:	4413      	add	r3, r2
 800259e:	440b      	add	r3, r1
 80025a0:	f203 236b 	addw	r3, r3, #619	@ 0x26b
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	061a      	lsls	r2, r3, #24
		                     							((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][6] << 16) |
 80025a8:	4989      	ldr	r1, [pc, #548]	@ (80027d0 <main+0x1970>)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 80025b0:	fb00 f303 	mul.w	r3, r0, r3
 80025b4:	440b      	add	r3, r1
 80025b6:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	4619      	mov	r1, r3
 80025be:	4884      	ldr	r0, [pc, #528]	@ (80027d0 <main+0x1970>)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	00c9      	lsls	r1, r1, #3
 80025c4:	f44f 7467 	mov.w	r4, #924	@ 0x39c
 80025c8:	fb04 f303 	mul.w	r3, r4, r3
 80025cc:	440b      	add	r3, r1
 80025ce:	4403      	add	r3, r0
 80025d0:	f203 236a 	addw	r3, r3, #618	@ 0x26a
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	041b      	lsls	r3, r3, #16
		  			Node[k].Memorized_position_negative=((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][7] << 24) |
 80025d8:	431a      	orrs	r2, r3
														((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][5] << 8)  |
 80025da:	497d      	ldr	r1, [pc, #500]	@ (80027d0 <main+0x1970>)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 80025e2:	fb00 f303 	mul.w	r3, r0, r3
 80025e6:	440b      	add	r3, r1
 80025e8:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	4619      	mov	r1, r3
 80025f0:	4877      	ldr	r0, [pc, #476]	@ (80027d0 <main+0x1970>)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	00c9      	lsls	r1, r1, #3
 80025f6:	f44f 7467 	mov.w	r4, #924	@ 0x39c
 80025fa:	fb04 f303 	mul.w	r3, r4, r3
 80025fe:	440b      	add	r3, r1
 8002600:	4403      	add	r3, r0
 8002602:	f203 2369 	addw	r3, r3, #617	@ 0x269
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	021b      	lsls	r3, r3, #8
		                     							((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][6] << 16) |
 800260a:	4313      	orrs	r3, r2
														((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][4]);
 800260c:	4970      	ldr	r1, [pc, #448]	@ (80027d0 <main+0x1970>)
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8002614:	fb00 f202 	mul.w	r2, r0, r2
 8002618:	440a      	add	r2, r1
 800261a:	f502 7239 	add.w	r2, r2, #740	@ 0x2e4
 800261e:	7812      	ldrb	r2, [r2, #0]
 8002620:	4611      	mov	r1, r2
 8002622:	486b      	ldr	r0, [pc, #428]	@ (80027d0 <main+0x1970>)
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	00c9      	lsls	r1, r1, #3
 8002628:	f44f 7467 	mov.w	r4, #924	@ 0x39c
 800262c:	fb04 f202 	mul.w	r2, r4, r2
 8002630:	440a      	add	r2, r1
 8002632:	4402      	add	r2, r0
 8002634:	f502 721a 	add.w	r2, r2, #616	@ 0x268
 8002638:	7812      	ldrb	r2, [r2, #0]
														((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][5] << 8)  |
 800263a:	431a      	orrs	r2, r3
		  			Node[k].Memorized_position_negative=((uint32_t)Node[k].RxData_node[Node[k].buffer_shift_refister][7] << 24) |
 800263c:	4964      	ldr	r1, [pc, #400]	@ (80027d0 <main+0x1970>)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8002644:	fb00 f303 	mul.w	r3, r0, r3
 8002648:	440b      	add	r3, r1
 800264a:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 800264e:	601a      	str	r2, [r3, #0]


		  			Node[k].TxBuffer_acii[10]=Node[k].RxData_node[Node[k].buffer_shift_refister][3];//verificare sempre il MSB e il LSb
 8002650:	4a5f      	ldr	r2, [pc, #380]	@ (80027d0 <main+0x1970>)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	4413      	add	r3, r2
 800265e:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	495a      	ldr	r1, [pc, #360]	@ (80027d0 <main+0x1970>)
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	00d2      	lsls	r2, r2, #3
 800266c:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8002670:	fb00 f303 	mul.w	r3, r0, r3
 8002674:	4413      	add	r3, r2
 8002676:	440b      	add	r3, r1
 8002678:	f203 2367 	addw	r3, r3, #615	@ 0x267
 800267c:	7818      	ldrb	r0, [r3, #0]
 800267e:	4a54      	ldr	r2, [pc, #336]	@ (80027d0 <main+0x1970>)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	4413      	add	r3, r2
 800268c:	f203 336e 	addw	r3, r3, #878	@ 0x36e
 8002690:	4602      	mov	r2, r0
 8002692:	701a      	strb	r2, [r3, #0]
		  					  			Node[k].TxBuffer_acii[11]=Node[k].RxData_node[Node[k].buffer_shift_refister][2];
 8002694:	4a4e      	ldr	r2, [pc, #312]	@ (80027d0 <main+0x1970>)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	4949      	ldr	r1, [pc, #292]	@ (80027d0 <main+0x1970>)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	00d2      	lsls	r2, r2, #3
 80026b0:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 80026b4:	fb00 f303 	mul.w	r3, r0, r3
 80026b8:	4413      	add	r3, r2
 80026ba:	440b      	add	r3, r1
 80026bc:	f203 2366 	addw	r3, r3, #614	@ 0x266
 80026c0:	7818      	ldrb	r0, [r3, #0]
 80026c2:	4a43      	ldr	r2, [pc, #268]	@ (80027d0 <main+0x1970>)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	f203 336f 	addw	r3, r3, #879	@ 0x36f
 80026d4:	4602      	mov	r2, r0
 80026d6:	701a      	strb	r2, [r3, #0]
		  					  			Node[k].TxBuffer_acii[12]=Node[k].RxData_node[Node[k].buffer_shift_refister][1];
 80026d8:	4a3d      	ldr	r2, [pc, #244]	@ (80027d0 <main+0x1970>)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	4938      	ldr	r1, [pc, #224]	@ (80027d0 <main+0x1970>)
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	00d2      	lsls	r2, r2, #3
 80026f4:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 80026f8:	fb00 f303 	mul.w	r3, r0, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	440b      	add	r3, r1
 8002700:	f203 2365 	addw	r3, r3, #613	@ 0x265
 8002704:	7818      	ldrb	r0, [r3, #0]
 8002706:	4a32      	ldr	r2, [pc, #200]	@ (80027d0 <main+0x1970>)
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800270e:	fb01 f303 	mul.w	r3, r1, r3
 8002712:	4413      	add	r3, r2
 8002714:	f503 735c 	add.w	r3, r3, #880	@ 0x370
 8002718:	4602      	mov	r2, r0
 800271a:	701a      	strb	r2, [r3, #0]
		  					  			Node[k].TxBuffer_acii[13]=Node[k].RxData_node[Node[k].buffer_shift_refister][0];
 800271c:	4a2c      	ldr	r2, [pc, #176]	@ (80027d0 <main+0x1970>)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	4413      	add	r3, r2
 800272a:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	4927      	ldr	r1, [pc, #156]	@ (80027d0 <main+0x1970>)
 8002732:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	00d2      	lsls	r2, r2, #3
 800273a:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 800273e:	fb00 f303 	mul.w	r3, r0, r3
 8002742:	4413      	add	r3, r2
 8002744:	440b      	add	r3, r1
 8002746:	3304      	adds	r3, #4
 8002748:	7818      	ldrb	r0, [r3, #0]
 800274a:	4a21      	ldr	r2, [pc, #132]	@ (80027d0 <main+0x1970>)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	4413      	add	r3, r2
 8002758:	f203 3371 	addw	r3, r3, #881	@ 0x371
 800275c:	4602      	mov	r2, r0
 800275e:	701a      	strb	r2, [r3, #0]
		  			Node[k].TxBuffer_acii[14]=Node[k].RxData_node[Node[k].buffer_shift_refister][7];//verificare sempre il MSB e il LSb
 8002760:	4a1b      	ldr	r2, [pc, #108]	@ (80027d0 <main+0x1970>)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	4413      	add	r3, r2
 800276e:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	461a      	mov	r2, r3
 8002776:	4916      	ldr	r1, [pc, #88]	@ (80027d0 <main+0x1970>)
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	00d2      	lsls	r2, r2, #3
 800277c:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8002780:	fb00 f303 	mul.w	r3, r0, r3
 8002784:	4413      	add	r3, r2
 8002786:	440b      	add	r3, r1
 8002788:	f203 236b 	addw	r3, r3, #619	@ 0x26b
 800278c:	7818      	ldrb	r0, [r3, #0]
 800278e:	4a10      	ldr	r2, [pc, #64]	@ (80027d0 <main+0x1970>)
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002796:	fb01 f303 	mul.w	r3, r1, r3
 800279a:	4413      	add	r3, r2
 800279c:	f203 3372 	addw	r3, r3, #882	@ 0x372
 80027a0:	4602      	mov	r2, r0
 80027a2:	701a      	strb	r2, [r3, #0]
		  					  			Node[k].TxBuffer_acii[15]=Node[k].RxData_node[Node[k].buffer_shift_refister][6];
 80027a4:	4a0a      	ldr	r2, [pc, #40]	@ (80027d0 <main+0x1970>)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	4905      	ldr	r1, [pc, #20]	@ (80027d0 <main+0x1970>)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	00d2      	lsls	r2, r2, #3
 80027c0:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 80027c4:	fb00 f303 	mul.w	r3, r0, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	440b      	add	r3, r1
 80027cc:	e002      	b.n	80027d4 <main+0x1974>
 80027ce:	bf00      	nop
 80027d0:	20000190 	.word	0x20000190
 80027d4:	f203 236a 	addw	r3, r3, #618	@ 0x26a
 80027d8:	7818      	ldrb	r0, [r3, #0]
 80027da:	4a59      	ldr	r2, [pc, #356]	@ (8002940 <main+0x1ae0>)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80027e2:	fb01 f303 	mul.w	r3, r1, r3
 80027e6:	4413      	add	r3, r2
 80027e8:	f203 3373 	addw	r3, r3, #883	@ 0x373
 80027ec:	4602      	mov	r2, r0
 80027ee:	701a      	strb	r2, [r3, #0]
		  					  			Node[k].TxBuffer_acii[16]=Node[k].RxData_node[Node[k].buffer_shift_refister][5];
 80027f0:	4a53      	ldr	r2, [pc, #332]	@ (8002940 <main+0x1ae0>)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	494e      	ldr	r1, [pc, #312]	@ (8002940 <main+0x1ae0>)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	00d2      	lsls	r2, r2, #3
 800280c:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8002810:	fb00 f303 	mul.w	r3, r0, r3
 8002814:	4413      	add	r3, r2
 8002816:	440b      	add	r3, r1
 8002818:	f203 2369 	addw	r3, r3, #617	@ 0x269
 800281c:	7818      	ldrb	r0, [r3, #0]
 800281e:	4a48      	ldr	r2, [pc, #288]	@ (8002940 <main+0x1ae0>)
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	4413      	add	r3, r2
 800282c:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 8002830:	4602      	mov	r2, r0
 8002832:	701a      	strb	r2, [r3, #0]
		  					  			Node[k].TxBuffer_acii[17]=Node[k].RxData_node[Node[k].buffer_shift_refister][4];
 8002834:	4a42      	ldr	r2, [pc, #264]	@ (8002940 <main+0x1ae0>)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	493d      	ldr	r1, [pc, #244]	@ (8002940 <main+0x1ae0>)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	00d2      	lsls	r2, r2, #3
 8002850:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8002854:	fb00 f303 	mul.w	r3, r0, r3
 8002858:	4413      	add	r3, r2
 800285a:	440b      	add	r3, r1
 800285c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002860:	7818      	ldrb	r0, [r3, #0]
 8002862:	4a37      	ldr	r2, [pc, #220]	@ (8002940 <main+0x1ae0>)
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800286a:	fb01 f303 	mul.w	r3, r1, r3
 800286e:	4413      	add	r3, r2
 8002870:	f203 3375 	addw	r3, r3, #885	@ 0x375
 8002874:	4602      	mov	r2, r0
 8002876:	701a      	strb	r2, [r3, #0]
		  			break;
 8002878:	bf00      	nop

		  	}

		  Node[k].buffer_shift_refister_main++;
 800287a:	4a31      	ldr	r2, [pc, #196]	@ (8002940 <main+0x1ae0>)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002882:	fb01 f303 	mul.w	r3, r1, r3
 8002886:	4413      	add	r3, r2
 8002888:	f203 23e5 	addw	r3, r3, #741	@ 0x2e5
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	3301      	adds	r3, #1
 8002890:	b2d8      	uxtb	r0, r3
 8002892:	4a2b      	ldr	r2, [pc, #172]	@ (8002940 <main+0x1ae0>)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	f203 23e5 	addw	r3, r3, #741	@ 0x2e5
 80028a4:	4602      	mov	r2, r0
 80028a6:	701a      	strb	r2, [r3, #0]
		  if(Node[k].buffer_shift_refister_main>=CAN_RX_BUFFER_SIZE) Node[k].buffer_shift_refister_main=0;
 80028a8:	4a25      	ldr	r2, [pc, #148]	@ (8002940 <main+0x1ae0>)
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	f203 23e5 	addw	r3, r3, #741	@ 0x2e5
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b0f      	cmp	r3, #15
 80028be:	f240 8098 	bls.w	80029f2 <main+0x1b92>
 80028c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002940 <main+0x1ae0>)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	f203 23e5 	addw	r3, r3, #741	@ 0x2e5
 80028d4:	2200      	movs	r2, #0
 80028d6:	701a      	strb	r2, [r3, #0]
 80028d8:	e08b      	b.n	80029f2 <main+0x1b92>

	  }else
	  //e, sempre se è uguale al valore massimo allora riporta a zero....attento a nion mangiarti il valore 0


		  if (huart2.gState == HAL_UART_STATE_READY && Node[k].timer_fired==1 &&  Node[k].pending_uart_msg==1 && HAL_GetTick() - Node[k].last_timer_tick >= 12) {//da aggiustare bene amodo
 80028da:	4b1a      	ldr	r3, [pc, #104]	@ (8002944 <main+0x1ae4>)
 80028dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b20      	cmp	r3, #32
 80028e4:	f040 8085 	bne.w	80029f2 <main+0x1b92>
 80028e8:	4a15      	ldr	r2, [pc, #84]	@ (8002940 <main+0x1ae0>)
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	f203 3395 	addw	r3, r3, #917	@ 0x395
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d078      	beq.n	80029f2 <main+0x1b92>
 8002900:	4a0f      	ldr	r2, [pc, #60]	@ (8002940 <main+0x1ae0>)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	f503 7365 	add.w	r3, r3, #916	@ 0x394
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d06c      	beq.n	80029f2 <main+0x1b92>
 8002918:	f003 fe36 	bl	8006588 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	4908      	ldr	r1, [pc, #32]	@ (8002940 <main+0x1ae0>)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8002926:	fb00 f303 	mul.w	r3, r0, r3
 800292a:	440b      	add	r3, r1
 800292c:	f503 7366 	add.w	r3, r3, #920	@ 0x398
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b0b      	cmp	r3, #11
 8002936:	d95c      	bls.n	80029f2 <main+0x1b92>
		  	  		  						    for(int a=0;a<=23;a++){
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	e022      	b.n	8002984 <main+0x1b24>
 800293e:	bf00      	nop
 8002940:	20000190 	.word	0x20000190
 8002944:	200000e8 	.word	0x200000e8
		  	  				if(Node[k].TxBuffer_acii[a]==0) Node[k].TxBuffer_acii[a]='#';
 8002948:	4aca      	ldr	r2, [pc, #808]	@ (8002c74 <main+0x1e14>)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	441a      	add	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4413      	add	r3, r2
 800295a:	f503 7359 	add.w	r3, r3, #868	@ 0x364
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10c      	bne.n	800297e <main+0x1b1e>
 8002964:	4ac3      	ldr	r2, [pc, #780]	@ (8002c74 <main+0x1e14>)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	441a      	add	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4413      	add	r3, r2
 8002976:	f503 7359 	add.w	r3, r3, #868	@ 0x364
 800297a:	2223      	movs	r2, #35	@ 0x23
 800297c:	701a      	strb	r2, [r3, #0]
		  	  		  						    for(int a=0;a<=23;a++){
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	3301      	adds	r3, #1
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2b17      	cmp	r3, #23
 8002988:	ddde      	ble.n	8002948 <main+0x1ae8>
		  	  			}
		  		  	  	HAL_UART_Transmit_IT(&huart2, (uint8_t*)Node[k].TxBuffer_acii,  strlen(Node[k].TxBuffer_acii));
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 8002990:	fb02 f303 	mul.w	r3, r2, r3
 8002994:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002998:	4ab6      	ldr	r2, [pc, #728]	@ (8002c74 <main+0x1e14>)
 800299a:	4413      	add	r3, r2
 800299c:	1d1c      	adds	r4, r3, #4
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 80029a4:	fb02 f303 	mul.w	r3, r2, r3
 80029a8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80029ac:	4ab1      	ldr	r2, [pc, #708]	@ (8002c74 <main+0x1e14>)
 80029ae:	4413      	add	r3, r2
 80029b0:	3304      	adds	r3, #4
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fd fc28 	bl	8000208 <strlen>
 80029b8:	4603      	mov	r3, r0
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	4621      	mov	r1, r4
 80029c0:	48ad      	ldr	r0, [pc, #692]	@ (8002c78 <main+0x1e18>)
 80029c2:	f006 fa9b 	bl	8008efc <HAL_UART_Transmit_IT>
		  	  		  	Node[k].timer_fired=0;
 80029c6:	4aab      	ldr	r2, [pc, #684]	@ (8002c74 <main+0x1e14>)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	f203 3395 	addw	r3, r3, #917	@ 0x395
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
		  	  		  						    Node[k].pending_uart_msg=0;
 80029dc:	4aa5      	ldr	r2, [pc, #660]	@ (8002c74 <main+0x1e14>)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 7365 	add.w	r3, r3, #916	@ 0x394
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
		  	  		  						}




		if(Node[k].Shutdown==1 && Node[k].NMT_slave_state==5){
 80029f2:	4aa0      	ldr	r2, [pc, #640]	@ (8002c74 <main+0x1e14>)
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d04e      	beq.n	8002aa8 <main+0x1c48>
 8002a0a:	4a9a      	ldr	r2, [pc, #616]	@ (8002c74 <main+0x1e14>)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8002a1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a20:	2b05      	cmp	r3, #5
 8002a22:	d141      	bne.n	8002aa8 <main+0x1c48>
			Node[k].ControlWord_bool[0]=0;
 8002a24:	4a93      	ldr	r2, [pc, #588]	@ (8002c74 <main+0x1e14>)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8002a36:	2200      	movs	r2, #0
 8002a38:	701a      	strb	r2, [r3, #0]
			Node[k].ControlWord_bool[3]=0;
 8002a3a:	4a8e      	ldr	r2, [pc, #568]	@ (8002c74 <main+0x1e14>)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	f203 333f 	addw	r3, r3, #831	@ 0x33f
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
			Node[k].ControlWord_bool[2]=1;
 8002a50:	4a88      	ldr	r2, [pc, #544]	@ (8002c74 <main+0x1e14>)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002a58:	fb01 f303 	mul.w	r3, r1, r3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f203 333e 	addw	r3, r3, #830	@ 0x33e
 8002a62:	2201      	movs	r2, #1
 8002a64:	701a      	strb	r2, [r3, #0]
			Node[k].ControlWord_bool[1]=1;
 8002a66:	4a83      	ldr	r2, [pc, #524]	@ (8002c74 <main+0x1e14>)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	f203 333d 	addw	r3, r3, #829	@ 0x33d
 8002a78:	2201      	movs	r2, #1
 8002a7a:	701a      	strb	r2, [r3, #0]
			Node[k].Transition_Drive_requested=1;
 8002a7c:	4a7d      	ldr	r2, [pc, #500]	@ (8002c74 <main+0x1e14>)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	f203 332b 	addw	r3, r3, #811	@ 0x32b
 8002a8e:	2201      	movs	r2, #1
 8002a90:	701a      	strb	r2, [r3, #0]
			Node[k].Shutdown=0;
 8002a92:	4a78      	ldr	r2, [pc, #480]	@ (8002c74 <main+0x1e14>)
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
		}//per eitare che uno alzi il boleano per sbaglio...metto un controllo non qui ma direttamente sulla callback, è piu codice ma rende piu leggero il main
		if(Node[k].Switch_On==1 && Node[k].NMT_slave_state==5){
 8002aa8:	4a72      	ldr	r2, [pc, #456]	@ (8002c74 <main+0x1e14>)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f203 332d 	addw	r3, r3, #813	@ 0x32d
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d04e      	beq.n	8002b5e <main+0x1cfe>
 8002ac0:	4a6c      	ldr	r2, [pc, #432]	@ (8002c74 <main+0x1e14>)
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8002ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ad6:	2b05      	cmp	r3, #5
 8002ad8:	d141      	bne.n	8002b5e <main+0x1cfe>
			Node[k].ControlWord_bool[0]=1;
 8002ada:	4a66      	ldr	r2, [pc, #408]	@ (8002c74 <main+0x1e14>)
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8002aec:	2201      	movs	r2, #1
 8002aee:	701a      	strb	r2, [r3, #0]
			Node[k].ControlWord_bool[1]=1;
 8002af0:	4a60      	ldr	r2, [pc, #384]	@ (8002c74 <main+0x1e14>)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	f203 333d 	addw	r3, r3, #829	@ 0x33d
 8002b02:	2201      	movs	r2, #1
 8002b04:	701a      	strb	r2, [r3, #0]
			Node[k].ControlWord_bool[2]=1;
 8002b06:	4a5b      	ldr	r2, [pc, #364]	@ (8002c74 <main+0x1e14>)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	f203 333e 	addw	r3, r3, #830	@ 0x33e
 8002b18:	2201      	movs	r2, #1
 8002b1a:	701a      	strb	r2, [r3, #0]
			Node[k].ControlWord_bool[3]=0;
 8002b1c:	4a55      	ldr	r2, [pc, #340]	@ (8002c74 <main+0x1e14>)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	f203 333f 	addw	r3, r3, #831	@ 0x33f
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
			Node[k].Transition_Drive_requested=1;
 8002b32:	4a50      	ldr	r2, [pc, #320]	@ (8002c74 <main+0x1e14>)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002b3a:	fb01 f303 	mul.w	r3, r1, r3
 8002b3e:	4413      	add	r3, r2
 8002b40:	f203 332b 	addw	r3, r3, #811	@ 0x32b
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
			Node[k].Switch_On=0;
 8002b48:	4a4a      	ldr	r2, [pc, #296]	@ (8002c74 <main+0x1e14>)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	f203 332d 	addw	r3, r3, #813	@ 0x32d
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]
		}
		if(Node[k].Disable_voltage==1 && Node[k].NMT_slave_state==5){
 8002b5e:	4a45      	ldr	r2, [pc, #276]	@ (8002c74 <main+0x1e14>)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f203 332e 	addw	r3, r3, #814	@ 0x32e
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d04e      	beq.n	8002c14 <main+0x1db4>
 8002b76:	4a3f      	ldr	r2, [pc, #252]	@ (8002c74 <main+0x1e14>)
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8002b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b8c:	2b05      	cmp	r3, #5
 8002b8e:	d141      	bne.n	8002c14 <main+0x1db4>
			Node[k].Disable_voltage=0;
 8002b90:	4a38      	ldr	r2, [pc, #224]	@ (8002c74 <main+0x1e14>)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002b98:	fb01 f303 	mul.w	r3, r1, r3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f203 332e 	addw	r3, r3, #814	@ 0x32e
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
			Node[k].ControlWord_bool[0]=0;
 8002ba6:	4a33      	ldr	r2, [pc, #204]	@ (8002c74 <main+0x1e14>)
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002bae:	fb01 f303 	mul.w	r3, r1, r3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8002bb8:	2200      	movs	r2, #0
 8002bba:	701a      	strb	r2, [r3, #0]
			Node[k].ControlWord_bool[1]=0;
 8002bbc:	4a2d      	ldr	r2, [pc, #180]	@ (8002c74 <main+0x1e14>)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	f203 333d 	addw	r3, r3, #829	@ 0x33d
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
			Node[k].ControlWord_bool[2]=0;
 8002bd2:	4a28      	ldr	r2, [pc, #160]	@ (8002c74 <main+0x1e14>)
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	f203 333e 	addw	r3, r3, #830	@ 0x33e
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
			Node[k].ControlWord_bool[3]=0;
 8002be8:	4a22      	ldr	r2, [pc, #136]	@ (8002c74 <main+0x1e14>)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f203 333f 	addw	r3, r3, #831	@ 0x33f
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
			Node[k].Transition_Drive_requested=1;
 8002bfe:	4a1d      	ldr	r2, [pc, #116]	@ (8002c74 <main+0x1e14>)
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002c06:	fb01 f303 	mul.w	r3, r1, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f203 332b 	addw	r3, r3, #811	@ 0x32b
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
		}
		if(Node[k].Quick_Stop==1 && Node[k].NMT_slave_state==5){
 8002c14:	4a17      	ldr	r2, [pc, #92]	@ (8002c74 <main+0x1e14>)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	f203 332f 	addw	r3, r3, #815	@ 0x32f
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d053      	beq.n	8002cd4 <main+0x1e74>
 8002c2c:	4a11      	ldr	r2, [pc, #68]	@ (8002c74 <main+0x1e14>)
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8002c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c42:	2b05      	cmp	r3, #5
 8002c44:	d146      	bne.n	8002cd4 <main+0x1e74>
			Node[k].ControlWord_bool[0]=0;
 8002c46:	4a0b      	ldr	r2, [pc, #44]	@ (8002c74 <main+0x1e14>)
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
			Node[k].ControlWord_bool[1]=1;
 8002c5c:	4a05      	ldr	r2, [pc, #20]	@ (8002c74 <main+0x1e14>)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	f203 333d 	addw	r3, r3, #829	@ 0x33d
 8002c6e:	2201      	movs	r2, #1
 8002c70:	701a      	strb	r2, [r3, #0]
 8002c72:	e003      	b.n	8002c7c <main+0x1e1c>
 8002c74:	20000190 	.word	0x20000190
 8002c78:	200000e8 	.word	0x200000e8
			Node[k].ControlWord_bool[2]=0;
 8002c7c:	4a88      	ldr	r2, [pc, #544]	@ (8002ea0 <main+0x2040>)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002c84:	fb01 f303 	mul.w	r3, r1, r3
 8002c88:	4413      	add	r3, r2
 8002c8a:	f203 333e 	addw	r3, r3, #830	@ 0x33e
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]
			Node[k].ControlWord_bool[3]=0;
 8002c92:	4a83      	ldr	r2, [pc, #524]	@ (8002ea0 <main+0x2040>)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f203 333f 	addw	r3, r3, #831	@ 0x33f
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
			Node[k].Transition_Drive_requested=1;
 8002ca8:	4a7d      	ldr	r2, [pc, #500]	@ (8002ea0 <main+0x2040>)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002cb0:	fb01 f303 	mul.w	r3, r1, r3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f203 332b 	addw	r3, r3, #811	@ 0x32b
 8002cba:	2201      	movs	r2, #1
 8002cbc:	701a      	strb	r2, [r3, #0]
			Node[k].Quick_Stop=0;
 8002cbe:	4a78      	ldr	r2, [pc, #480]	@ (8002ea0 <main+0x2040>)
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	f203 332f 	addw	r3, r3, #815	@ 0x32f
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
		}
		if(Node[k].Disable_operation==1 && Node[k].NMT_slave_state==5){
 8002cd4:	4a72      	ldr	r2, [pc, #456]	@ (8002ea0 <main+0x2040>)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d04e      	beq.n	8002d8a <main+0x1f2a>
 8002cec:	4a6c      	ldr	r2, [pc, #432]	@ (8002ea0 <main+0x2040>)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8002cfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d02:	2b05      	cmp	r3, #5
 8002d04:	d141      	bne.n	8002d8a <main+0x1f2a>
			Node[k].ControlWord_bool[0]=1;
 8002d06:	4a66      	ldr	r2, [pc, #408]	@ (8002ea0 <main+0x2040>)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8002d18:	2201      	movs	r2, #1
 8002d1a:	701a      	strb	r2, [r3, #0]
			Node[k].ControlWord_bool[1]=1;
 8002d1c:	4a60      	ldr	r2, [pc, #384]	@ (8002ea0 <main+0x2040>)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	4413      	add	r3, r2
 8002d2a:	f203 333d 	addw	r3, r3, #829	@ 0x33d
 8002d2e:	2201      	movs	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]
			Node[k].ControlWord_bool[2]=1;
 8002d32:	4a5b      	ldr	r2, [pc, #364]	@ (8002ea0 <main+0x2040>)
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002d3a:	fb01 f303 	mul.w	r3, r1, r3
 8002d3e:	4413      	add	r3, r2
 8002d40:	f203 333e 	addw	r3, r3, #830	@ 0x33e
 8002d44:	2201      	movs	r2, #1
 8002d46:	701a      	strb	r2, [r3, #0]
			Node[k].ControlWord_bool[3]=0;
 8002d48:	4a55      	ldr	r2, [pc, #340]	@ (8002ea0 <main+0x2040>)
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	f203 333f 	addw	r3, r3, #831	@ 0x33f
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
			Node[k].Transition_Drive_requested=1;
 8002d5e:	4a50      	ldr	r2, [pc, #320]	@ (8002ea0 <main+0x2040>)
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f203 332b 	addw	r3, r3, #811	@ 0x32b
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
			Node[k].Disable_operation=0;
 8002d74:	4a4a      	ldr	r2, [pc, #296]	@ (8002ea0 <main+0x2040>)
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
		}
		if(Node[k].Enable_Operation==1 && Node[k].NMT_slave_state==5){
 8002d8a:	4a45      	ldr	r2, [pc, #276]	@ (8002ea0 <main+0x2040>)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002d92:	fb01 f303 	mul.w	r3, r1, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	f203 3331 	addw	r3, r3, #817	@ 0x331
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d04e      	beq.n	8002e40 <main+0x1fe0>
 8002da2:	4a3f      	ldr	r2, [pc, #252]	@ (8002ea0 <main+0x2040>)
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8002db4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db8:	2b05      	cmp	r3, #5
 8002dba:	d141      	bne.n	8002e40 <main+0x1fe0>
			Node[k].ControlWord_bool[0]=1;
 8002dbc:	4a38      	ldr	r2, [pc, #224]	@ (8002ea0 <main+0x2040>)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002dc4:	fb01 f303 	mul.w	r3, r1, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8002dce:	2201      	movs	r2, #1
 8002dd0:	701a      	strb	r2, [r3, #0]
			Node[k].ControlWord_bool[1]=1;
 8002dd2:	4a33      	ldr	r2, [pc, #204]	@ (8002ea0 <main+0x2040>)
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002dda:	fb01 f303 	mul.w	r3, r1, r3
 8002dde:	4413      	add	r3, r2
 8002de0:	f203 333d 	addw	r3, r3, #829	@ 0x33d
 8002de4:	2201      	movs	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]
			Node[k].ControlWord_bool[2]=1;
 8002de8:	4a2d      	ldr	r2, [pc, #180]	@ (8002ea0 <main+0x2040>)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	4413      	add	r3, r2
 8002df6:	f203 333e 	addw	r3, r3, #830	@ 0x33e
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	701a      	strb	r2, [r3, #0]
			Node[k].ControlWord_bool[3]=1;
 8002dfe:	4a28      	ldr	r2, [pc, #160]	@ (8002ea0 <main+0x2040>)
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002e06:	fb01 f303 	mul.w	r3, r1, r3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f203 333f 	addw	r3, r3, #831	@ 0x33f
 8002e10:	2201      	movs	r2, #1
 8002e12:	701a      	strb	r2, [r3, #0]
			Node[k].Transition_Drive_requested=1;
 8002e14:	4a22      	ldr	r2, [pc, #136]	@ (8002ea0 <main+0x2040>)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	f203 332b 	addw	r3, r3, #811	@ 0x32b
 8002e26:	2201      	movs	r2, #1
 8002e28:	701a      	strb	r2, [r3, #0]
			Node[k].Enable_Operation=0;
 8002e2a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea0 <main+0x2040>)
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	f203 3331 	addw	r3, r3, #817	@ 0x331
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]
		}


		if(Node[k].Fault_Reset==1 && Node[k].NMT_slave_state==5){
 8002e40:	4a17      	ldr	r2, [pc, #92]	@ (8002ea0 <main+0x2040>)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f203 3332 	addw	r3, r3, #818	@ 0x332
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d025      	beq.n	8002ea4 <main+0x2044>
 8002e58:	4a11      	ldr	r2, [pc, #68]	@ (8002ea0 <main+0x2040>)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002e60:	fb01 f303 	mul.w	r3, r1, r3
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8002e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e6e:	2b05      	cmp	r3, #5
 8002e70:	d118      	bne.n	8002ea4 <main+0x2044>
			Node[k].ControlWord_bool[7]=1;
 8002e72:	4a0b      	ldr	r2, [pc, #44]	@ (8002ea0 <main+0x2040>)
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002e7a:	fb01 f303 	mul.w	r3, r1, r3
 8002e7e:	4413      	add	r3, r2
 8002e80:	f203 3343 	addw	r3, r3, #835	@ 0x343
 8002e84:	2201      	movs	r2, #1
 8002e86:	701a      	strb	r2, [r3, #0]
			Node[k].Fault_Reset=0;
 8002e88:	4a05      	ldr	r2, [pc, #20]	@ (8002ea0 <main+0x2040>)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	4413      	add	r3, r2
 8002e96:	f203 3332 	addw	r3, r3, #818	@ 0x332
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	e01b      	b.n	8002ed8 <main+0x2078>
 8002ea0:	20000190 	.word	0x20000190
		}else if(Node[k].Fault_Reset==0){
 8002ea4:	4a9e      	ldr	r2, [pc, #632]	@ (8003120 <main+0x22c0>)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f203 3332 	addw	r3, r3, #818	@ 0x332
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	f083 0301 	eor.w	r3, r3, #1
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <main+0x2078>
			Node[k].ControlWord_bool[7]=0;
 8002ec2:	4a97      	ldr	r2, [pc, #604]	@ (8003120 <main+0x22c0>)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	f203 3343 	addw	r3, r3, #835	@ 0x343
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]





	  if(Node[k].Enter_Pre_Operational==1){
 8002ed8:	4a91      	ldr	r2, [pc, #580]	@ (8003120 <main+0x22c0>)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <main+0x20a6>
		  Node[k].NMT_slave_state_requested=0x7f;
 8002ef0:	4a8b      	ldr	r2, [pc, #556]	@ (8003120 <main+0x22c0>)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8002f02:	227f      	movs	r2, #127	@ 0x7f
 8002f04:	801a      	strh	r2, [r3, #0]
	  	}


	  if(Node[k].Reset_Communication==1){
 8002f06:	4a86      	ldr	r2, [pc, #536]	@ (8003120 <main+0x22c0>)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002f0e:	fb01 f303 	mul.w	r3, r1, r3
 8002f12:	4413      	add	r3, r2
 8002f14:	f203 3327 	addw	r3, r3, #807	@ 0x327
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <main+0x20d4>
		  Node[k].NMT_slave_state_requested=0;
 8002f1e:	4a80      	ldr	r2, [pc, #512]	@ (8003120 <main+0x22c0>)
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002f26:	fb01 f303 	mul.w	r3, r1, r3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8002f30:	2200      	movs	r2, #0
 8002f32:	801a      	strh	r2, [r3, #0]
	  	}


	  if(Node[k].Reset_Node==1){
 8002f34:	4a7a      	ldr	r2, [pc, #488]	@ (8003120 <main+0x22c0>)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 734a 	add.w	r3, r3, #808	@ 0x328
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <main+0x2102>
		  Node[k].NMT_slave_state_requested=0;
 8002f4c:	4a74      	ldr	r2, [pc, #464]	@ (8003120 <main+0x22c0>)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8002f5e:	2200      	movs	r2, #0
 8002f60:	801a      	strh	r2, [r3, #0]

	  	}


	  if(Node[k].Start_Remote_Node==1){
 8002f62:	4a6f      	ldr	r2, [pc, #444]	@ (8003120 <main+0x22c0>)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002f6a:	fb01 f303 	mul.w	r3, r1, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	f203 3329 	addw	r3, r3, #809	@ 0x329
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <main+0x2130>
		  Node[k].NMT_slave_state_requested=5;
 8002f7a:	4a69      	ldr	r2, [pc, #420]	@ (8003120 <main+0x22c0>)
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8002f8c:	2205      	movs	r2, #5
 8002f8e:	801a      	strh	r2, [r3, #0]
	  	}


	  if(Node[k].Stop_Remote_Node==1){
 8002f90:	4a63      	ldr	r2, [pc, #396]	@ (8003120 <main+0x22c0>)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002f98:	fb01 f303 	mul.w	r3, r1, r3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f203 332a 	addw	r3, r3, #810	@ 0x32a
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00a      	beq.n	8002fbe <main+0x215e>
		  Node[k].NMT_slave_state_requested=4;
 8002fa8:	4a5d      	ldr	r2, [pc, #372]	@ (8003120 <main+0x22c0>)
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8002fba:	2204      	movs	r2, #4
 8002fbc:	801a      	strh	r2, [r3, #0]
	  	}


//o NMT_slave_feadback
	  if(Node[k].NMT_slave_feadback!=Node[k].NMT_slave_state_requested){
 8002fbe:	4a58      	ldr	r2, [pc, #352]	@ (8003120 <main+0x22c0>)
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002fc6:	fb01 f303 	mul.w	r3, r1, r3
 8002fca:	4413      	add	r3, r2
 8002fcc:	f203 23e6 	addw	r3, r3, #742	@ 0x2e6
 8002fd0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002fd4:	4952      	ldr	r1, [pc, #328]	@ (8003120 <main+0x22c0>)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8002fdc:	fb00 f303 	mul.w	r3, r0, r3
 8002fe0:	440b      	add	r3, r1
 8002fe2:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8002fe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d00b      	beq.n	8003006 <main+0x21a6>
		  Node[k].NMT_slave_state=-1;
 8002fee:	4a4c      	ldr	r2, [pc, #304]	@ (8003120 <main+0x22c0>)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8003000:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003004:	801a      	strh	r2, [r3, #0]
	  }


	  switch (Node[k].NMT_slave_state){
 8003006:	4a46      	ldr	r2, [pc, #280]	@ (8003120 <main+0x22c0>)
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800300e:	fb01 f303 	mul.w	r3, r1, r3
 8003012:	4413      	add	r3, r2
 8003014:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8003018:	f9b3 3000 	ldrsh.w	r3, [r3]
 800301c:	2b05      	cmp	r3, #5
 800301e:	dc19      	bgt.n	8003054 <main+0x21f4>
 8003020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003024:	f2c1 8377 	blt.w	8004716 <main+0x38b6>
 8003028:	3301      	adds	r3, #1
 800302a:	2b06      	cmp	r3, #6
 800302c:	f201 8373 	bhi.w	8004716 <main+0x38b6>
 8003030:	a201      	add	r2, pc, #4	@ (adr r2, 8003038 <main+0x21d8>)
 8003032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003036:	bf00      	nop
 8003038:	0800305b 	.word	0x0800305b
 800303c:	080035f7 	.word	0x080035f7
 8003040:	08004717 	.word	0x08004717
 8003044:	08004717 	.word	0x08004717
 8003048:	08004717 	.word	0x08004717
 800304c:	08004717 	.word	0x08004717
 8003050:	08003631 	.word	0x08003631
 8003054:	2b7f      	cmp	r3, #127	@ 0x7f
	  		break;
	  	case 0x7f:
	  		//per sviluppi futuri qui si potrebbe impostare un meccanismo di invio e scrittura di messaggi sdo di configurazione, questo per avere un controllo ancora superiore e modificare eventuali parametri interini anche runtime, senza dover collegarci al motore e farlo tramite epos studio


	  		break;
 8003056:	f001 bb5e 	b.w	8004716 <main+0x38b6>
	  		if(Node[k].NMT_slave_state_requested==Node[k].NMT_slave_feadback){
 800305a:	4a31      	ldr	r2, [pc, #196]	@ (8003120 <main+0x22c0>)
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003062:	fb01 f303 	mul.w	r3, r1, r3
 8003066:	4413      	add	r3, r2
 8003068:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800306c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003070:	492b      	ldr	r1, [pc, #172]	@ (8003120 <main+0x22c0>)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8003078:	fb00 f303 	mul.w	r3, r0, r3
 800307c:	440b      	add	r3, r1
 800307e:	f203 23e6 	addw	r3, r3, #742	@ 0x2e6
 8003082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003086:	429a      	cmp	r2, r3
 8003088:	d12d      	bne.n	80030e6 <main+0x2286>
	  			  			Node[k].NMT_slave_state=Node[k].NMT_slave_feadback;
 800308a:	4a25      	ldr	r2, [pc, #148]	@ (8003120 <main+0x22c0>)
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	4413      	add	r3, r2
 8003098:	f203 23e6 	addw	r3, r3, #742	@ 0x2e6
 800309c:	f9b3 0000 	ldrsh.w	r0, [r3]
 80030a0:	4a1f      	ldr	r2, [pc, #124]	@ (8003120 <main+0x22c0>)
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 80030b2:	4602      	mov	r2, r0
 80030b4:	801a      	strh	r2, [r3, #0]
	  			  			Node[k].NMT_slave_state=Node[k].NMT_slave_state_requested;
 80030b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003120 <main+0x22c0>)
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80030be:	fb01 f303 	mul.w	r3, r1, r3
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 80030c8:	f9b3 0000 	ldrsh.w	r0, [r3]
 80030cc:	4a14      	ldr	r2, [pc, #80]	@ (8003120 <main+0x22c0>)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80030d4:	fb01 f303 	mul.w	r3, r1, r3
 80030d8:	4413      	add	r3, r2
 80030da:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 80030de:	4602      	mov	r2, r0
 80030e0:	801a      	strh	r2, [r3, #0]
	  			  			continue;
 80030e2:	f001 bccc 	b.w	8004a7e <main+0x3c1e>
	  		switch (Node[k].NMT_slave_state_requested){
 80030e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003120 <main+0x22c0>)
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80030ee:	fb01 f303 	mul.w	r3, r1, r3
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 80030f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80030fe:	f000 8133 	beq.w	8003368 <main+0x2508>
 8003102:	2b7f      	cmp	r3, #127	@ 0x7f
 8003104:	f300 8277 	bgt.w	80035f6 <main+0x2796>
 8003108:	2b05      	cmp	r3, #5
 800310a:	f000 81c5 	beq.w	8003498 <main+0x2638>
 800310e:	2b05      	cmp	r3, #5
 8003110:	f300 8271 	bgt.w	80035f6 <main+0x2796>
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <main+0x22c4>
 8003118:	2b04      	cmp	r3, #4
 800311a:	f000 8242 	beq.w	80035a2 <main+0x2742>
 800311e:	e26a      	b.n	80035f6 <main+0x2796>
 8003120:	20000190 	.word	0x20000190
	  				switch (Node[k].NMT_slave_feadback){
 8003124:	4a8f      	ldr	r2, [pc, #572]	@ (8003364 <main+0x2504>)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800312c:	fb01 f303 	mul.w	r3, r1, r3
 8003130:	4413      	add	r3, r2
 8003132:	f203 23e6 	addw	r3, r3, #742	@ 0x2e6
 8003136:	f9b3 3000 	ldrsh.w	r3, [r3]
 800313a:	2b05      	cmp	r3, #5
 800313c:	f040 80ca 	bne.w	80032d4 <main+0x2474>
	  						if(Node[k].Actual_Velocity_encoder==0 && (Node[k].Hight_Level_State==-1 || Node[k].Hight_Level_State==0 || Node[k].SubStates_Power_Disabled!=-1 || Node[k].Hight_Level_State==2) && Node[k].Reset_Communication==1){
 8003140:	4a88      	ldr	r2, [pc, #544]	@ (8003364 <main+0x2504>)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	4413      	add	r3, r2
 800314e:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d157      	bne.n	8003208 <main+0x23a8>
 8003158:	4a82      	ldr	r2, [pc, #520]	@ (8003364 <main+0x2504>)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003160:	fb01 f303 	mul.w	r3, r1, r3
 8003164:	4413      	add	r3, r2
 8003166:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 800316a:	f993 3000 	ldrsb.w	r3, [r3]
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003172:	d027      	beq.n	80031c4 <main+0x2364>
 8003174:	4a7b      	ldr	r2, [pc, #492]	@ (8003364 <main+0x2504>)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800317c:	fb01 f303 	mul.w	r3, r1, r3
 8003180:	4413      	add	r3, r2
 8003182:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8003186:	f993 3000 	ldrsb.w	r3, [r3]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d01a      	beq.n	80031c4 <main+0x2364>
 800318e:	4a75      	ldr	r2, [pc, #468]	@ (8003364 <main+0x2504>)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003196:	fb01 f303 	mul.w	r3, r1, r3
 800319a:	4413      	add	r3, r2
 800319c:	f203 331f 	addw	r3, r3, #799	@ 0x31f
 80031a0:	f993 3000 	ldrsb.w	r3, [r3]
 80031a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a8:	d10c      	bne.n	80031c4 <main+0x2364>
 80031aa:	4a6e      	ldr	r2, [pc, #440]	@ (8003364 <main+0x2504>)
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	4413      	add	r3, r2
 80031b8:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 80031bc:	f993 3000 	ldrsb.w	r3, [r3]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d121      	bne.n	8003208 <main+0x23a8>
 80031c4:	4a67      	ldr	r2, [pc, #412]	@ (8003364 <main+0x2504>)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80031cc:	fb01 f303 	mul.w	r3, r1, r3
 80031d0:	4413      	add	r3, r2
 80031d2:	f203 3327 	addw	r3, r3, #807	@ 0x327
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d015      	beq.n	8003208 <main+0x23a8>
	  							Node[k].NMT_Writer=0x82;
 80031dc:	4a61      	ldr	r2, [pc, #388]	@ (8003364 <main+0x2504>)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80031ee:	2282      	movs	r2, #130	@ 0x82
 80031f0:	801a      	strh	r2, [r3, #0]
	  							Node[k].Reset_Communication=false;
 80031f2:	4a5c      	ldr	r2, [pc, #368]	@ (8003364 <main+0x2504>)
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80031fa:	fb01 f303 	mul.w	r3, r1, r3
 80031fe:	4413      	add	r3, r2
 8003200:	f203 3327 	addw	r3, r3, #807	@ 0x327
 8003204:	2200      	movs	r2, #0
 8003206:	701a      	strb	r2, [r3, #0]
	  						if(Node[k].Actual_Velocity_encoder==0 && (Node[k].Hight_Level_State==-1 || Node[k].Hight_Level_State==0 || Node[k].SubStates_Power_Disabled!=-1 || Node[k].Hight_Level_State==2) && Node[k].Reset_Node==1){
 8003208:	4a56      	ldr	r2, [pc, #344]	@ (8003364 <main+0x2504>)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003210:	fb01 f303 	mul.w	r3, r1, r3
 8003214:	4413      	add	r3, r2
 8003216:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	f040 809f 	bne.w	8003360 <main+0x2500>
 8003222:	4a50      	ldr	r2, [pc, #320]	@ (8003364 <main+0x2504>)
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800322a:	fb01 f303 	mul.w	r3, r1, r3
 800322e:	4413      	add	r3, r2
 8003230:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8003234:	f993 3000 	ldrsb.w	r3, [r3]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d027      	beq.n	800328e <main+0x242e>
 800323e:	4a49      	ldr	r2, [pc, #292]	@ (8003364 <main+0x2504>)
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003246:	fb01 f303 	mul.w	r3, r1, r3
 800324a:	4413      	add	r3, r2
 800324c:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8003250:	f993 3000 	ldrsb.w	r3, [r3]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01a      	beq.n	800328e <main+0x242e>
 8003258:	4a42      	ldr	r2, [pc, #264]	@ (8003364 <main+0x2504>)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003260:	fb01 f303 	mul.w	r3, r1, r3
 8003264:	4413      	add	r3, r2
 8003266:	f203 331f 	addw	r3, r3, #799	@ 0x31f
 800326a:	f993 3000 	ldrsb.w	r3, [r3]
 800326e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003272:	d10c      	bne.n	800328e <main+0x242e>
 8003274:	4a3b      	ldr	r2, [pc, #236]	@ (8003364 <main+0x2504>)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800327c:	fb01 f303 	mul.w	r3, r1, r3
 8003280:	4413      	add	r3, r2
 8003282:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8003286:	f993 3000 	ldrsb.w	r3, [r3]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d168      	bne.n	8003360 <main+0x2500>
 800328e:	4a35      	ldr	r2, [pc, #212]	@ (8003364 <main+0x2504>)
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	f503 734a 	add.w	r3, r3, #808	@ 0x328
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d05c      	beq.n	8003360 <main+0x2500>
	  							Node[k].NMT_Writer=0x81;
 80032a6:	4a2f      	ldr	r2, [pc, #188]	@ (8003364 <main+0x2504>)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80032b8:	2281      	movs	r2, #129	@ 0x81
 80032ba:	801a      	strh	r2, [r3, #0]
	  							Node[k].Reset_Node=false;
 80032bc:	4a29      	ldr	r2, [pc, #164]	@ (8003364 <main+0x2504>)
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	f503 734a 	add.w	r3, r3, #808	@ 0x328
 80032ce:	2200      	movs	r2, #0
 80032d0:	701a      	strb	r2, [r3, #0]
	  						break;
 80032d2:	e045      	b.n	8003360 <main+0x2500>
	  						if(Node[k].Reset_Communication==1){
 80032d4:	4a23      	ldr	r2, [pc, #140]	@ (8003364 <main+0x2504>)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80032dc:	fb01 f303 	mul.w	r3, r1, r3
 80032e0:	4413      	add	r3, r2
 80032e2:	f203 3327 	addw	r3, r3, #807	@ 0x327
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d015      	beq.n	8003318 <main+0x24b8>
	  							Node[k].NMT_Writer=0x82;
 80032ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003364 <main+0x2504>)
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80032fe:	2282      	movs	r2, #130	@ 0x82
 8003300:	801a      	strh	r2, [r3, #0]
	  							Node[k].Reset_Communication=false;
 8003302:	4a18      	ldr	r2, [pc, #96]	@ (8003364 <main+0x2504>)
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	f203 3327 	addw	r3, r3, #807	@ 0x327
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
	  						if(Node[k].Reset_Node==1){
 8003318:	4a12      	ldr	r2, [pc, #72]	@ (8003364 <main+0x2504>)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003320:	fb01 f303 	mul.w	r3, r1, r3
 8003324:	4413      	add	r3, r2
 8003326:	f503 734a 	add.w	r3, r3, #808	@ 0x328
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 815b 	beq.w	80035e8 <main+0x2788>
	  							Node[k].NMT_Writer=0x81;
 8003332:	4a0c      	ldr	r2, [pc, #48]	@ (8003364 <main+0x2504>)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800333a:	fb01 f303 	mul.w	r3, r1, r3
 800333e:	4413      	add	r3, r2
 8003340:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8003344:	2281      	movs	r2, #129	@ 0x81
 8003346:	801a      	strh	r2, [r3, #0]
	  							Node[k].Reset_Node=false;
 8003348:	4a06      	ldr	r2, [pc, #24]	@ (8003364 <main+0x2504>)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	4413      	add	r3, r2
 8003356:	f503 734a 	add.w	r3, r3, #808	@ 0x328
 800335a:	2200      	movs	r2, #0
 800335c:	701a      	strb	r2, [r3, #0]
	  				break;
 800335e:	e143      	b.n	80035e8 <main+0x2788>
	  						break;
 8003360:	bf00      	nop
	  				break;
 8003362:	e141      	b.n	80035e8 <main+0x2788>
 8003364:	20000190 	.word	0x20000190
	  				switch (Node[k].NMT_slave_feadback){
 8003368:	4ab0      	ldr	r2, [pc, #704]	@ (800362c <main+0x27cc>)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	4413      	add	r3, r2
 8003376:	f203 23e6 	addw	r3, r3, #742	@ 0x2e6
 800337a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800337e:	2b05      	cmp	r3, #5
 8003380:	d164      	bne.n	800344c <main+0x25ec>
	  						if(Node[k].Actual_Velocity_encoder==0 && (Node[k].Hight_Level_State==-1 || Node[k].Hight_Level_State==0 || Node[k].SubStates_Power_Disabled!=-1 || Node[k].Hight_Level_State==2) && Node[k].Enter_Pre_Operational==1){//sta a significare che prima deve essere portato il motore in condizione di sicurezza
 8003382:	4aaa      	ldr	r2, [pc, #680]	@ (800362c <main+0x27cc>)
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d17c      	bne.n	8003494 <main+0x2634>
 800339a:	4aa4      	ldr	r2, [pc, #656]	@ (800362c <main+0x27cc>)
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80033a2:	fb01 f303 	mul.w	r3, r1, r3
 80033a6:	4413      	add	r3, r2
 80033a8:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 80033ac:	f993 3000 	ldrsb.w	r3, [r3]
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b4:	d027      	beq.n	8003406 <main+0x25a6>
 80033b6:	4a9d      	ldr	r2, [pc, #628]	@ (800362c <main+0x27cc>)
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80033be:	fb01 f303 	mul.w	r3, r1, r3
 80033c2:	4413      	add	r3, r2
 80033c4:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 80033c8:	f993 3000 	ldrsb.w	r3, [r3]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d01a      	beq.n	8003406 <main+0x25a6>
 80033d0:	4a96      	ldr	r2, [pc, #600]	@ (800362c <main+0x27cc>)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80033d8:	fb01 f303 	mul.w	r3, r1, r3
 80033dc:	4413      	add	r3, r2
 80033de:	f203 331f 	addw	r3, r3, #799	@ 0x31f
 80033e2:	f993 3000 	ldrsb.w	r3, [r3]
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ea:	d10c      	bne.n	8003406 <main+0x25a6>
 80033ec:	4a8f      	ldr	r2, [pc, #572]	@ (800362c <main+0x27cc>)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80033f4:	fb01 f303 	mul.w	r3, r1, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 80033fe:	f993 3000 	ldrsb.w	r3, [r3]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d146      	bne.n	8003494 <main+0x2634>
 8003406:	4a89      	ldr	r2, [pc, #548]	@ (800362c <main+0x27cc>)
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800340e:	fb01 f303 	mul.w	r3, r1, r3
 8003412:	4413      	add	r3, r2
 8003414:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d03a      	beq.n	8003494 <main+0x2634>
	  							Node[k].NMT_Writer=0x80;
 800341e:	4a83      	ldr	r2, [pc, #524]	@ (800362c <main+0x27cc>)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003426:	fb01 f303 	mul.w	r3, r1, r3
 800342a:	4413      	add	r3, r2
 800342c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8003430:	2280      	movs	r2, #128	@ 0x80
 8003432:	801a      	strh	r2, [r3, #0]
	  							Node[k].Enter_Pre_Operational=false;
 8003434:	4a7d      	ldr	r2, [pc, #500]	@ (800362c <main+0x27cc>)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800343c:	fb01 f303 	mul.w	r3, r1, r3
 8003440:	4413      	add	r3, r2
 8003442:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8003446:	2200      	movs	r2, #0
 8003448:	701a      	strb	r2, [r3, #0]
	  						break;
 800344a:	e023      	b.n	8003494 <main+0x2634>
	  						if(Node[k].Enter_Pre_Operational==1){
 800344c:	4a77      	ldr	r2, [pc, #476]	@ (800362c <main+0x27cc>)
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003454:	fb01 f303 	mul.w	r3, r1, r3
 8003458:	4413      	add	r3, r2
 800345a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 80c3 	beq.w	80035ec <main+0x278c>
	  							Node[k].NMT_Writer=0x80;
 8003466:	4a71      	ldr	r2, [pc, #452]	@ (800362c <main+0x27cc>)
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800346e:	fb01 f303 	mul.w	r3, r1, r3
 8003472:	4413      	add	r3, r2
 8003474:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8003478:	2280      	movs	r2, #128	@ 0x80
 800347a:	801a      	strh	r2, [r3, #0]
	  							Node[k].Enter_Pre_Operational=false;
 800347c:	4a6b      	ldr	r2, [pc, #428]	@ (800362c <main+0x27cc>)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003484:	fb01 f303 	mul.w	r3, r1, r3
 8003488:	4413      	add	r3, r2
 800348a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
	  				break;
 8003492:	e0ab      	b.n	80035ec <main+0x278c>
	  						break;
 8003494:	bf00      	nop
	  				break;
 8003496:	e0a9      	b.n	80035ec <main+0x278c>
	  				Node[k].SubStates_Power_Enabled=-1;
 8003498:	4a64      	ldr	r2, [pc, #400]	@ (800362c <main+0x27cc>)
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	f203 3321 	addw	r3, r3, #801	@ 0x321
 80034aa:	22ff      	movs	r2, #255	@ 0xff
 80034ac:	701a      	strb	r2, [r3, #0]
	  				Node[k].SubStates_Power_Disabled=-1;
 80034ae:	4a5f      	ldr	r2, [pc, #380]	@ (800362c <main+0x27cc>)
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80034b6:	fb01 f303 	mul.w	r3, r1, r3
 80034ba:	4413      	add	r3, r2
 80034bc:	f203 331f 	addw	r3, r3, #799	@ 0x31f
 80034c0:	22ff      	movs	r2, #255	@ 0xff
 80034c2:	701a      	strb	r2, [r3, #0]
	  				Node[k].SubStates_Fault=-1;
 80034c4:	4a59      	ldr	r2, [pc, #356]	@ (800362c <main+0x27cc>)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80034cc:	fb01 f303 	mul.w	r3, r1, r3
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 80034d6:	22ff      	movs	r2, #255	@ 0xff
 80034d8:	701a      	strb	r2, [r3, #0]
	  				Node[k].Hight_Level_State=-1;
 80034da:	4a54      	ldr	r2, [pc, #336]	@ (800362c <main+0x27cc>)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80034e2:	fb01 f303 	mul.w	r3, r1, r3
 80034e6:	4413      	add	r3, r2
 80034e8:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 80034ec:	22ff      	movs	r2, #255	@ 0xff
 80034ee:	701a      	strb	r2, [r3, #0]
	  				switch (Node[k].NMT_slave_feadback){
 80034f0:	4a4e      	ldr	r2, [pc, #312]	@ (800362c <main+0x27cc>)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	f203 23e6 	addw	r3, r3, #742	@ 0x2e6
 8003502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003506:	2b04      	cmp	r3, #4
 8003508:	d024      	beq.n	8003554 <main+0x26f4>
 800350a:	2b7f      	cmp	r3, #127	@ 0x7f
 800350c:	d170      	bne.n	80035f0 <main+0x2790>
	  						if(Node[k].Start_Remote_Node==1){
 800350e:	4a47      	ldr	r2, [pc, #284]	@ (800362c <main+0x27cc>)
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	4413      	add	r3, r2
 800351c:	f203 3329 	addw	r3, r3, #809	@ 0x329
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d039      	beq.n	800359a <main+0x273a>
	  							Node[k].NMT_Writer=1;
 8003526:	4a41      	ldr	r2, [pc, #260]	@ (800362c <main+0x27cc>)
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800352e:	fb01 f303 	mul.w	r3, r1, r3
 8003532:	4413      	add	r3, r2
 8003534:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8003538:	2201      	movs	r2, #1
 800353a:	801a      	strh	r2, [r3, #0]
	  							Node[k].Start_Remote_Node=false;
 800353c:	4a3b      	ldr	r2, [pc, #236]	@ (800362c <main+0x27cc>)
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	4413      	add	r3, r2
 800354a:	f203 3329 	addw	r3, r3, #809	@ 0x329
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]
	  						break;
 8003552:	e022      	b.n	800359a <main+0x273a>
	  						if(Node[k].Start_Remote_Node==1){
 8003554:	4a35      	ldr	r2, [pc, #212]	@ (800362c <main+0x27cc>)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800355c:	fb01 f303 	mul.w	r3, r1, r3
 8003560:	4413      	add	r3, r2
 8003562:	f203 3329 	addw	r3, r3, #809	@ 0x329
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d018      	beq.n	800359e <main+0x273e>
	  							Node[k].NMT_Writer=1;
 800356c:	4a2f      	ldr	r2, [pc, #188]	@ (800362c <main+0x27cc>)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	4413      	add	r3, r2
 800357a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800357e:	2201      	movs	r2, #1
 8003580:	801a      	strh	r2, [r3, #0]
	  							Node[k].Start_Remote_Node=false;
 8003582:	4a2a      	ldr	r2, [pc, #168]	@ (800362c <main+0x27cc>)
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800358a:	fb01 f303 	mul.w	r3, r1, r3
 800358e:	4413      	add	r3, r2
 8003590:	f203 3329 	addw	r3, r3, #809	@ 0x329
 8003594:	2200      	movs	r2, #0
 8003596:	701a      	strb	r2, [r3, #0]
	  						break;
 8003598:	e001      	b.n	800359e <main+0x273e>
	  						break;
 800359a:	bf00      	nop
 800359c:	e028      	b.n	80035f0 <main+0x2790>
	  						break;
 800359e:	bf00      	nop
	  				break;
 80035a0:	e026      	b.n	80035f0 <main+0x2790>
	  				if(Node[k].Stop_Remote_Node==1){
 80035a2:	4a22      	ldr	r2, [pc, #136]	@ (800362c <main+0x27cc>)
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80035aa:	fb01 f303 	mul.w	r3, r1, r3
 80035ae:	4413      	add	r3, r2
 80035b0:	f203 332a 	addw	r3, r3, #810	@ 0x32a
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d01c      	beq.n	80035f4 <main+0x2794>
	  					Node[k].NMT_Writer=2;
 80035ba:	4a1c      	ldr	r2, [pc, #112]	@ (800362c <main+0x27cc>)
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80035c2:	fb01 f303 	mul.w	r3, r1, r3
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80035cc:	2202      	movs	r2, #2
 80035ce:	801a      	strh	r2, [r3, #0]
	  					Node[k].Stop_Remote_Node=false;
 80035d0:	4a16      	ldr	r2, [pc, #88]	@ (800362c <main+0x27cc>)
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80035d8:	fb01 f303 	mul.w	r3, r1, r3
 80035dc:	4413      	add	r3, r2
 80035de:	f203 332a 	addw	r3, r3, #810	@ 0x32a
 80035e2:	2200      	movs	r2, #0
 80035e4:	701a      	strb	r2, [r3, #0]
	  				break;
 80035e6:	e005      	b.n	80035f4 <main+0x2794>
	  				break;
 80035e8:	bf00      	nop
 80035ea:	e004      	b.n	80035f6 <main+0x2796>
	  				break;
 80035ec:	bf00      	nop
 80035ee:	e002      	b.n	80035f6 <main+0x2796>
	  				break;
 80035f0:	bf00      	nop
 80035f2:	e000      	b.n	80035f6 <main+0x2796>
	  				break;
 80035f4:	bf00      	nop
	  		if(Node[k].NMT_slave_feadback== 0x7f){
 80035f6:	4a0d      	ldr	r2, [pc, #52]	@ (800362c <main+0x27cc>)
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80035fe:	fb01 f303 	mul.w	r3, r1, r3
 8003602:	4413      	add	r3, r2
 8003604:	f203 23e6 	addw	r3, r3, #742	@ 0x2e6
 8003608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800360c:	2b7f      	cmp	r3, #127	@ 0x7f
 800360e:	f041 807c 	bne.w	800470a <main+0x38aa>
	  			Node[k].NMT_slave_state=0x7f;
 8003612:	4a06      	ldr	r2, [pc, #24]	@ (800362c <main+0x27cc>)
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800361a:	fb01 f303 	mul.w	r3, r1, r3
 800361e:	4413      	add	r3, r2
 8003620:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8003624:	227f      	movs	r2, #127	@ 0x7f
 8003626:	801a      	strh	r2, [r3, #0]
	  		break;
 8003628:	f001 b86f 	b.w	800470a <main+0x38aa>
 800362c:	20000190 	.word	0x20000190
	  	case 04:


	  		break;
	  	case 05:
	  		if((Node[k].StatusWord_bool[0]==1 && Node[k].StatusWord_bool[1]==1 && Node[k].StatusWord_bool[2]==1 && Node[k].StatusWord_bool[3]==1 && Node[k].StatusWord_bool[5]==0 && Node[k].StatusWord_bool[6]==0 && Node[k].Hight_Level_State!=2) || (Node[k].StatusWord_bool[0]==0 && Node[k].StatusWord_bool[1]==0 && Node[k].StatusWord_bool[2]==0 && Node[k].StatusWord_bool[3]==1 && Node[k].StatusWord_bool[5]==0 && Node[k].StatusWord_bool[6]==0 && Node[k].Hight_Level_State!=2)){
 8003630:	4abd      	ldr	r2, [pc, #756]	@ (8003928 <main+0x2ac8>)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003638:	fb01 f303 	mul.w	r3, r1, r3
 800363c:	4413      	add	r3, r2
 800363e:	f203 23ea 	addw	r3, r3, #746	@ 0x2ea
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d04e      	beq.n	80036e6 <main+0x2886>
 8003648:	4ab7      	ldr	r2, [pc, #732]	@ (8003928 <main+0x2ac8>)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003650:	fb01 f303 	mul.w	r3, r1, r3
 8003654:	4413      	add	r3, r2
 8003656:	f203 23eb 	addw	r3, r3, #747	@ 0x2eb
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d042      	beq.n	80036e6 <main+0x2886>
 8003660:	4ab1      	ldr	r2, [pc, #708]	@ (8003928 <main+0x2ac8>)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	4413      	add	r3, r2
 800366e:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d036      	beq.n	80036e6 <main+0x2886>
 8003678:	4aab      	ldr	r2, [pc, #684]	@ (8003928 <main+0x2ac8>)
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	4413      	add	r3, r2
 8003686:	f203 23ed 	addw	r3, r3, #749	@ 0x2ed
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d02a      	beq.n	80036e6 <main+0x2886>
 8003690:	4aa5      	ldr	r2, [pc, #660]	@ (8003928 <main+0x2ac8>)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	4413      	add	r3, r2
 800369e:	f203 23ef 	addw	r3, r3, #751	@ 0x2ef
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	f083 0301 	eor.w	r3, r3, #1
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01b      	beq.n	80036e6 <main+0x2886>
 80036ae:	4a9e      	ldr	r2, [pc, #632]	@ (8003928 <main+0x2ac8>)
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80036b6:	fb01 f303 	mul.w	r3, r1, r3
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	f083 0301 	eor.w	r3, r3, #1
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00c      	beq.n	80036e6 <main+0x2886>
 80036cc:	4a96      	ldr	r2, [pc, #600]	@ (8003928 <main+0x2ac8>)
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	4413      	add	r3, r2
 80036da:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 80036de:	f993 3000 	ldrsb.w	r3, [r3]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d168      	bne.n	80037b8 <main+0x2958>
 80036e6:	4a90      	ldr	r2, [pc, #576]	@ (8003928 <main+0x2ac8>)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80036ee:	fb01 f303 	mul.w	r3, r1, r3
 80036f2:	4413      	add	r3, r2
 80036f4:	f203 23ea 	addw	r3, r3, #746	@ 0x2ea
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	f083 0301 	eor.w	r3, r3, #1
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 80c9 	beq.w	8003898 <main+0x2a38>
 8003706:	4a88      	ldr	r2, [pc, #544]	@ (8003928 <main+0x2ac8>)
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800370e:	fb01 f303 	mul.w	r3, r1, r3
 8003712:	4413      	add	r3, r2
 8003714:	f203 23eb 	addw	r3, r3, #747	@ 0x2eb
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	f083 0301 	eor.w	r3, r3, #1
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80b9 	beq.w	8003898 <main+0x2a38>
 8003726:	4a80      	ldr	r2, [pc, #512]	@ (8003928 <main+0x2ac8>)
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800372e:	fb01 f303 	mul.w	r3, r1, r3
 8003732:	4413      	add	r3, r2
 8003734:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	f083 0301 	eor.w	r3, r3, #1
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 80a9 	beq.w	8003898 <main+0x2a38>
 8003746:	4a78      	ldr	r2, [pc, #480]	@ (8003928 <main+0x2ac8>)
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800374e:	fb01 f303 	mul.w	r3, r1, r3
 8003752:	4413      	add	r3, r2
 8003754:	f203 23ed 	addw	r3, r3, #749	@ 0x2ed
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 809c 	beq.w	8003898 <main+0x2a38>
 8003760:	4a71      	ldr	r2, [pc, #452]	@ (8003928 <main+0x2ac8>)
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003768:	fb01 f303 	mul.w	r3, r1, r3
 800376c:	4413      	add	r3, r2
 800376e:	f203 23ef 	addw	r3, r3, #751	@ 0x2ef
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	f083 0301 	eor.w	r3, r3, #1
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 808c 	beq.w	8003898 <main+0x2a38>
 8003780:	4a69      	ldr	r2, [pc, #420]	@ (8003928 <main+0x2ac8>)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003788:	fb01 f303 	mul.w	r3, r1, r3
 800378c:	4413      	add	r3, r2
 800378e:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	f083 0301 	eor.w	r3, r3, #1
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d07c      	beq.n	8003898 <main+0x2a38>
 800379e:	4a62      	ldr	r2, [pc, #392]	@ (8003928 <main+0x2ac8>)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80037a6:	fb01 f303 	mul.w	r3, r1, r3
 80037aa:	4413      	add	r3, r2
 80037ac:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 80037b0:	f993 3000 	ldrsb.w	r3, [r3]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d06f      	beq.n	8003898 <main+0x2a38>
	  		switch (Node[k].Hight_Level_State) {
 80037b8:	4a5b      	ldr	r2, [pc, #364]	@ (8003928 <main+0x2ac8>)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80037c0:	fb01 f303 	mul.w	r3, r1, r3
 80037c4:	4413      	add	r3, r2
 80037c6:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 80037ca:	f993 3000 	ldrsb.w	r3, [r3]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d04b      	beq.n	800386a <main+0x2a0a>
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	dc60      	bgt.n	8003898 <main+0x2a38>
 80037d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037da:	d002      	beq.n	80037e2 <main+0x2982>
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d02d      	beq.n	800383c <main+0x29dc>
 80037e0:	e05a      	b.n	8003898 <main+0x2a38>
	  			case -1:
	  				Node[k].SubStates_Power_Enabled=-1;
 80037e2:	4a51      	ldr	r2, [pc, #324]	@ (8003928 <main+0x2ac8>)
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	4413      	add	r3, r2
 80037f0:	f203 3321 	addw	r3, r3, #801	@ 0x321
 80037f4:	22ff      	movs	r2, #255	@ 0xff
 80037f6:	701a      	strb	r2, [r3, #0]
	  				Node[k].SubStates_Power_Disabled=-1;
 80037f8:	4a4b      	ldr	r2, [pc, #300]	@ (8003928 <main+0x2ac8>)
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003800:	fb01 f303 	mul.w	r3, r1, r3
 8003804:	4413      	add	r3, r2
 8003806:	f203 331f 	addw	r3, r3, #799	@ 0x31f
 800380a:	22ff      	movs	r2, #255	@ 0xff
 800380c:	701a      	strb	r2, [r3, #0]
	  				Node[k].SubStates_Fault=0;
 800380e:	4a46      	ldr	r2, [pc, #280]	@ (8003928 <main+0x2ac8>)
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003816:	fb01 f303 	mul.w	r3, r1, r3
 800381a:	4413      	add	r3, r2
 800381c:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8003820:	2200      	movs	r2, #0
 8003822:	701a      	strb	r2, [r3, #0]
	  				Node[k].Hight_Level_State=2;
 8003824:	4a40      	ldr	r2, [pc, #256]	@ (8003928 <main+0x2ac8>)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	4413      	add	r3, r2
 8003832:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8003836:	2202      	movs	r2, #2
 8003838:	701a      	strb	r2, [r3, #0]
	  				break;
 800383a:	e02d      	b.n	8003898 <main+0x2a38>
	  			case 0:
	  				Node[k].SubStates_Power_Disabled=-1;//se si era in power enabled si passa per il gatewat in uscita del power enabled
 800383c:	4a3a      	ldr	r2, [pc, #232]	@ (8003928 <main+0x2ac8>)
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003844:	fb01 f303 	mul.w	r3, r1, r3
 8003848:	4413      	add	r3, r2
 800384a:	f203 331f 	addw	r3, r3, #799	@ 0x31f
 800384e:	22ff      	movs	r2, #255	@ 0xff
 8003850:	701a      	strb	r2, [r3, #0]
	  				Node[k].SubStates_Fault=0;// o 1 vediamo....
 8003852:	4a35      	ldr	r2, [pc, #212]	@ (8003928 <main+0x2ac8>)
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800385a:	fb01 f303 	mul.w	r3, r1, r3
 800385e:	4413      	add	r3, r2
 8003860:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8003864:	2200      	movs	r2, #0
 8003866:	701a      	strb	r2, [r3, #0]
	  				break;
 8003868:	e016      	b.n	8003898 <main+0x2a38>
	  			case 1:
	  				Node[k].SubStates_Power_Enabled=-1;//se si era in power enabled si passa per il gatewat in uscita del power enabled
 800386a:	4a2f      	ldr	r2, [pc, #188]	@ (8003928 <main+0x2ac8>)
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003872:	fb01 f303 	mul.w	r3, r1, r3
 8003876:	4413      	add	r3, r2
 8003878:	f203 3321 	addw	r3, r3, #801	@ 0x321
 800387c:	22ff      	movs	r2, #255	@ 0xff
 800387e:	701a      	strb	r2, [r3, #0]
	  				Node[k].SubStates_Fault=0;// o 1 vediamo....
 8003880:	4a29      	ldr	r2, [pc, #164]	@ (8003928 <main+0x2ac8>)
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	4413      	add	r3, r2
 800388e:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]
	  				break;
 8003896:	bf00      	nop
	  		}
	  		}
	  	//sate machine that follows the changings { the status word and track whether the transition required from the event is compatibke with the actual driver state and mode { operation
	  		switch (Node[k].Hight_Level_State) {
 8003898:	4a23      	ldr	r2, [pc, #140]	@ (8003928 <main+0x2ac8>)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	4413      	add	r3, r2
 80038a6:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 80038aa:	f993 3000 	ldrsb.w	r3, [r3]
 80038ae:	3301      	adds	r3, #1
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	f200 837f 	bhi.w	8003fb4 <main+0x3154>
 80038b6:	a201      	add	r2, pc, #4	@ (adr r2, 80038bc <main+0x2a5c>)
 80038b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038bc:	080038cd 	.word	0x080038cd
 80038c0:	0800392d 	.word	0x0800392d
 80038c4:	08003ce3 	.word	0x08003ce3
 80038c8:	08003b29 	.word	0x08003b29
	  			//sfruttare questo stato per saltare alcune transizioni automatiche appena si entra in operazionale con gli NMT slave, torniamo qui infatti ogni volta che il motore deve RIENTRARE in operational_NMT
	  			//ci si aspetta direttamente che la status word assuma i valori aspettati con controlwort preimpostata di default a 0....0 ad ogni entry in operational, dopo di che si parte con il monitoring della macchina a stati dell'azionamento


	  			//if (StatusWord_bool[0]==FALSE && StatusWord_bool[1]==FALSE && StatusWord_bool[2]==FALSE && StatusWord_bool[3]==FALSE &&  StatusWord_bool[6]==TRUE){
	  				Node[k].Hight_Level_State=0;
 80038cc:	4a16      	ldr	r2, [pc, #88]	@ (8003928 <main+0x2ac8>)
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80038d4:	fb01 f303 	mul.w	r3, r1, r3
 80038d8:	4413      	add	r3, r2
 80038da:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 80038de:	2200      	movs	r2, #0
 80038e0:	701a      	strb	r2, [r3, #0]
	  				Node[k].SubStates_Power_Disabled=-1;
 80038e2:	4a11      	ldr	r2, [pc, #68]	@ (8003928 <main+0x2ac8>)
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80038ea:	fb01 f303 	mul.w	r3, r1, r3
 80038ee:	4413      	add	r3, r2
 80038f0:	f203 331f 	addw	r3, r3, #799	@ 0x31f
 80038f4:	22ff      	movs	r2, #255	@ 0xff
 80038f6:	701a      	strb	r2, [r3, #0]
	  				Node[k].SubStates_Fault=-1;
 80038f8:	4a0b      	ldr	r2, [pc, #44]	@ (8003928 <main+0x2ac8>)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003900:	fb01 f303 	mul.w	r3, r1, r3
 8003904:	4413      	add	r3, r2
 8003906:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800390a:	22ff      	movs	r2, #255	@ 0xff
 800390c:	701a      	strb	r2, [r3, #0]
	  				Node[k].SubStates_Power_Enabled=-1;
 800390e:	4a06      	ldr	r2, [pc, #24]	@ (8003928 <main+0x2ac8>)
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	4413      	add	r3, r2
 800391c:	f203 3321 	addw	r3, r3, #801	@ 0x321
 8003920:	22ff      	movs	r2, #255	@ 0xff
 8003922:	701a      	strb	r2, [r3, #0]

	  			//}
	  			break;
 8003924:	e346      	b.n	8003fb4 <main+0x3154>
 8003926:	bf00      	nop
 8003928:	20000190 	.word	0x20000190

	  		case 0://SubStates_Power_Disabled
	  			switch (Node[k].SubStates_Power_Disabled) {
 800392c:	4aba      	ldr	r2, [pc, #744]	@ (8003c18 <main+0x2db8>)
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003934:	fb01 f303 	mul.w	r3, r1, r3
 8003938:	4413      	add	r3, r2
 800393a:	f203 331f 	addw	r3, r3, #799	@ 0x31f
 800393e:	f993 3000 	ldrsb.w	r3, [r3]
 8003942:	2b01      	cmp	r3, #1
 8003944:	f000 80ec 	beq.w	8003b20 <main+0x2cc0>
 8003948:	2b01      	cmp	r3, #1
 800394a:	f300 8330 	bgt.w	8003fae <main+0x314e>
 800394e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003952:	d001      	beq.n	8003958 <main+0x2af8>
 8003954:	2b00      	cmp	r3, #0
	  					break;

	  				case 0://switch on disabled si puo uscire solo cun uno shutdown che scatena la transizione 2 verso ready to switch on


	  					break;
 8003956:	e0e6      	b.n	8003b26 <main+0x2cc6>
	  					if (Node[k].StatusWord_bool[0]==0 && Node[k].StatusWord_bool[1]==0 && Node[k].StatusWord_bool[2]==0 && Node[k].StatusWord_bool[3]==0 &&  Node[k].StatusWord_bool[6]==1) {//StatusWord_bool[5]=TRUE &&
 8003958:	4aaf      	ldr	r2, [pc, #700]	@ (8003c18 <main+0x2db8>)
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003960:	fb01 f303 	mul.w	r3, r1, r3
 8003964:	4413      	add	r3, r2
 8003966:	f203 23ea 	addw	r3, r3, #746	@ 0x2ea
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	f083 0301 	eor.w	r3, r3, #1
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d044      	beq.n	8003a00 <main+0x2ba0>
 8003976:	4aa8      	ldr	r2, [pc, #672]	@ (8003c18 <main+0x2db8>)
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800397e:	fb01 f303 	mul.w	r3, r1, r3
 8003982:	4413      	add	r3, r2
 8003984:	f203 23eb 	addw	r3, r3, #747	@ 0x2eb
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	f083 0301 	eor.w	r3, r3, #1
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d035      	beq.n	8003a00 <main+0x2ba0>
 8003994:	4aa0      	ldr	r2, [pc, #640]	@ (8003c18 <main+0x2db8>)
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800399c:	fb01 f303 	mul.w	r3, r1, r3
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	f083 0301 	eor.w	r3, r3, #1
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d026      	beq.n	8003a00 <main+0x2ba0>
 80039b2:	4a99      	ldr	r2, [pc, #612]	@ (8003c18 <main+0x2db8>)
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	4413      	add	r3, r2
 80039c0:	f203 23ed 	addw	r3, r3, #749	@ 0x2ed
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	f083 0301 	eor.w	r3, r3, #1
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d017      	beq.n	8003a00 <main+0x2ba0>
 80039d0:	4a91      	ldr	r2, [pc, #580]	@ (8003c18 <main+0x2db8>)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80039d8:	fb01 f303 	mul.w	r3, r1, r3
 80039dc:	4413      	add	r3, r2
 80039de:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00b      	beq.n	8003a00 <main+0x2ba0>
	  						Node[k].SubStates_Power_Disabled=0;
 80039e8:	4a8b      	ldr	r2, [pc, #556]	@ (8003c18 <main+0x2db8>)
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80039f0:	fb01 f303 	mul.w	r3, r1, r3
 80039f4:	4413      	add	r3, r2
 80039f6:	f203 331f 	addw	r3, r3, #799	@ 0x31f
 80039fa:	2200      	movs	r2, #0
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	e075      	b.n	8003aec <main+0x2c8c>
	  					}else if(Node[k].StatusWord_bool[0]==1 && Node[k].StatusWord_bool[1]==0 && Node[k].StatusWord_bool[2]==0 && Node[k].StatusWord_bool[3]==0 && Node[k].StatusWord_bool[5]==1 && Node[k].StatusWord_bool[6]==0) {
 8003a00:	4a85      	ldr	r2, [pc, #532]	@ (8003c18 <main+0x2db8>)
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003a08:	fb01 f303 	mul.w	r3, r1, r3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f203 23ea 	addw	r3, r3, #746	@ 0x2ea
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d053      	beq.n	8003ac0 <main+0x2c60>
 8003a18:	4a7f      	ldr	r2, [pc, #508]	@ (8003c18 <main+0x2db8>)
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003a20:	fb01 f303 	mul.w	r3, r1, r3
 8003a24:	4413      	add	r3, r2
 8003a26:	f203 23eb 	addw	r3, r3, #747	@ 0x2eb
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	f083 0301 	eor.w	r3, r3, #1
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d044      	beq.n	8003ac0 <main+0x2c60>
 8003a36:	4a78      	ldr	r2, [pc, #480]	@ (8003c18 <main+0x2db8>)
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003a3e:	fb01 f303 	mul.w	r3, r1, r3
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	f083 0301 	eor.w	r3, r3, #1
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d035      	beq.n	8003ac0 <main+0x2c60>
 8003a54:	4a70      	ldr	r2, [pc, #448]	@ (8003c18 <main+0x2db8>)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003a5c:	fb01 f303 	mul.w	r3, r1, r3
 8003a60:	4413      	add	r3, r2
 8003a62:	f203 23ed 	addw	r3, r3, #749	@ 0x2ed
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	f083 0301 	eor.w	r3, r3, #1
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d026      	beq.n	8003ac0 <main+0x2c60>
 8003a72:	4a69      	ldr	r2, [pc, #420]	@ (8003c18 <main+0x2db8>)
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003a7a:	fb01 f303 	mul.w	r3, r1, r3
 8003a7e:	4413      	add	r3, r2
 8003a80:	f203 23ef 	addw	r3, r3, #751	@ 0x2ef
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d01a      	beq.n	8003ac0 <main+0x2c60>
 8003a8a:	4a63      	ldr	r2, [pc, #396]	@ (8003c18 <main+0x2db8>)
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003a92:	fb01 f303 	mul.w	r3, r1, r3
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	f083 0301 	eor.w	r3, r3, #1
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00b      	beq.n	8003ac0 <main+0x2c60>
	  						Node[k].SubStates_Power_Disabled=1;
 8003aa8:	4a5b      	ldr	r2, [pc, #364]	@ (8003c18 <main+0x2db8>)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003ab0:	fb01 f303 	mul.w	r3, r1, r3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f203 331f 	addw	r3, r3, #799	@ 0x31f
 8003aba:	2201      	movs	r2, #1
 8003abc:	701a      	strb	r2, [r3, #0]
 8003abe:	e015      	b.n	8003aec <main+0x2c8c>
	  						Node[k].Hight_Level_State=1;
 8003ac0:	4a55      	ldr	r2, [pc, #340]	@ (8003c18 <main+0x2db8>)
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003ac8:	fb01 f303 	mul.w	r3, r1, r3
 8003acc:	4413      	add	r3, r2
 8003ace:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	701a      	strb	r2, [r3, #0]
	  						Node[k].SubStates_Power_Enabled=-1;
 8003ad6:	4a50      	ldr	r2, [pc, #320]	@ (8003c18 <main+0x2db8>)
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003ade:	fb01 f303 	mul.w	r3, r1, r3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f203 3321 	addw	r3, r3, #801	@ 0x321
 8003ae8:	22ff      	movs	r2, #255	@ 0xff
 8003aea:	701a      	strb	r2, [r3, #0]
	  					if(Node[k].SubStates_Fault!=-1){
 8003aec:	4a4a      	ldr	r2, [pc, #296]	@ (8003c18 <main+0x2db8>)
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003af4:	fb01 f303 	mul.w	r3, r1, r3
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8003afe:	f993 3000 	ldrsb.w	r3, [r3]
 8003b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b06:	d00d      	beq.n	8003b24 <main+0x2cc4>
	  						Node[k].Hight_Level_State=2;
 8003b08:	4a43      	ldr	r2, [pc, #268]	@ (8003c18 <main+0x2db8>)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	4413      	add	r3, r2
 8003b16:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	701a      	strb	r2, [r3, #0]
	  					break;
 8003b1e:	e001      	b.n	8003b24 <main+0x2cc4>

	  				case 1:	//ready to switch on che puo transitare con 3-switch on e 7
	  					//7 transizione possibile sia con un coman{ di Disable_voltage  che di Quick_Stop


	  					break;
 8003b20:	bf00      	nop
 8003b22:	e244      	b.n	8003fae <main+0x314e>
	  					break;
 8003b24:	bf00      	nop


	  			}
	  			break;
 8003b26:	e242      	b.n	8003fae <main+0x314e>
	  		case 2://SubStates_Fault
	  			switch (Node[k].SubStates_Fault) {
 8003b28:	4a3b      	ldr	r2, [pc, #236]	@ (8003c18 <main+0x2db8>)
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003b30:	fb01 f303 	mul.w	r3, r1, r3
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8003b3a:	f993 3000 	ldrsb.w	r3, [r3]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <main+0x2ce8>
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d06a      	beq.n	8003c1c <main+0x2dbc>
	  					break;



	  			}
	  			break;
 8003b46:	e235      	b.n	8003fb4 <main+0x3154>
	  					if(Node[k].StatusWord_bool[0]==0 && Node[k].StatusWord_bool[1]==0 && Node[k].StatusWord_bool[2]==0 && Node[k].StatusWord_bool[3]==1 && Node[k].StatusWord_bool[5]==0 && Node[k].StatusWord_bool[6]==0){
 8003b48:	4a33      	ldr	r2, [pc, #204]	@ (8003c18 <main+0x2db8>)
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003b50:	fb01 f303 	mul.w	r3, r1, r3
 8003b54:	4413      	add	r3, r2
 8003b56:	f203 23ea 	addw	r3, r3, #746	@ 0x2ea
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	f083 0301 	eor.w	r3, r3, #1
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 80b9 	beq.w	8003cda <main+0x2e7a>
 8003b68:	4a2b      	ldr	r2, [pc, #172]	@ (8003c18 <main+0x2db8>)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003b70:	fb01 f303 	mul.w	r3, r1, r3
 8003b74:	4413      	add	r3, r2
 8003b76:	f203 23eb 	addw	r3, r3, #747	@ 0x2eb
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	f083 0301 	eor.w	r3, r3, #1
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 80a9 	beq.w	8003cda <main+0x2e7a>
 8003b88:	4a23      	ldr	r2, [pc, #140]	@ (8003c18 <main+0x2db8>)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003b90:	fb01 f303 	mul.w	r3, r1, r3
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	f083 0301 	eor.w	r3, r3, #1
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 8099 	beq.w	8003cda <main+0x2e7a>
 8003ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8003c18 <main+0x2db8>)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003bb0:	fb01 f303 	mul.w	r3, r1, r3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f203 23ed 	addw	r3, r3, #749	@ 0x2ed
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 808c 	beq.w	8003cda <main+0x2e7a>
 8003bc2:	4a15      	ldr	r2, [pc, #84]	@ (8003c18 <main+0x2db8>)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003bca:	fb01 f303 	mul.w	r3, r1, r3
 8003bce:	4413      	add	r3, r2
 8003bd0:	f203 23ef 	addw	r3, r3, #751	@ 0x2ef
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	f083 0301 	eor.w	r3, r3, #1
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d07c      	beq.n	8003cda <main+0x2e7a>
 8003be0:	4a0d      	ldr	r2, [pc, #52]	@ (8003c18 <main+0x2db8>)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003be8:	fb01 f303 	mul.w	r3, r1, r3
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	f083 0301 	eor.w	r3, r3, #1
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d06d      	beq.n	8003cda <main+0x2e7a>
	  						Node[k].SubStates_Fault=1;
 8003bfe:	4a06      	ldr	r2, [pc, #24]	@ (8003c18 <main+0x2db8>)
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003c06:	fb01 f303 	mul.w	r3, r1, r3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8003c10:	2201      	movs	r2, #1
 8003c12:	701a      	strb	r2, [r3, #0]
	  					break;
 8003c14:	e061      	b.n	8003cda <main+0x2e7a>
 8003c16:	bf00      	nop
 8003c18:	20000190 	.word	0x20000190
	  					if (Node[k].StatusWord_bool[0]==0 && Node[k].StatusWord_bool[1]==0 && Node[k].StatusWord_bool[2]==0 && Node[k].StatusWord_bool[3]==0 && Node[k].StatusWord_bool[6]==1) {
 8003c1c:	4a9a      	ldr	r2, [pc, #616]	@ (8003e88 <main+0x3028>)
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003c24:	fb01 f303 	mul.w	r3, r1, r3
 8003c28:	4413      	add	r3, r2
 8003c2a:	f203 23ea 	addw	r3, r3, #746	@ 0x2ea
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	f083 0301 	eor.w	r3, r3, #1
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d051      	beq.n	8003cde <main+0x2e7e>
 8003c3a:	4a93      	ldr	r2, [pc, #588]	@ (8003e88 <main+0x3028>)
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	f203 23eb 	addw	r3, r3, #747	@ 0x2eb
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	f083 0301 	eor.w	r3, r3, #1
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d042      	beq.n	8003cde <main+0x2e7e>
 8003c58:	4a8b      	ldr	r2, [pc, #556]	@ (8003e88 <main+0x3028>)
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	f083 0301 	eor.w	r3, r3, #1
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d033      	beq.n	8003cde <main+0x2e7e>
 8003c76:	4a84      	ldr	r2, [pc, #528]	@ (8003e88 <main+0x3028>)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003c7e:	fb01 f303 	mul.w	r3, r1, r3
 8003c82:	4413      	add	r3, r2
 8003c84:	f203 23ed 	addw	r3, r3, #749	@ 0x2ed
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	f083 0301 	eor.w	r3, r3, #1
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d024      	beq.n	8003cde <main+0x2e7e>
 8003c94:	4a7c      	ldr	r2, [pc, #496]	@ (8003e88 <main+0x3028>)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d018      	beq.n	8003cde <main+0x2e7e>
	  						Node[k].Hight_Level_State=0;
 8003cac:	4a76      	ldr	r2, [pc, #472]	@ (8003e88 <main+0x3028>)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003cb4:	fb01 f303 	mul.w	r3, r1, r3
 8003cb8:	4413      	add	r3, r2
 8003cba:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
	  						Node[k].SubStates_Power_Disabled=-1;
 8003cc2:	4a71      	ldr	r2, [pc, #452]	@ (8003e88 <main+0x3028>)
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003cca:	fb01 f303 	mul.w	r3, r1, r3
 8003cce:	4413      	add	r3, r2
 8003cd0:	f203 331f 	addw	r3, r3, #799	@ 0x31f
 8003cd4:	22ff      	movs	r2, #255	@ 0xff
 8003cd6:	701a      	strb	r2, [r3, #0]
	  					break;
 8003cd8:	e001      	b.n	8003cde <main+0x2e7e>
	  					break;
 8003cda:	bf00      	nop
 8003cdc:	e16a      	b.n	8003fb4 <main+0x3154>
	  					break;
 8003cde:	bf00      	nop
	  			break;
 8003ce0:	e168      	b.n	8003fb4 <main+0x3154>

	  		case 1://SubStates_Power_Enabled
	  			switch (Node[k].SubStates_Power_Enabled) {
 8003ce2:	4a69      	ldr	r2, [pc, #420]	@ (8003e88 <main+0x3028>)
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003cea:	fb01 f303 	mul.w	r3, r1, r3
 8003cee:	4413      	add	r3, r2
 8003cf0:	f203 3321 	addw	r3, r3, #801	@ 0x321
 8003cf4:	f993 3000 	ldrsb.w	r3, [r3]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	f200 8159 	bhi.w	8003fb2 <main+0x3152>
 8003d00:	a201      	add	r2, pc, #4	@ (adr r2, 8003d08 <main+0x2ea8>)
 8003d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d06:	bf00      	nop
 8003d08:	08003d19 	.word	0x08003d19
 8003d0c:	08003fa7 	.word	0x08003fa7
 8003d10:	08003fa7 	.word	0x08003fa7
 8003d14:	08003fa7 	.word	0x08003fa7
	  				case -1:
	  					if (Node[k].StatusWord_bool[0]==1 && Node[k].StatusWord_bool[1]==1 && Node[k].StatusWord_bool[2]==1 && Node[k].StatusWord_bool[3]==0 && Node[k].StatusWord_bool[5]==1 && Node[k].StatusWord_bool[6]==0) {
 8003d18:	4a5b      	ldr	r2, [pc, #364]	@ (8003e88 <main+0x3028>)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003d20:	fb01 f303 	mul.w	r3, r1, r3
 8003d24:	4413      	add	r3, r2
 8003d26:	f203 23ea 	addw	r3, r3, #746	@ 0x2ea
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d04d      	beq.n	8003dcc <main+0x2f6c>
 8003d30:	4a55      	ldr	r2, [pc, #340]	@ (8003e88 <main+0x3028>)
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003d38:	fb01 f303 	mul.w	r3, r1, r3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f203 23eb 	addw	r3, r3, #747	@ 0x2eb
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d041      	beq.n	8003dcc <main+0x2f6c>
 8003d48:	4a4f      	ldr	r2, [pc, #316]	@ (8003e88 <main+0x3028>)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003d50:	fb01 f303 	mul.w	r3, r1, r3
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d035      	beq.n	8003dcc <main+0x2f6c>
 8003d60:	4a49      	ldr	r2, [pc, #292]	@ (8003e88 <main+0x3028>)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f203 23ed 	addw	r3, r3, #749	@ 0x2ed
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	f083 0301 	eor.w	r3, r3, #1
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d026      	beq.n	8003dcc <main+0x2f6c>
 8003d7e:	4a42      	ldr	r2, [pc, #264]	@ (8003e88 <main+0x3028>)
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003d86:	fb01 f303 	mul.w	r3, r1, r3
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f203 23ef 	addw	r3, r3, #751	@ 0x2ef
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d01a      	beq.n	8003dcc <main+0x2f6c>
 8003d96:	4a3c      	ldr	r2, [pc, #240]	@ (8003e88 <main+0x3028>)
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	f083 0301 	eor.w	r3, r3, #1
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00b      	beq.n	8003dcc <main+0x2f6c>
	  						//terminazione a operation enabled
	  						//Node[k].state_motor_string='operation enabled';
	  						Node[k].SubStates_Power_Enabled=1;
 8003db4:	4a34      	ldr	r2, [pc, #208]	@ (8003e88 <main+0x3028>)
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003dbc:	fb01 f303 	mul.w	r3, r1, r3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f203 3321 	addw	r3, r3, #801	@ 0x321
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	701a      	strb	r2, [r3, #0]
 8003dca:	e0d2      	b.n	8003f72 <main+0x3112>
	  					}else if(Node[k].StatusWord_bool[0]==1 && Node[k].StatusWord_bool[1]==1 && Node[k].StatusWord_bool[2]==0 && Node[k].StatusWord_bool[3]==0 && Node[k].StatusWord_bool[5]==1 && Node[k].StatusWord_bool[6]==0) {
 8003dcc:	4a2e      	ldr	r2, [pc, #184]	@ (8003e88 <main+0x3028>)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003dd4:	fb01 f303 	mul.w	r3, r1, r3
 8003dd8:	4413      	add	r3, r2
 8003dda:	f203 23ea 	addw	r3, r3, #746	@ 0x2ea
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d053      	beq.n	8003e8c <main+0x302c>
 8003de4:	4a28      	ldr	r2, [pc, #160]	@ (8003e88 <main+0x3028>)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003dec:	fb01 f303 	mul.w	r3, r1, r3
 8003df0:	4413      	add	r3, r2
 8003df2:	f203 23eb 	addw	r3, r3, #747	@ 0x2eb
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d047      	beq.n	8003e8c <main+0x302c>
 8003dfc:	4a22      	ldr	r2, [pc, #136]	@ (8003e88 <main+0x3028>)
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003e04:	fb01 f303 	mul.w	r3, r1, r3
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	f083 0301 	eor.w	r3, r3, #1
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d038      	beq.n	8003e8c <main+0x302c>
 8003e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8003e88 <main+0x3028>)
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003e22:	fb01 f303 	mul.w	r3, r1, r3
 8003e26:	4413      	add	r3, r2
 8003e28:	f203 23ed 	addw	r3, r3, #749	@ 0x2ed
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	f083 0301 	eor.w	r3, r3, #1
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d029      	beq.n	8003e8c <main+0x302c>
 8003e38:	4a13      	ldr	r2, [pc, #76]	@ (8003e88 <main+0x3028>)
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003e40:	fb01 f303 	mul.w	r3, r1, r3
 8003e44:	4413      	add	r3, r2
 8003e46:	f203 23ef 	addw	r3, r3, #751	@ 0x2ef
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d01d      	beq.n	8003e8c <main+0x302c>
 8003e50:	4a0d      	ldr	r2, [pc, #52]	@ (8003e88 <main+0x3028>)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003e58:	fb01 f303 	mul.w	r3, r1, r3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	f083 0301 	eor.w	r3, r3, #1
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00e      	beq.n	8003e8c <main+0x302c>
	  						Node[k].SubStates_Power_Enabled=0;//terminazione a switched on
 8003e6e:	4a06      	ldr	r2, [pc, #24]	@ (8003e88 <main+0x3028>)
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003e76:	fb01 f303 	mul.w	r3, r1, r3
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f203 3321 	addw	r3, r3, #801	@ 0x321
 8003e80:	2200      	movs	r2, #0
 8003e82:	701a      	strb	r2, [r3, #0]
 8003e84:	e075      	b.n	8003f72 <main+0x3112>
 8003e86:	bf00      	nop
 8003e88:	20000190 	.word	0x20000190
	  						//Node[k].state_motor_string='switched_on';
	  					}else if(Node[k].StatusWord_bool[0]==1 && Node[k].StatusWord_bool[1]==1 && Node[k].StatusWord_bool[2]==1 && Node[k].StatusWord_bool[3]==0 && Node[k].StatusWord_bool[5]==0 && Node[k].StatusWord_bool[6]==0){
 8003e8c:	4abb      	ldr	r2, [pc, #748]	@ (800417c <main+0x331c>)
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003e94:	fb01 f303 	mul.w	r3, r1, r3
 8003e98:	4413      	add	r3, r2
 8003e9a:	f203 23ea 	addw	r3, r3, #746	@ 0x2ea
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d050      	beq.n	8003f46 <main+0x30e6>
 8003ea4:	4ab5      	ldr	r2, [pc, #724]	@ (800417c <main+0x331c>)
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003eac:	fb01 f303 	mul.w	r3, r1, r3
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f203 23eb 	addw	r3, r3, #747	@ 0x2eb
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d044      	beq.n	8003f46 <main+0x30e6>
 8003ebc:	4aaf      	ldr	r2, [pc, #700]	@ (800417c <main+0x331c>)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003ec4:	fb01 f303 	mul.w	r3, r1, r3
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d038      	beq.n	8003f46 <main+0x30e6>
 8003ed4:	4aa9      	ldr	r2, [pc, #676]	@ (800417c <main+0x331c>)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003edc:	fb01 f303 	mul.w	r3, r1, r3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f203 23ed 	addw	r3, r3, #749	@ 0x2ed
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	f083 0301 	eor.w	r3, r3, #1
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d029      	beq.n	8003f46 <main+0x30e6>
 8003ef2:	4aa2      	ldr	r2, [pc, #648]	@ (800417c <main+0x331c>)
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003efa:	fb01 f303 	mul.w	r3, r1, r3
 8003efe:	4413      	add	r3, r2
 8003f00:	f203 23ef 	addw	r3, r3, #751	@ 0x2ef
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	f083 0301 	eor.w	r3, r3, #1
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d01a      	beq.n	8003f46 <main+0x30e6>
 8003f10:	4a9a      	ldr	r2, [pc, #616]	@ (800417c <main+0x331c>)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003f18:	fb01 f303 	mul.w	r3, r1, r3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	f083 0301 	eor.w	r3, r3, #1
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00b      	beq.n	8003f46 <main+0x30e6>
	  						Node[k].SubStates_Power_Enabled=2;//terminazione a quick stop active
 8003f2e:	4a93      	ldr	r2, [pc, #588]	@ (800417c <main+0x331c>)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003f36:	fb01 f303 	mul.w	r3, r1, r3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f203 3321 	addw	r3, r3, #801	@ 0x321
 8003f40:	2202      	movs	r2, #2
 8003f42:	701a      	strb	r2, [r3, #0]
 8003f44:	e015      	b.n	8003f72 <main+0x3112>
	  						//Node[k].state_motor_string='quick_stop_active';
	  					}else{
	  						Node[k].Hight_Level_State=0;
 8003f46:	4a8d      	ldr	r2, [pc, #564]	@ (800417c <main+0x331c>)
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003f4e:	fb01 f303 	mul.w	r3, r1, r3
 8003f52:	4413      	add	r3, r2
 8003f54:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]
	  						//e poi forse altre cose
	  						Node[k].SubStates_Power_Disabled=-1;
 8003f5c:	4a87      	ldr	r2, [pc, #540]	@ (800417c <main+0x331c>)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003f64:	fb01 f303 	mul.w	r3, r1, r3
 8003f68:	4413      	add	r3, r2
 8003f6a:	f203 331f 	addw	r3, r3, #799	@ 0x31f
 8003f6e:	22ff      	movs	r2, #255	@ 0xff
 8003f70:	701a      	strb	r2, [r3, #0]
	  					}


	  					if(Node[k].SubStates_Fault!=-1){
 8003f72:	4a82      	ldr	r2, [pc, #520]	@ (800417c <main+0x331c>)
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003f7a:	fb01 f303 	mul.w	r3, r1, r3
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8003f84:	f993 3000 	ldrsb.w	r3, [r3]
 8003f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8c:	d00d      	beq.n	8003faa <main+0x314a>
	  						Node[k].Hight_Level_State=2;
 8003f8e:	4a7b      	ldr	r2, [pc, #492]	@ (800417c <main+0x331c>)
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003f96:	fb01 f303 	mul.w	r3, r1, r3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	701a      	strb	r2, [r3, #0]
	  						//e poi forse altre cose
	  						//state_motor_string='Power_disabled';
	  					}
	  					break;
 8003fa4:	e001      	b.n	8003faa <main+0x314a>

	  				case 0://switched on , possibili le transizioni in uscita 4,6



	  					break;
 8003fa6:	bf00      	nop
 8003fa8:	e003      	b.n	8003fb2 <main+0x3152>
	  					break;
 8003faa:	bf00      	nop
	  					//da verificare questa transizione puo essere automatica in alcuni contesti
	  					break;

	  				}

	  			break;
 8003fac:	e001      	b.n	8003fb2 <main+0x3152>
	  			break;
 8003fae:	bf00      	nop
 8003fb0:	e000      	b.n	8003fb4 <main+0x3154>
	  			break;
 8003fb2:	bf00      	nop
	  	}




	switch (Node[k].Mode_Of_Operation_State_Machine_Var)  {
 8003fb4:	4a71      	ldr	r2, [pc, #452]	@ (800417c <main+0x331c>)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003fbc:	fb01 f303 	mul.w	r3, r1, r3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f203 3322 	addw	r3, r3, #802	@ 0x322
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b06      	cmp	r3, #6
 8003fca:	f200 83a3 	bhi.w	8004714 <main+0x38b4>
 8003fce:	a201      	add	r2, pc, #4	@ (adr r2, 8003fd4 <main+0x3174>)
 8003fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd4:	08003ff1 	.word	0x08003ff1
 8003fd8:	08004253 	.word	0x08004253
 8003fdc:	08004715 	.word	0x08004715
 8003fe0:	0800453d 	.word	0x0800453d
 8003fe4:	08004715 	.word	0x08004715
 8003fe8:	08004715 	.word	0x08004715
 8003fec:	08004411 	.word	0x08004411
		case 0:
			Node[k].Homing_substates=-1;
 8003ff0:	4a62      	ldr	r2, [pc, #392]	@ (800417c <main+0x331c>)
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003ff8:	fb01 f303 	mul.w	r3, r1, r3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f203 3323 	addw	r3, r3, #803	@ 0x323
 8004002:	22ff      	movs	r2, #255	@ 0xff
 8004004:	701a      	strb	r2, [r3, #0]
			Node[k].Position_profile_substates=-1;
 8004006:	4a5d      	ldr	r2, [pc, #372]	@ (800417c <main+0x331c>)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800400e:	fb01 f303 	mul.w	r3, r1, r3
 8004012:	4413      	add	r3, r2
 8004014:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8004018:	22ff      	movs	r2, #255	@ 0xff
 800401a:	701a      	strb	r2, [r3, #0]
			Node[k].Velocity_profile_substates=-1;
 800401c:	4a57      	ldr	r2, [pc, #348]	@ (800417c <main+0x331c>)
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004024:	fb01 f303 	mul.w	r3, r1, r3
 8004028:	4413      	add	r3, r2
 800402a:	f203 3325 	addw	r3, r3, #805	@ 0x325
 800402e:	22ff      	movs	r2, #255	@ 0xff
 8004030:	701a      	strb	r2, [r3, #0]

				if(Node[k].Mode_Of_Operation_requested!=0){
 8004032:	4a52      	ldr	r2, [pc, #328]	@ (800417c <main+0x331c>)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800403a:	fb01 f303 	mul.w	r3, r1, r3
 800403e:	4413      	add	r3, r2
 8004040:	f203 3336 	addw	r3, r3, #822	@ 0x336
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d032      	beq.n	80040b0 <main+0x3250>
					Node[k].Mode_of_operation_out=Node[k].Mode_Of_Operation_requested;//provvisiorio
 800404a:	4a4c      	ldr	r2, [pc, #304]	@ (800417c <main+0x331c>)
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004052:	fb01 f303 	mul.w	r3, r1, r3
 8004056:	4413      	add	r3, r2
 8004058:	f203 3336 	addw	r3, r3, #822	@ 0x336
 800405c:	7818      	ldrb	r0, [r3, #0]
 800405e:	4a47      	ldr	r2, [pc, #284]	@ (800417c <main+0x331c>)
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004066:	fb01 f303 	mul.w	r3, r1, r3
 800406a:	4413      	add	r3, r2
 800406c:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8004070:	4602      	mov	r2, r0
 8004072:	701a      	strb	r2, [r3, #0]
				}else{
					Node[k].Mode_Of_Operation_requested=Node[k].Mode_of_operation;
					Node[k].Mode_Of_Operation_State_Machine_Var=Node[k].Mode_of_operation;
					break;
				}
				switch (Node[k].Mode_of_operation) {//qui si aggiorna di conseguenza e quando lo si ritenen opportuno l'output della Mode_Of_Operation_out
 8004074:	4a41      	ldr	r2, [pc, #260]	@ (800417c <main+0x331c>)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800407c:	fb01 f303 	mul.w	r3, r1, r3
 8004080:	4413      	add	r3, r2
 8004082:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b06      	cmp	r3, #6
 800408a:	f200 80b5 	bhi.w	80041f8 <main+0x3398>
 800408e:	a201      	add	r2, pc, #4	@ (adr r2, 8004094 <main+0x3234>)
 8004090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004094:	08004107 	.word	0x08004107
 8004098:	08004141 	.word	0x08004141
 800409c:	080041f9 	.word	0x080041f9
 80040a0:	08004181 	.word	0x08004181
 80040a4:	080041f9 	.word	0x080041f9
 80040a8:	080041f9 	.word	0x080041f9
 80040ac:	080041bd 	.word	0x080041bd
					Node[k].Mode_Of_Operation_requested=Node[k].Mode_of_operation;
 80040b0:	4a32      	ldr	r2, [pc, #200]	@ (800417c <main+0x331c>)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80040b8:	fb01 f303 	mul.w	r3, r1, r3
 80040bc:	4413      	add	r3, r2
 80040be:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 80040c2:	7818      	ldrb	r0, [r3, #0]
 80040c4:	4a2d      	ldr	r2, [pc, #180]	@ (800417c <main+0x331c>)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80040cc:	fb01 f303 	mul.w	r3, r1, r3
 80040d0:	4413      	add	r3, r2
 80040d2:	f203 3336 	addw	r3, r3, #822	@ 0x336
 80040d6:	4602      	mov	r2, r0
 80040d8:	701a      	strb	r2, [r3, #0]
					Node[k].Mode_Of_Operation_State_Machine_Var=Node[k].Mode_of_operation;
 80040da:	4a28      	ldr	r2, [pc, #160]	@ (800417c <main+0x331c>)
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80040e2:	fb01 f303 	mul.w	r3, r1, r3
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 80040ec:	7818      	ldrb	r0, [r3, #0]
 80040ee:	4a23      	ldr	r2, [pc, #140]	@ (800417c <main+0x331c>)
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80040f6:	fb01 f303 	mul.w	r3, r1, r3
 80040fa:	4413      	add	r3, r2
 80040fc:	f203 3322 	addw	r3, r3, #802	@ 0x322
 8004100:	4602      	mov	r2, r0
 8004102:	701a      	strb	r2, [r3, #0]
					break;
 8004104:	e300      	b.n	8004708 <main+0x38a8>
				case 0:
					switch (Node[k].Mode_Of_Operation_requested) {
 8004106:	4a1d      	ldr	r2, [pc, #116]	@ (800417c <main+0x331c>)
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800410e:	fb01 f303 	mul.w	r3, r1, r3
 8004112:	4413      	add	r3, r2
 8004114:	f203 3336 	addw	r3, r3, #822	@ 0x336
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b06      	cmp	r3, #6
 800411c:	d810      	bhi.n	8004140 <main+0x32e0>
 800411e:	a201      	add	r2, pc, #4	@ (adr r2, 8004124 <main+0x32c4>)
 8004120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004124:	08004141 	.word	0x08004141
 8004128:	08004141 	.word	0x08004141
 800412c:	08004141 	.word	0x08004141
 8004130:	08004141 	.word	0x08004141
 8004134:	08004141 	.word	0x08004141
 8004138:	08004141 	.word	0x08004141
 800413c:	08004141 	.word	0x08004141


					}

				case 1:
					switch (Node[k].Mode_Of_Operation_requested) {
 8004140:	4a0e      	ldr	r2, [pc, #56]	@ (800417c <main+0x331c>)
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	4413      	add	r3, r2
 800414e:	f203 3336 	addw	r3, r3, #822	@ 0x336
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b06      	cmp	r3, #6
 8004156:	d813      	bhi.n	8004180 <main+0x3320>
 8004158:	a201      	add	r2, pc, #4	@ (adr r2, 8004160 <main+0x3300>)
 800415a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415e:	bf00      	nop
 8004160:	08004181 	.word	0x08004181
 8004164:	08004181 	.word	0x08004181
 8004168:	08004181 	.word	0x08004181
 800416c:	08004181 	.word	0x08004181
 8004170:	08004181 	.word	0x08004181
 8004174:	08004181 	.word	0x08004181
 8004178:	08004181 	.word	0x08004181
 800417c:	20000190 	.word	0x20000190

						break;
					}

				case 3:
					switch (Node[k].Mode_Of_Operation_requested) {
 8004180:	4abf      	ldr	r2, [pc, #764]	@ (8004480 <main+0x3620>)
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004188:	fb01 f303 	mul.w	r3, r1, r3
 800418c:	4413      	add	r3, r2
 800418e:	f203 3336 	addw	r3, r3, #822	@ 0x336
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b06      	cmp	r3, #6
 8004196:	d811      	bhi.n	80041bc <main+0x335c>
 8004198:	a201      	add	r2, pc, #4	@ (adr r2, 80041a0 <main+0x3340>)
 800419a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419e:	bf00      	nop
 80041a0:	080041bd 	.word	0x080041bd
 80041a4:	080041bd 	.word	0x080041bd
 80041a8:	080041bd 	.word	0x080041bd
 80041ac:	080041bd 	.word	0x080041bd
 80041b0:	080041bd 	.word	0x080041bd
 80041b4:	080041bd 	.word	0x080041bd
 80041b8:	080041bd 	.word	0x080041bd
						break;

					}

				case 6:
					switch (Node[k].Mode_Of_Operation_requested) {
 80041bc:	4ab0      	ldr	r2, [pc, #704]	@ (8004480 <main+0x3620>)
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80041c4:	fb01 f303 	mul.w	r3, r1, r3
 80041c8:	4413      	add	r3, r2
 80041ca:	f203 3336 	addw	r3, r3, #822	@ 0x336
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b06      	cmp	r3, #6
 80041d2:	d811      	bhi.n	80041f8 <main+0x3398>
 80041d4:	a201      	add	r2, pc, #4	@ (adr r2, 80041dc <main+0x337c>)
 80041d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041da:	bf00      	nop
 80041dc:	080041f9 	.word	0x080041f9
 80041e0:	080041f9 	.word	0x080041f9
 80041e4:	080041f9 	.word	0x080041f9
 80041e8:	080041f9 	.word	0x080041f9
 80041ec:	080041f9 	.word	0x080041f9
 80041f0:	080041f9 	.word	0x080041f9
 80041f4:	080041f9 	.word	0x080041f9

					}


				}
			if(Node[k].Mode_Of_Operation_State_Machine_Var!=Node[k].Mode_of_operation){//questo è il gate di uscite, in npratica è la risposta a tutto il ciclo che segue, perche una volta caricato il mode of op out, questo legge quelo in e fa transitare la state machine
 80041f8:	4aa1      	ldr	r2, [pc, #644]	@ (8004480 <main+0x3620>)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004200:	fb01 f303 	mul.w	r3, r1, r3
 8004204:	4413      	add	r3, r2
 8004206:	f203 3322 	addw	r3, r3, #802	@ 0x322
 800420a:	781a      	ldrb	r2, [r3, #0]
 800420c:	499c      	ldr	r1, [pc, #624]	@ (8004480 <main+0x3620>)
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8004214:	fb00 f303 	mul.w	r3, r0, r3
 8004218:	440b      	add	r3, r1
 800421a:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	f000 826a 	beq.w	80046fa <main+0x389a>
				Node[k].Mode_Of_Operation_State_Machine_Var=Node[k].Mode_of_operation;
 8004226:	4a96      	ldr	r2, [pc, #600]	@ (8004480 <main+0x3620>)
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800422e:	fb01 f303 	mul.w	r3, r1, r3
 8004232:	4413      	add	r3, r2
 8004234:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8004238:	7818      	ldrb	r0, [r3, #0]
 800423a:	4a91      	ldr	r2, [pc, #580]	@ (8004480 <main+0x3620>)
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004242:	fb01 f303 	mul.w	r3, r1, r3
 8004246:	4413      	add	r3, r2
 8004248:	f203 3322 	addw	r3, r3, #802	@ 0x322
 800424c:	4602      	mov	r2, r0
 800424e:	701a      	strb	r2, [r3, #0]
			}


		break;
 8004250:	e253      	b.n	80046fa <main+0x389a>
		case 1://position

			if (Node[k].Mode_Of_Operation_requested!=Node[k].Mode_Of_Operation_State_Machine_Var){
 8004252:	4a8b      	ldr	r2, [pc, #556]	@ (8004480 <main+0x3620>)
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800425a:	fb01 f303 	mul.w	r3, r1, r3
 800425e:	4413      	add	r3, r2
 8004260:	f203 3336 	addw	r3, r3, #822	@ 0x336
 8004264:	781a      	ldrb	r2, [r3, #0]
 8004266:	4986      	ldr	r1, [pc, #536]	@ (8004480 <main+0x3620>)
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 800426e:	fb00 f303 	mul.w	r3, r0, r3
 8004272:	440b      	add	r3, r1
 8004274:	f203 3322 	addw	r3, r3, #802	@ 0x322
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d00a      	beq.n	8004294 <main+0x3434>
				Node[k].Mode_Of_Operation_State_Machine_Var=0;
 800427e:	4a80      	ldr	r2, [pc, #512]	@ (8004480 <main+0x3620>)
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004286:	fb01 f303 	mul.w	r3, r1, r3
 800428a:	4413      	add	r3, r2
 800428c:	f203 3322 	addw	r3, r3, #802	@ 0x322
 8004290:	2200      	movs	r2, #0
 8004292:	701a      	strb	r2, [r3, #0]
			}

			switch (Node[k].Position_profile_substates) {
 8004294:	4a7a      	ldr	r2, [pc, #488]	@ (8004480 <main+0x3620>)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800429c:	fb01 f303 	mul.w	r3, r1, r3
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 80042a6:	f993 3000 	ldrsb.w	r3, [r3]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d06d      	beq.n	800438a <main+0x352a>
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	f300 8225 	bgt.w	80046fe <main+0x389e>
 80042b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b8:	d002      	beq.n	80042c0 <main+0x3460>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d028      	beq.n	8004310 <main+0x34b0>
					if(Node[k].Actual_Velocity_encoder==0){
						Node[k].Position_profile_substates=0;
					}
				break;
			}
		break;
 80042be:	e21e      	b.n	80046fe <main+0x389e>
					if(Node[k].Hight_Level_State==1 && Node[k].SubStates_Power_Enabled==1){
 80042c0:	4a6f      	ldr	r2, [pc, #444]	@ (8004480 <main+0x3620>)
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80042c8:	fb01 f303 	mul.w	r3, r1, r3
 80042cc:	4413      	add	r3, r2
 80042ce:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 80042d2:	f993 3000 	ldrsb.w	r3, [r3]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	f040 8094 	bne.w	8004404 <main+0x35a4>
 80042dc:	4a68      	ldr	r2, [pc, #416]	@ (8004480 <main+0x3620>)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80042e4:	fb01 f303 	mul.w	r3, r1, r3
 80042e8:	4413      	add	r3, r2
 80042ea:	f203 3321 	addw	r3, r3, #801	@ 0x321
 80042ee:	f993 3000 	ldrsb.w	r3, [r3]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	f040 8086 	bne.w	8004404 <main+0x35a4>
						Node[k].Position_profile_substates=0;
 80042f8:	4a61      	ldr	r2, [pc, #388]	@ (8004480 <main+0x3620>)
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004300:	fb01 f303 	mul.w	r3, r1, r3
 8004304:	4413      	add	r3, r2
 8004306:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 800430a:	2200      	movs	r2, #0
 800430c:	701a      	strb	r2, [r3, #0]
				break;
 800430e:	e079      	b.n	8004404 <main+0x35a4>
					if(Node[k].Hight_Level_State!=1 && Node[k].SubStates_Power_Enabled!=1){
 8004310:	4a5b      	ldr	r2, [pc, #364]	@ (8004480 <main+0x3620>)
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004318:	fb01 f303 	mul.w	r3, r1, r3
 800431c:	4413      	add	r3, r2
 800431e:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8004322:	f993 3000 	ldrsb.w	r3, [r3]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d017      	beq.n	800435a <main+0x34fa>
 800432a:	4a55      	ldr	r2, [pc, #340]	@ (8004480 <main+0x3620>)
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004332:	fb01 f303 	mul.w	r3, r1, r3
 8004336:	4413      	add	r3, r2
 8004338:	f203 3321 	addw	r3, r3, #801	@ 0x321
 800433c:	f993 3000 	ldrsb.w	r3, [r3]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d00a      	beq.n	800435a <main+0x34fa>
						Node[k].Position_profile_substates=-1;
 8004344:	4a4e      	ldr	r2, [pc, #312]	@ (8004480 <main+0x3620>)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800434c:	fb01 f303 	mul.w	r3, r1, r3
 8004350:	4413      	add	r3, r2
 8004352:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8004356:	22ff      	movs	r2, #255	@ 0xff
 8004358:	701a      	strb	r2, [r3, #0]
					if(Node[k].Actual_Velocity_encoder!=0){
 800435a:	4a49      	ldr	r2, [pc, #292]	@ (8004480 <main+0x3620>)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004362:	fb01 f303 	mul.w	r3, r1, r3
 8004366:	4413      	add	r3, r2
 8004368:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d04a      	beq.n	8004408 <main+0x35a8>
						Node[k].Position_profile_substates=1;
 8004372:	4a43      	ldr	r2, [pc, #268]	@ (8004480 <main+0x3620>)
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800437a:	fb01 f303 	mul.w	r3, r1, r3
 800437e:	4413      	add	r3, r2
 8004380:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8004384:	2201      	movs	r2, #1
 8004386:	701a      	strb	r2, [r3, #0]
				break;
 8004388:	e03e      	b.n	8004408 <main+0x35a8>
					if(Node[k].Hight_Level_State!=1 && Node[k].SubStates_Power_Enabled!=1){
 800438a:	4a3d      	ldr	r2, [pc, #244]	@ (8004480 <main+0x3620>)
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004392:	fb01 f303 	mul.w	r3, r1, r3
 8004396:	4413      	add	r3, r2
 8004398:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 800439c:	f993 3000 	ldrsb.w	r3, [r3]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d017      	beq.n	80043d4 <main+0x3574>
 80043a4:	4a36      	ldr	r2, [pc, #216]	@ (8004480 <main+0x3620>)
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80043ac:	fb01 f303 	mul.w	r3, r1, r3
 80043b0:	4413      	add	r3, r2
 80043b2:	f203 3321 	addw	r3, r3, #801	@ 0x321
 80043b6:	f993 3000 	ldrsb.w	r3, [r3]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d00a      	beq.n	80043d4 <main+0x3574>
						Node[k].Position_profile_substates=-1;
 80043be:	4a30      	ldr	r2, [pc, #192]	@ (8004480 <main+0x3620>)
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80043c6:	fb01 f303 	mul.w	r3, r1, r3
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 80043d0:	22ff      	movs	r2, #255	@ 0xff
 80043d2:	701a      	strb	r2, [r3, #0]
					if(Node[k].Actual_Velocity_encoder==0){
 80043d4:	4a2a      	ldr	r2, [pc, #168]	@ (8004480 <main+0x3620>)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80043dc:	fb01 f303 	mul.w	r3, r1, r3
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10f      	bne.n	800440c <main+0x35ac>
						Node[k].Position_profile_substates=0;
 80043ec:	4a24      	ldr	r2, [pc, #144]	@ (8004480 <main+0x3620>)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 80043fe:	2200      	movs	r2, #0
 8004400:	701a      	strb	r2, [r3, #0]
				break;
 8004402:	e003      	b.n	800440c <main+0x35ac>
				break;
 8004404:	bf00      	nop
 8004406:	e17a      	b.n	80046fe <main+0x389e>
				break;
 8004408:	bf00      	nop
 800440a:	e178      	b.n	80046fe <main+0x389e>
				break;
 800440c:	bf00      	nop
		break;
 800440e:	e176      	b.n	80046fe <main+0x389e>



		case 6://homing mode
			if (Node[k].Mode_Of_Operation_requested!=Node[k].Mode_Of_Operation_State_Machine_Var){
 8004410:	4a1b      	ldr	r2, [pc, #108]	@ (8004480 <main+0x3620>)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004418:	fb01 f303 	mul.w	r3, r1, r3
 800441c:	4413      	add	r3, r2
 800441e:	f203 3336 	addw	r3, r3, #822	@ 0x336
 8004422:	781a      	ldrb	r2, [r3, #0]
 8004424:	4916      	ldr	r1, [pc, #88]	@ (8004480 <main+0x3620>)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 800442c:	fb00 f303 	mul.w	r3, r0, r3
 8004430:	440b      	add	r3, r1
 8004432:	f203 3322 	addw	r3, r3, #802	@ 0x322
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d00a      	beq.n	8004452 <main+0x35f2>
				Node[k].Mode_Of_Operation_State_Machine_Var=0;
 800443c:	4a10      	ldr	r2, [pc, #64]	@ (8004480 <main+0x3620>)
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004444:	fb01 f303 	mul.w	r3, r1, r3
 8004448:	4413      	add	r3, r2
 800444a:	f203 3322 	addw	r3, r3, #802	@ 0x322
 800444e:	2200      	movs	r2, #0
 8004450:	701a      	strb	r2, [r3, #0]
			}


			switch (Node[k].Homing_substates) {
 8004452:	4a0b      	ldr	r2, [pc, #44]	@ (8004480 <main+0x3620>)
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800445a:	fb01 f303 	mul.w	r3, r1, r3
 800445e:	4413      	add	r3, r2
 8004460:	f203 3323 	addw	r3, r3, #803	@ 0x323
 8004464:	f993 3000 	ldrsb.w	r3, [r3]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d049      	beq.n	8004500 <main+0x36a0>
 800446c:	2b01      	cmp	r3, #1
 800446e:	f300 8148 	bgt.w	8004702 <main+0x38a2>
 8004472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004476:	d005      	beq.n	8004484 <main+0x3624>
 8004478:	2b00      	cmp	r3, #0
 800447a:	d029      	beq.n	80044d0 <main+0x3670>
					if(Node[k].Actual_Velocity_encoder==0){
						Node[k].Position_profile_substates=0;
					}
				break;
			}
			break;
 800447c:	e141      	b.n	8004702 <main+0x38a2>
 800447e:	bf00      	nop
 8004480:	20000190 	.word	0x20000190
					if(Node[k].Hight_Level_State==1 && Node[k].SubStates_Power_Enabled==1){
 8004484:	4aa2      	ldr	r2, [pc, #648]	@ (8004710 <main+0x38b0>)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800448c:	fb01 f303 	mul.w	r3, r1, r3
 8004490:	4413      	add	r3, r2
 8004492:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8004496:	f993 3000 	ldrsb.w	r3, [r3]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d148      	bne.n	8004530 <main+0x36d0>
 800449e:	4a9c      	ldr	r2, [pc, #624]	@ (8004710 <main+0x38b0>)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80044a6:	fb01 f303 	mul.w	r3, r1, r3
 80044aa:	4413      	add	r3, r2
 80044ac:	f203 3321 	addw	r3, r3, #801	@ 0x321
 80044b0:	f993 3000 	ldrsb.w	r3, [r3]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d13b      	bne.n	8004530 <main+0x36d0>
						Node[k].Homing_substates=0;
 80044b8:	4a95      	ldr	r2, [pc, #596]	@ (8004710 <main+0x38b0>)
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80044c0:	fb01 f303 	mul.w	r3, r1, r3
 80044c4:	4413      	add	r3, r2
 80044c6:	f203 3323 	addw	r3, r3, #803	@ 0x323
 80044ca:	2200      	movs	r2, #0
 80044cc:	701a      	strb	r2, [r3, #0]
				break;
 80044ce:	e02f      	b.n	8004530 <main+0x36d0>
					if(Node[k].Actual_Velocity_encoder!=0){
 80044d0:	4a8f      	ldr	r2, [pc, #572]	@ (8004710 <main+0x38b0>)
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80044d8:	fb01 f303 	mul.w	r3, r1, r3
 80044dc:	4413      	add	r3, r2
 80044de:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d025      	beq.n	8004534 <main+0x36d4>
						Node[k].Position_profile_substates=1;
 80044e8:	4a89      	ldr	r2, [pc, #548]	@ (8004710 <main+0x38b0>)
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80044f0:	fb01 f303 	mul.w	r3, r1, r3
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 80044fa:	2201      	movs	r2, #1
 80044fc:	701a      	strb	r2, [r3, #0]
				break;
 80044fe:	e019      	b.n	8004534 <main+0x36d4>
					if(Node[k].Actual_Velocity_encoder==0){
 8004500:	4a83      	ldr	r2, [pc, #524]	@ (8004710 <main+0x38b0>)
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	4413      	add	r3, r2
 800450e:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10f      	bne.n	8004538 <main+0x36d8>
						Node[k].Position_profile_substates=0;
 8004518:	4a7d      	ldr	r2, [pc, #500]	@ (8004710 <main+0x38b0>)
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004520:	fb01 f303 	mul.w	r3, r1, r3
 8004524:	4413      	add	r3, r2
 8004526:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 800452a:	2200      	movs	r2, #0
 800452c:	701a      	strb	r2, [r3, #0]
				break;
 800452e:	e003      	b.n	8004538 <main+0x36d8>
				break;
 8004530:	bf00      	nop
 8004532:	e0e6      	b.n	8004702 <main+0x38a2>
				break;
 8004534:	bf00      	nop
 8004536:	e0e4      	b.n	8004702 <main+0x38a2>
				break;
 8004538:	bf00      	nop
			break;
 800453a:	e0e2      	b.n	8004702 <main+0x38a2>


			case 3://velocity
					//va implementata(o adirittura sostituita al passaggio della elaborated speed) la gestione dei bit 10, 11....13 della status word
						if (Node[k].Mode_Of_Operation_requested!=Node[k].Mode_Of_Operation_State_Machine_Var){
 800453c:	4a74      	ldr	r2, [pc, #464]	@ (8004710 <main+0x38b0>)
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004544:	fb01 f303 	mul.w	r3, r1, r3
 8004548:	4413      	add	r3, r2
 800454a:	f203 3336 	addw	r3, r3, #822	@ 0x336
 800454e:	781a      	ldrb	r2, [r3, #0]
 8004550:	496f      	ldr	r1, [pc, #444]	@ (8004710 <main+0x38b0>)
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8004558:	fb00 f303 	mul.w	r3, r0, r3
 800455c:	440b      	add	r3, r1
 800455e:	f203 3322 	addw	r3, r3, #802	@ 0x322
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d00a      	beq.n	800457e <main+0x371e>
							Node[k].Mode_Of_Operation_State_Machine_Var=0;
 8004568:	4a69      	ldr	r2, [pc, #420]	@ (8004710 <main+0x38b0>)
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004570:	fb01 f303 	mul.w	r3, r1, r3
 8004574:	4413      	add	r3, r2
 8004576:	f203 3322 	addw	r3, r3, #802	@ 0x322
 800457a:	2200      	movs	r2, #0
 800457c:	701a      	strb	r2, [r3, #0]
						}

						switch (Node[k].Velocity_profile_substates) {
 800457e:	4a64      	ldr	r2, [pc, #400]	@ (8004710 <main+0x38b0>)
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004586:	fb01 f303 	mul.w	r3, r1, r3
 800458a:	4413      	add	r3, r2
 800458c:	f203 3325 	addw	r3, r3, #805	@ 0x325
 8004590:	f993 3000 	ldrsb.w	r3, [r3]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d06d      	beq.n	8004674 <main+0x3814>
 8004598:	2b01      	cmp	r3, #1
 800459a:	f300 80b4 	bgt.w	8004706 <main+0x38a6>
 800459e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a2:	d002      	beq.n	80045aa <main+0x374a>
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d028      	beq.n	80045fa <main+0x379a>
								if(Node[k].Actual_Velocity_encoder==0){
									Node[k].Velocity_profile_substates=0;
								}
							break;
						}
						break;
 80045a8:	e0ad      	b.n	8004706 <main+0x38a6>
								if(Node[k].Hight_Level_State==1 && Node[k].SubStates_Power_Enabled==1){
 80045aa:	4a59      	ldr	r2, [pc, #356]	@ (8004710 <main+0x38b0>)
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80045b2:	fb01 f303 	mul.w	r3, r1, r3
 80045b6:	4413      	add	r3, r2
 80045b8:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 80045bc:	f993 3000 	ldrsb.w	r3, [r3]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	f040 8094 	bne.w	80046ee <main+0x388e>
 80045c6:	4a52      	ldr	r2, [pc, #328]	@ (8004710 <main+0x38b0>)
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80045ce:	fb01 f303 	mul.w	r3, r1, r3
 80045d2:	4413      	add	r3, r2
 80045d4:	f203 3321 	addw	r3, r3, #801	@ 0x321
 80045d8:	f993 3000 	ldrsb.w	r3, [r3]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	f040 8086 	bne.w	80046ee <main+0x388e>
									Node[k].Velocity_profile_substates=0;
 80045e2:	4a4b      	ldr	r2, [pc, #300]	@ (8004710 <main+0x38b0>)
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80045ea:	fb01 f303 	mul.w	r3, r1, r3
 80045ee:	4413      	add	r3, r2
 80045f0:	f203 3325 	addw	r3, r3, #805	@ 0x325
 80045f4:	2200      	movs	r2, #0
 80045f6:	701a      	strb	r2, [r3, #0]
							break;
 80045f8:	e079      	b.n	80046ee <main+0x388e>
								if(Node[k].Hight_Level_State!=1 && Node[k].SubStates_Power_Enabled!=1){
 80045fa:	4a45      	ldr	r2, [pc, #276]	@ (8004710 <main+0x38b0>)
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004602:	fb01 f303 	mul.w	r3, r1, r3
 8004606:	4413      	add	r3, r2
 8004608:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 800460c:	f993 3000 	ldrsb.w	r3, [r3]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d017      	beq.n	8004644 <main+0x37e4>
 8004614:	4a3e      	ldr	r2, [pc, #248]	@ (8004710 <main+0x38b0>)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800461c:	fb01 f303 	mul.w	r3, r1, r3
 8004620:	4413      	add	r3, r2
 8004622:	f203 3321 	addw	r3, r3, #801	@ 0x321
 8004626:	f993 3000 	ldrsb.w	r3, [r3]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d00a      	beq.n	8004644 <main+0x37e4>
									Node[k].Velocity_profile_substates=-1;
 800462e:	4a38      	ldr	r2, [pc, #224]	@ (8004710 <main+0x38b0>)
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004636:	fb01 f303 	mul.w	r3, r1, r3
 800463a:	4413      	add	r3, r2
 800463c:	f203 3325 	addw	r3, r3, #805	@ 0x325
 8004640:	22ff      	movs	r2, #255	@ 0xff
 8004642:	701a      	strb	r2, [r3, #0]
								if(Node[k].Actual_Velocity_encoder!=0){
 8004644:	4a32      	ldr	r2, [pc, #200]	@ (8004710 <main+0x38b0>)
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800464c:	fb01 f303 	mul.w	r3, r1, r3
 8004650:	4413      	add	r3, r2
 8004652:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d04a      	beq.n	80046f2 <main+0x3892>
									Node[k].Velocity_profile_substates=1;
 800465c:	4a2c      	ldr	r2, [pc, #176]	@ (8004710 <main+0x38b0>)
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004664:	fb01 f303 	mul.w	r3, r1, r3
 8004668:	4413      	add	r3, r2
 800466a:	f203 3325 	addw	r3, r3, #805	@ 0x325
 800466e:	2201      	movs	r2, #1
 8004670:	701a      	strb	r2, [r3, #0]
							break;
 8004672:	e03e      	b.n	80046f2 <main+0x3892>
								if(Node[k].Hight_Level_State!=1 && Node[k].SubStates_Power_Enabled!=1){
 8004674:	4a26      	ldr	r2, [pc, #152]	@ (8004710 <main+0x38b0>)
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	4413      	add	r3, r2
 8004682:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8004686:	f993 3000 	ldrsb.w	r3, [r3]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d017      	beq.n	80046be <main+0x385e>
 800468e:	4a20      	ldr	r2, [pc, #128]	@ (8004710 <main+0x38b0>)
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004696:	fb01 f303 	mul.w	r3, r1, r3
 800469a:	4413      	add	r3, r2
 800469c:	f203 3321 	addw	r3, r3, #801	@ 0x321
 80046a0:	f993 3000 	ldrsb.w	r3, [r3]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d00a      	beq.n	80046be <main+0x385e>
									Node[k].Position_profile_substates=-1;
 80046a8:	4a19      	ldr	r2, [pc, #100]	@ (8004710 <main+0x38b0>)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80046b0:	fb01 f303 	mul.w	r3, r1, r3
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 80046ba:	22ff      	movs	r2, #255	@ 0xff
 80046bc:	701a      	strb	r2, [r3, #0]
								if(Node[k].Actual_Velocity_encoder==0){
 80046be:	4a14      	ldr	r2, [pc, #80]	@ (8004710 <main+0x38b0>)
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80046c6:	fb01 f303 	mul.w	r3, r1, r3
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10f      	bne.n	80046f6 <main+0x3896>
									Node[k].Velocity_profile_substates=0;
 80046d6:	4a0e      	ldr	r2, [pc, #56]	@ (8004710 <main+0x38b0>)
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80046de:	fb01 f303 	mul.w	r3, r1, r3
 80046e2:	4413      	add	r3, r2
 80046e4:	f203 3325 	addw	r3, r3, #805	@ 0x325
 80046e8:	2200      	movs	r2, #0
 80046ea:	701a      	strb	r2, [r3, #0]
							break;
 80046ec:	e003      	b.n	80046f6 <main+0x3896>
							break;
 80046ee:	bf00      	nop
 80046f0:	e009      	b.n	8004706 <main+0x38a6>
							break;
 80046f2:	bf00      	nop
 80046f4:	e007      	b.n	8004706 <main+0x38a6>
							break;
 80046f6:	bf00      	nop
						break;
 80046f8:	e005      	b.n	8004706 <main+0x38a6>
		break;
 80046fa:	bf00      	nop
 80046fc:	e00a      	b.n	8004714 <main+0x38b4>
		break;
 80046fe:	bf00      	nop
 8004700:	e008      	b.n	8004714 <main+0x38b4>
			break;
 8004702:	bf00      	nop
 8004704:	e006      	b.n	8004714 <main+0x38b4>
						break;
 8004706:	bf00      	nop

				}



	  		break;
 8004708:	e004      	b.n	8004714 <main+0x38b4>
	  		break;
 800470a:	bf00      	nop
 800470c:	e003      	b.n	8004716 <main+0x38b6>
 800470e:	bf00      	nop
 8004710:	20000190 	.word	0x20000190
	  		break;
 8004714:	bf00      	nop



	  }
	  Node[k].NMT_slave_state_requested=Node[k].NMT_slave_feadback;
 8004716:	4a2e      	ldr	r2, [pc, #184]	@ (80047d0 <main+0x3970>)
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800471e:	fb01 f303 	mul.w	r3, r1, r3
 8004722:	4413      	add	r3, r2
 8004724:	f203 23e6 	addw	r3, r3, #742	@ 0x2e6
 8004728:	f9b3 0000 	ldrsh.w	r0, [r3]
 800472c:	4a28      	ldr	r2, [pc, #160]	@ (80047d0 <main+0x3970>)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004734:	fb01 f303 	mul.w	r3, r1, r3
 8004738:	4413      	add	r3, r2
 800473a:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800473e:	4602      	mov	r2, r0
 8004740:	801a      	strh	r2, [r3, #0]

	  if (Node[k].Transition_Drive_requested==1) {
 8004742:	4a23      	ldr	r2, [pc, #140]	@ (80047d0 <main+0x3970>)
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800474a:	fb01 f303 	mul.w	r3, r1, r3
 800474e:	4413      	add	r3, r2
 8004750:	f203 332b 	addw	r3, r3, #811	@ 0x32b
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 8149 	beq.w	80049ee <main+0x3b8e>
	  	  	  	Node[k].SubStates_Power_Enabled=-1;
 800475c:	4a1c      	ldr	r2, [pc, #112]	@ (80047d0 <main+0x3970>)
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004764:	fb01 f303 	mul.w	r3, r1, r3
 8004768:	4413      	add	r3, r2
 800476a:	f203 3321 	addw	r3, r3, #801	@ 0x321
 800476e:	22ff      	movs	r2, #255	@ 0xff
 8004770:	701a      	strb	r2, [r3, #0]
	  	  	  	Node[k].SubStates_Power_Disabled=-1;
 8004772:	4a17      	ldr	r2, [pc, #92]	@ (80047d0 <main+0x3970>)
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800477a:	fb01 f303 	mul.w	r3, r1, r3
 800477e:	4413      	add	r3, r2
 8004780:	f203 331f 	addw	r3, r3, #799	@ 0x31f
 8004784:	22ff      	movs	r2, #255	@ 0xff
 8004786:	701a      	strb	r2, [r3, #0]
	  	  	  	Node[k].SubStates_Fault=-1;
 8004788:	4a11      	ldr	r2, [pc, #68]	@ (80047d0 <main+0x3970>)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004790:	fb01 f303 	mul.w	r3, r1, r3
 8004794:	4413      	add	r3, r2
 8004796:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800479a:	22ff      	movs	r2, #255	@ 0xff
 800479c:	701a      	strb	r2, [r3, #0]
	  	  	  	Node[k].Transition_Drive_requested=false;
 800479e:	4a0c      	ldr	r2, [pc, #48]	@ (80047d0 <main+0x3970>)
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80047a6:	fb01 f303 	mul.w	r3, r1, r3
 80047aa:	4413      	add	r3, r2
 80047ac:	f203 332b 	addw	r3, r3, #811	@ 0x32b
 80047b0:	2200      	movs	r2, #0
 80047b2:	701a      	strb	r2, [r3, #0]
	  	  	  	Node[k].ControlWord_app=0;
 80047b4:	4a06      	ldr	r2, [pc, #24]	@ (80047d0 <main+0x3970>)
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80047bc:	fb01 f303 	mul.w	r3, r1, r3
 80047c0:	4413      	add	r3, r2
 80047c2:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 80047c6:	2200      	movs	r2, #0
 80047c8:	801a      	strh	r2, [r3, #0]
	  	  	  	for(int j=0;j<=15;j++){
 80047ca:	2300      	movs	r3, #0
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	e045      	b.n	800485c <main+0x39fc>
 80047d0:	20000190 	.word	0x20000190
	  	  	  		if(Node[k].ControlWord_bool[j]==1){
 80047d4:	4ab0      	ldr	r2, [pc, #704]	@ (8004a98 <main+0x3c38>)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80047dc:	fb01 f303 	mul.w	r3, r1, r3
 80047e0:	441a      	add	r2, r3
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d032      	beq.n	8004856 <main+0x39f6>
	  	  	  		Node[k].ControlWord_app=Node[k].ControlWord_app+ pow(2, j);
 80047f0:	4aa9      	ldr	r2, [pc, #676]	@ (8004a98 <main+0x3c38>)
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80047f8:	fb01 f303 	mul.w	r3, r1, r3
 80047fc:	4413      	add	r3, r2
 80047fe:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	4618      	mov	r0, r3
 8004806:	f7fb fe59 	bl	80004bc <__aeabi_i2d>
 800480a:	4604      	mov	r4, r0
 800480c:	460d      	mov	r5, r1
 800480e:	68b8      	ldr	r0, [r7, #8]
 8004810:	f7fb fe54 	bl	80004bc <__aeabi_i2d>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	ec43 2b11 	vmov	d1, r2, r3
 800481c:	ed9f 0b9c 	vldr	d0, [pc, #624]	@ 8004a90 <main+0x3c30>
 8004820:	f005 fca8 	bl	800a174 <pow>
 8004824:	ec53 2b10 	vmov	r2, r3, d0
 8004828:	4620      	mov	r0, r4
 800482a:	4629      	mov	r1, r5
 800482c:	f7fb fcfa 	bl	8000224 <__adddf3>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4610      	mov	r0, r2
 8004836:	4619      	mov	r1, r3
 8004838:	f7fc f95a 	bl	8000af0 <__aeabi_d2uiz>
 800483c:	4603      	mov	r3, r0
 800483e:	b298      	uxth	r0, r3
 8004840:	4a95      	ldr	r2, [pc, #596]	@ (8004a98 <main+0x3c38>)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004848:	fb01 f303 	mul.w	r3, r1, r3
 800484c:	4413      	add	r3, r2
 800484e:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8004852:	4602      	mov	r2, r0
 8004854:	801a      	strh	r2, [r3, #0]
	  	  	  	for(int j=0;j<=15;j++){
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	3301      	adds	r3, #1
 800485a:	60bb      	str	r3, [r7, #8]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b0f      	cmp	r3, #15
 8004860:	ddb8      	ble.n	80047d4 <main+0x3974>
	  	  	  		}
	  	  	  	}
	  	  	Node[k].TxData_PDO[0][0]=(Node[k].ControlWord_app >> 0)  & 0xFF;
 8004862:	4a8d      	ldr	r2, [pc, #564]	@ (8004a98 <main+0x3c38>)
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800486a:	fb01 f303 	mul.w	r3, r1, r3
 800486e:	4413      	add	r3, r2
 8004870:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b2d8      	uxtb	r0, r3
 8004878:	4a87      	ldr	r2, [pc, #540]	@ (8004a98 <main+0x3c38>)
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004880:	fb01 f303 	mul.w	r3, r1, r3
 8004884:	4413      	add	r3, r2
 8004886:	337c      	adds	r3, #124	@ 0x7c
 8004888:	4602      	mov	r2, r0
 800488a:	701a      	strb	r2, [r3, #0]
	  	  	Node[k].TxData_PDO[0][1]=(Node[k].ControlWord_app >> 8)  & 0xFF;
 800488c:	4a82      	ldr	r2, [pc, #520]	@ (8004a98 <main+0x3c38>)
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004894:	fb01 f303 	mul.w	r3, r1, r3
 8004898:	4413      	add	r3, r2
 800489a:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	0a1b      	lsrs	r3, r3, #8
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	b2d8      	uxtb	r0, r3
 80048a6:	4a7c      	ldr	r2, [pc, #496]	@ (8004a98 <main+0x3c38>)
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80048ae:	fb01 f303 	mul.w	r3, r1, r3
 80048b2:	4413      	add	r3, r2
 80048b4:	337d      	adds	r3, #125	@ 0x7d
 80048b6:	4602      	mov	r2, r0
 80048b8:	701a      	strb	r2, [r3, #0]
	  	  	Node[k].TxData_PDO[0][2]=Node[k].Mode_of_operation_out;
 80048ba:	4a77      	ldr	r2, [pc, #476]	@ (8004a98 <main+0x3c38>)
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80048c2:	fb01 f303 	mul.w	r3, r1, r3
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 80048cc:	7818      	ldrb	r0, [r3, #0]
 80048ce:	4a72      	ldr	r2, [pc, #456]	@ (8004a98 <main+0x3c38>)
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80048d6:	fb01 f303 	mul.w	r3, r1, r3
 80048da:	4413      	add	r3, r2
 80048dc:	337e      	adds	r3, #126	@ 0x7e
 80048de:	4602      	mov	r2, r0
 80048e0:	701a      	strb	r2, [r3, #0]
	  	  	Node[k].TxData_PDO[0][3]=(Node[k].Speed_search_for_zero >> 0) && 0xFF;
 80048e2:	4a6d      	ldr	r2, [pc, #436]	@ (8004a98 <main+0x3c38>)
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80048ea:	fb01 f303 	mul.w	r3, r1, r3
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	bf14      	ite	ne
 80048fa:	2301      	movne	r3, #1
 80048fc:	2300      	moveq	r3, #0
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	4618      	mov	r0, r3
 8004902:	4a65      	ldr	r2, [pc, #404]	@ (8004a98 <main+0x3c38>)
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800490a:	fb01 f303 	mul.w	r3, r1, r3
 800490e:	4413      	add	r3, r2
 8004910:	337f      	adds	r3, #127	@ 0x7f
 8004912:	4602      	mov	r2, r0
 8004914:	701a      	strb	r2, [r3, #0]
	  	  	Node[k].TxData_PDO[0][4]=(Node[k].Speed_search_for_zero >> 8) && 0xFF;
 8004916:	4a60      	ldr	r2, [pc, #384]	@ (8004a98 <main+0x3c38>)
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800491e:	fb01 f303 	mul.w	r3, r1, r3
 8004922:	4413      	add	r3, r2
 8004924:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	0a1b      	lsrs	r3, r3, #8
 800492c:	2b00      	cmp	r3, #0
 800492e:	bf14      	ite	ne
 8004930:	2301      	movne	r3, #1
 8004932:	2300      	moveq	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	4618      	mov	r0, r3
 8004938:	4a57      	ldr	r2, [pc, #348]	@ (8004a98 <main+0x3c38>)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004940:	fb01 f303 	mul.w	r3, r1, r3
 8004944:	4413      	add	r3, r2
 8004946:	3380      	adds	r3, #128	@ 0x80
 8004948:	4602      	mov	r2, r0
 800494a:	701a      	strb	r2, [r3, #0]
	  	  	Node[k].TxData_PDO[0][5]=(Node[k].Speed_search_for_zero >> 16) && 0xFF;
 800494c:	4a52      	ldr	r2, [pc, #328]	@ (8004a98 <main+0x3c38>)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004954:	fb01 f303 	mul.w	r3, r1, r3
 8004958:	4413      	add	r3, r2
 800495a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	0c1b      	lsrs	r3, r3, #16
 8004962:	2b00      	cmp	r3, #0
 8004964:	bf14      	ite	ne
 8004966:	2301      	movne	r3, #1
 8004968:	2300      	moveq	r3, #0
 800496a:	b2db      	uxtb	r3, r3
 800496c:	4618      	mov	r0, r3
 800496e:	4a4a      	ldr	r2, [pc, #296]	@ (8004a98 <main+0x3c38>)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004976:	fb01 f303 	mul.w	r3, r1, r3
 800497a:	4413      	add	r3, r2
 800497c:	3381      	adds	r3, #129	@ 0x81
 800497e:	4602      	mov	r2, r0
 8004980:	701a      	strb	r2, [r3, #0]
	  	  	Node[k].TxData_PDO[0][6]=(Node[k].Speed_search_for_zero >> 24) && 0xFF;
 8004982:	4a45      	ldr	r2, [pc, #276]	@ (8004a98 <main+0x3c38>)
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800498a:	fb01 f303 	mul.w	r3, r1, r3
 800498e:	4413      	add	r3, r2
 8004990:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	0e1b      	lsrs	r3, r3, #24
 8004998:	2b00      	cmp	r3, #0
 800499a:	bf14      	ite	ne
 800499c:	2301      	movne	r3, #1
 800499e:	2300      	moveq	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	4618      	mov	r0, r3
 80049a4:	4a3c      	ldr	r2, [pc, #240]	@ (8004a98 <main+0x3c38>)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80049ac:	fb01 f303 	mul.w	r3, r1, r3
 80049b0:	4413      	add	r3, r2
 80049b2:	3382      	adds	r3, #130	@ 0x82
 80049b4:	4602      	mov	r2, r0
 80049b6:	701a      	strb	r2, [r3, #0]
	  	  	 if (HAL_CAN_AddTxMessage(&hcan1, &Node[k].Tx_STD_Header_PDO[0], Node[k].TxData_PDO[0], &TxMailbox[0]) != HAL_OK)
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 80049be:	fb02 f303 	mul.w	r3, r2, r3
 80049c2:	3318      	adds	r3, #24
 80049c4:	4a34      	ldr	r2, [pc, #208]	@ (8004a98 <main+0x3c38>)
 80049c6:	4413      	add	r3, r2
 80049c8:	1d19      	adds	r1, r3, #4
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 80049d0:	fb02 f303 	mul.w	r3, r2, r3
 80049d4:	3378      	adds	r3, #120	@ 0x78
 80049d6:	4a30      	ldr	r2, [pc, #192]	@ (8004a98 <main+0x3c38>)
 80049d8:	4413      	add	r3, r2
 80049da:	1d1a      	adds	r2, r3, #4
 80049dc:	4b2f      	ldr	r3, [pc, #188]	@ (8004a9c <main+0x3c3c>)
 80049de:	4830      	ldr	r0, [pc, #192]	@ (8004aa0 <main+0x3c40>)
 80049e0:	f002 f806 	bl	80069f0 <HAL_CAN_AddTxMessage>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <main+0x3b8e>
	  	  	               {
	  	  	             	  Error_Handler();
 80049ea:	f001 fca7 	bl	800633c <Error_Handler>
	  	  	               }
	  	  }

	  if(Node[k].NMT_Writer!=0){
 80049ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004a98 <main+0x3c38>)
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80049f6:	fb01 f303 	mul.w	r3, r1, r3
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8004a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d03a      	beq.n	8004a7e <main+0x3c1e>
		  Node[k].TxData_NMT[0]=Node[k].NMT_Writer;
 8004a08:	4a23      	ldr	r2, [pc, #140]	@ (8004a98 <main+0x3c38>)
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004a10:	fb01 f303 	mul.w	r3, r1, r3
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8004a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a1e:	b2d8      	uxtb	r0, r3
 8004a20:	4a1d      	ldr	r2, [pc, #116]	@ (8004a98 <main+0x3c38>)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004a28:	fb01 f303 	mul.w	r3, r1, r3
 8004a2c:	4413      	add	r3, r2
 8004a2e:	339c      	adds	r3, #156	@ 0x9c
 8004a30:	4602      	mov	r2, r0
 8004a32:	701a      	strb	r2, [r3, #0]
	  	if (HAL_CAN_AddTxMessage(&hcan1, &Node[k].Tx_STD_Header_NMT, &Node[k].TxData_NMT[0], &TxMailbox[0]) != HAL_OK)
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 8004a3a:	fb02 f303 	mul.w	r3, r2, r3
 8004a3e:	4a16      	ldr	r2, [pc, #88]	@ (8004a98 <main+0x3c38>)
 8004a40:	4413      	add	r3, r2
 8004a42:	1d19      	adds	r1, r3, #4
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 8004a4a:	fb02 f303 	mul.w	r3, r2, r3
 8004a4e:	3398      	adds	r3, #152	@ 0x98
 8004a50:	4a11      	ldr	r2, [pc, #68]	@ (8004a98 <main+0x3c38>)
 8004a52:	4413      	add	r3, r2
 8004a54:	1d1a      	adds	r2, r3, #4
 8004a56:	4b11      	ldr	r3, [pc, #68]	@ (8004a9c <main+0x3c3c>)
 8004a58:	4811      	ldr	r0, [pc, #68]	@ (8004aa0 <main+0x3c40>)
 8004a5a:	f001 ffc9 	bl	80069f0 <HAL_CAN_AddTxMessage>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <main+0x3c08>
	                 {
	               	  Error_Handler();
 8004a64:	f001 fc6a 	bl	800633c <Error_Handler>
	                 }
	  	Node[k].NMT_Writer=0;
 8004a68:	4a0b      	ldr	r2, [pc, #44]	@ (8004a98 <main+0x3c38>)
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004a70:	fb01 f303 	mul.w	r3, r1, r3
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	801a      	strh	r2, [r3, #0]
	  for(int k=0;k<NUMBER_OF_NODES;k++){
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	3301      	adds	r3, #1
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	f77c ae03 	ble.w	8001692 <main+0x832>
 8004a8c:	f7fc bdfd 	b.w	800168a <main+0x82a>
 8004a90:	00000000 	.word	0x00000000
 8004a94:	40000000 	.word	0x40000000
 8004a98:	20000190 	.word	0x20000190
 8004a9c:	200008f4 	.word	0x200008f4
 8004aa0:	20000078 	.word	0x20000078

08004aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b094      	sub	sp, #80	@ 0x50
 8004aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004aaa:	f107 031c 	add.w	r3, r7, #28
 8004aae:	2234      	movs	r2, #52	@ 0x34
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f005 fb2c 	bl	800a110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ab8:	f107 0308 	add.w	r3, r7, #8
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	605a      	str	r2, [r3, #4]
 8004ac2:	609a      	str	r2, [r3, #8]
 8004ac4:	60da      	str	r2, [r3, #12]
 8004ac6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ac8:	2300      	movs	r3, #0
 8004aca:	607b      	str	r3, [r7, #4]
 8004acc:	4b2a      	ldr	r3, [pc, #168]	@ (8004b78 <SystemClock_Config+0xd4>)
 8004ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad0:	4a29      	ldr	r2, [pc, #164]	@ (8004b78 <SystemClock_Config+0xd4>)
 8004ad2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ad6:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ad8:	4b27      	ldr	r3, [pc, #156]	@ (8004b78 <SystemClock_Config+0xd4>)
 8004ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004adc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ae0:	607b      	str	r3, [r7, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	603b      	str	r3, [r7, #0]
 8004ae8:	4b24      	ldr	r3, [pc, #144]	@ (8004b7c <SystemClock_Config+0xd8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004af0:	4a22      	ldr	r2, [pc, #136]	@ (8004b7c <SystemClock_Config+0xd8>)
 8004af2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	4b20      	ldr	r3, [pc, #128]	@ (8004b7c <SystemClock_Config+0xd8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004b00:	603b      	str	r3, [r7, #0]
 8004b02:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004b04:	2302      	movs	r3, #2
 8004b06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b10:	2302      	movs	r3, #2
 8004b12:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004b14:	2300      	movs	r3, #0
 8004b16:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004b18:	2310      	movs	r3, #16
 8004b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8004b1c:	23c0      	movs	r3, #192	@ 0xc0
 8004b1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004b20:	2302      	movs	r3, #2
 8004b22:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004b24:	2302      	movs	r3, #2
 8004b26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004b28:	2302      	movs	r3, #2
 8004b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b2c:	f107 031c 	add.w	r3, r7, #28
 8004b30:	4618      	mov	r0, r3
 8004b32:	f003 fc4f 	bl	80083d4 <HAL_RCC_OscConfig>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8004b3c:	f001 fbfe 	bl	800633c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b40:	230f      	movs	r3, #15
 8004b42:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b44:	2302      	movs	r3, #2
 8004b46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004b4c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004b50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004b52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b56:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004b58:	f107 0308 	add.w	r3, r7, #8
 8004b5c:	2103      	movs	r1, #3
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f003 f8ee 	bl	8007d40 <HAL_RCC_ClockConfig>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8004b6a:	f001 fbe7 	bl	800633c <Error_Handler>
  }
}
 8004b6e:	bf00      	nop
 8004b70:	3750      	adds	r7, #80	@ 0x50
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	40007000 	.word	0x40007000

08004b80 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b094      	sub	sp, #80	@ 0x50
 8004b84:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8004b86:	4b32      	ldr	r3, [pc, #200]	@ (8004c50 <MX_CAN1_Init+0xd0>)
 8004b88:	4a32      	ldr	r2, [pc, #200]	@ (8004c54 <MX_CAN1_Init+0xd4>)
 8004b8a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8004b8c:	4b30      	ldr	r3, [pc, #192]	@ (8004c50 <MX_CAN1_Init+0xd0>)
 8004b8e:	2206      	movs	r2, #6
 8004b90:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8004b92:	4b2f      	ldr	r3, [pc, #188]	@ (8004c50 <MX_CAN1_Init+0xd0>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004b98:	4b2d      	ldr	r3, [pc, #180]	@ (8004c50 <MX_CAN1_Init+0xd0>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8004b9e:	4b2c      	ldr	r3, [pc, #176]	@ (8004c50 <MX_CAN1_Init+0xd0>)
 8004ba0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004ba4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8004ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8004c50 <MX_CAN1_Init+0xd0>)
 8004ba8:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8004bac:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8004bae:	4b28      	ldr	r3, [pc, #160]	@ (8004c50 <MX_CAN1_Init+0xd0>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8004bb4:	4b26      	ldr	r3, [pc, #152]	@ (8004c50 <MX_CAN1_Init+0xd0>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8004bba:	4b25      	ldr	r3, [pc, #148]	@ (8004c50 <MX_CAN1_Init+0xd0>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8004bc0:	4b23      	ldr	r3, [pc, #140]	@ (8004c50 <MX_CAN1_Init+0xd0>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004bc6:	4b22      	ldr	r3, [pc, #136]	@ (8004c50 <MX_CAN1_Init+0xd0>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8004bcc:	4b20      	ldr	r3, [pc, #128]	@ (8004c50 <MX_CAN1_Init+0xd0>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8004bd2:	481f      	ldr	r0, [pc, #124]	@ (8004c50 <MX_CAN1_Init+0xd0>)
 8004bd4:	f001 fce4 	bl	80065a0 <HAL_CAN_Init>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8004bde:	f001 fbad 	bl	800633c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig0;

        canfilterconfig0.FilterActivation = CAN_FILTER_ENABLE;
 8004be2:	2301      	movs	r3, #1
 8004be4:	64bb      	str	r3, [r7, #72]	@ 0x48
        canfilterconfig0.FilterBank = 0;  // anything between 0 to SlaveStartFilterBank
 8004be6:	2300      	movs	r3, #0
 8004be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        canfilterconfig0.FilterFIFOAssignment = CAN_RX_FIFO0;
 8004bea:	2300      	movs	r3, #0
 8004bec:	63bb      	str	r3, [r7, #56]	@ 0x38
        canfilterconfig0.FilterIdHigh     = 0 << 5; // 0x0020
 8004bee:	2300      	movs	r3, #0
 8004bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
        canfilterconfig0.FilterIdLow      = 0;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        canfilterconfig0.FilterMaskIdHigh = 1 << 5; // confronta solo il bit meno significativo
 8004bf6:	2320      	movs	r3, #32
 8004bf8:	633b      	str	r3, [r7, #48]	@ 0x30
        canfilterconfig0.FilterMaskIdLow  = 0;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	637b      	str	r3, [r7, #52]	@ 0x34
        canfilterconfig0.FilterMode = CAN_FILTERMODE_IDMASK;//due tipi di filtro
 8004bfe:	2300      	movs	r3, #0
 8004c00:	643b      	str	r3, [r7, #64]	@ 0x40
        canfilterconfig0.FilterScale = CAN_FILTERSCALE_32BIT;
 8004c02:	2301      	movs	r3, #1
 8004c04:	647b      	str	r3, [r7, #68]	@ 0x44
        canfilterconfig0.SlaveStartFilterBank = 25;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 8004c06:	2319      	movs	r3, #25
 8004c08:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    //meglio farselo spiegare.....    canfilterconfig.SlaveStartFilterBank = 13;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1

        HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig0);
 8004c0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004c0e:	4619      	mov	r1, r3
 8004c10:	480f      	ldr	r0, [pc, #60]	@ (8004c50 <MX_CAN1_Init+0xd0>)
 8004c12:	f001 fdcb 	bl	80067ac <HAL_CAN_ConfigFilter>
        CAN_FilterTypeDef canfilterconfig1;

              canfilterconfig1.FilterActivation = CAN_FILTER_ENABLE;
 8004c16:	2301      	movs	r3, #1
 8004c18:	623b      	str	r3, [r7, #32]
              canfilterconfig1.FilterBank = 1;  // anything between 0 to SlaveStartFilterBank
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	617b      	str	r3, [r7, #20]
              canfilterconfig1.FilterFIFOAssignment = CAN_RX_FIFO1;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	613b      	str	r3, [r7, #16]
              canfilterconfig1.FilterIdHigh     = 1 << 5; // 0x0020
 8004c22:	2320      	movs	r3, #32
 8004c24:	603b      	str	r3, [r7, #0]
              canfilterconfig1.FilterIdLow      = 0;
 8004c26:	2300      	movs	r3, #0
 8004c28:	607b      	str	r3, [r7, #4]
              canfilterconfig1.FilterMaskIdHigh = 1 << 5; // confronta solo il bit meno significativo
 8004c2a:	2320      	movs	r3, #32
 8004c2c:	60bb      	str	r3, [r7, #8]
              canfilterconfig1.FilterMaskIdLow  = 0;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
              canfilterconfig1.FilterMode = CAN_FILTERMODE_IDMASK;//due tipi di filtro
 8004c32:	2300      	movs	r3, #0
 8004c34:	61bb      	str	r3, [r7, #24]
              canfilterconfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 8004c36:	2301      	movs	r3, #1
 8004c38:	61fb      	str	r3, [r7, #28]
              canfilterconfig1.SlaveStartFilterBank = 25;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 8004c3a:	2319      	movs	r3, #25
 8004c3c:	627b      	str	r3, [r7, #36]	@ 0x24
                          //meglio farselo spiegare.....    canfilterconfig.SlaveStartFilterBank = 13;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1

              HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig1);
 8004c3e:	463b      	mov	r3, r7
 8004c40:	4619      	mov	r1, r3
 8004c42:	4803      	ldr	r0, [pc, #12]	@ (8004c50 <MX_CAN1_Init+0xd0>)
 8004c44:	f001 fdb2 	bl	80067ac <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8004c48:	bf00      	nop
 8004c4a:	3750      	adds	r7, #80	@ 0x50
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	20000078 	.word	0x20000078
 8004c54:	40006400 	.word	0x40006400

08004c58 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004c5c:	4b12      	ldr	r3, [pc, #72]	@ (8004ca8 <MX_TIM11_Init+0x50>)
 8004c5e:	4a13      	ldr	r2, [pc, #76]	@ (8004cac <MX_TIM11_Init+0x54>)
 8004c60:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4799;
 8004c62:	4b11      	ldr	r3, [pc, #68]	@ (8004ca8 <MX_TIM11_Init+0x50>)
 8004c64:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8004c68:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca8 <MX_TIM11_Init+0x50>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 249;
 8004c70:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca8 <MX_TIM11_Init+0x50>)
 8004c72:	22f9      	movs	r2, #249	@ 0xf9
 8004c74:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c76:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca8 <MX_TIM11_Init+0x50>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca8 <MX_TIM11_Init+0x50>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004c82:	4809      	ldr	r0, [pc, #36]	@ (8004ca8 <MX_TIM11_Init+0x50>)
 8004c84:	f003 fe44 	bl	8008910 <HAL_TIM_Base_Init>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8004c8e:	f001 fb55 	bl	800633c <Error_Handler>
  }

  // ➕ Configura l'interrupt di TIM11 con priorità inferiore rispetto al DMA USART2
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 2, 0);
 8004c92:	2200      	movs	r2, #0
 8004c94:	2102      	movs	r1, #2
 8004c96:	201a      	movs	r0, #26
 8004c98:	f002 fbe5 	bl	8007466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004c9c:	201a      	movs	r0, #26
 8004c9e:	f002 fbfe 	bl	800749e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
}
 8004ca2:	bf00      	nop
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	200000a0 	.word	0x200000a0
 8004cac:	40014800 	.word	0x40014800

08004cb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004cb4:	4b11      	ldr	r3, [pc, #68]	@ (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004cb6:	4a12      	ldr	r2, [pc, #72]	@ (8004d00 <MX_USART2_UART_Init+0x50>)
 8004cb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004cba:	4b10      	ldr	r3, [pc, #64]	@ (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004cbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004cc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004cce:	4b0b      	ldr	r3, [pc, #44]	@ (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004cd4:	4b09      	ldr	r3, [pc, #36]	@ (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004cd6:	220c      	movs	r2, #12
 8004cd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cda:	4b08      	ldr	r3, [pc, #32]	@ (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ce0:	4b06      	ldr	r3, [pc, #24]	@ (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004ce6:	4805      	ldr	r0, [pc, #20]	@ (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004ce8:	f004 f8ae 	bl	8008e48 <HAL_UART_Init>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004cf2:	f001 fb23 	bl	800633c <Error_Handler>
  }

  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8004cf6:	bf00      	nop
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	200000e8 	.word	0x200000e8
 8004d00:	40004400 	.word	0x40004400

08004d04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	607b      	str	r3, [r7, #4]
 8004d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d40 <MX_DMA_Init+0x3c>)
 8004d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d12:	4a0b      	ldr	r2, [pc, #44]	@ (8004d40 <MX_DMA_Init+0x3c>)
 8004d14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d1a:	4b09      	ldr	r3, [pc, #36]	@ (8004d40 <MX_DMA_Init+0x3c>)
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d22:	607b      	str	r3, [r7, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);  // ➕ Priorità alta
 8004d26:	2200      	movs	r2, #0
 8004d28:	2100      	movs	r1, #0
 8004d2a:	2010      	movs	r0, #16
 8004d2c:	f002 fb9b 	bl	8007466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004d30:	2010      	movs	r0, #16
 8004d32:	f002 fbb4 	bl	800749e <HAL_NVIC_EnableIRQ>
}
 8004d36:	bf00      	nop
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40023800 	.word	0x40023800

08004d44 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b08a      	sub	sp, #40	@ 0x28
 8004d48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d4a:	f107 0314 	add.w	r3, r7, #20
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	605a      	str	r2, [r3, #4]
 8004d54:	609a      	str	r2, [r3, #8]
 8004d56:	60da      	str	r2, [r3, #12]
 8004d58:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	613b      	str	r3, [r7, #16]
 8004d5e:	4b24      	ldr	r3, [pc, #144]	@ (8004df0 <MX_GPIO_Init+0xac>)
 8004d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d62:	4a23      	ldr	r2, [pc, #140]	@ (8004df0 <MX_GPIO_Init+0xac>)
 8004d64:	f043 0304 	orr.w	r3, r3, #4
 8004d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d6a:	4b21      	ldr	r3, [pc, #132]	@ (8004df0 <MX_GPIO_Init+0xac>)
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d6e:	f003 0304 	and.w	r3, r3, #4
 8004d72:	613b      	str	r3, [r7, #16]
 8004d74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8004df0 <MX_GPIO_Init+0xac>)
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8004df0 <MX_GPIO_Init+0xac>)
 8004d80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d86:	4b1a      	ldr	r3, [pc, #104]	@ (8004df0 <MX_GPIO_Init+0xac>)
 8004d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d92:	2300      	movs	r3, #0
 8004d94:	60bb      	str	r3, [r7, #8]
 8004d96:	4b16      	ldr	r3, [pc, #88]	@ (8004df0 <MX_GPIO_Init+0xac>)
 8004d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9a:	4a15      	ldr	r2, [pc, #84]	@ (8004df0 <MX_GPIO_Init+0xac>)
 8004d9c:	f043 0301 	orr.w	r3, r3, #1
 8004da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004da2:	4b13      	ldr	r3, [pc, #76]	@ (8004df0 <MX_GPIO_Init+0xac>)
 8004da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	60bb      	str	r3, [r7, #8]
 8004dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dae:	2300      	movs	r3, #0
 8004db0:	607b      	str	r3, [r7, #4]
 8004db2:	4b0f      	ldr	r3, [pc, #60]	@ (8004df0 <MX_GPIO_Init+0xac>)
 8004db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db6:	4a0e      	ldr	r2, [pc, #56]	@ (8004df0 <MX_GPIO_Init+0xac>)
 8004db8:	f043 0302 	orr.w	r3, r3, #2
 8004dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8004df0 <MX_GPIO_Init+0xac>)
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	607b      	str	r3, [r7, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004dca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004dd0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004dda:	f107 0314 	add.w	r3, r7, #20
 8004dde:	4619      	mov	r1, r3
 8004de0:	4804      	ldr	r0, [pc, #16]	@ (8004df4 <MX_GPIO_Init+0xb0>)
 8004de2:	f002 fe19 	bl	8007a18 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8004de6:	bf00      	nop
 8004de8:	3728      	adds	r7, #40	@ 0x28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40023800 	.word	0x40023800
 8004df4:	40020800 	.word	0x40020800

08004df8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1){
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
	//per convenzione attribuiamo i nodi pari allo sterzo, secondo i filtri impostati, e facciamo storeging sul fifo zero
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &Node[0].RxHeader_node[Node[0].buffer_shift_refister], Node[0].RxData_node[Node[0].buffer_shift_refister]);
 8004e00:	4b16      	ldr	r3, [pc, #88]	@ (8004e5c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8004e02:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8004e06:	461a      	mov	r2, r3
 8004e08:	4613      	mov	r3, r2
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	1a9b      	subs	r3, r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	33a0      	adds	r3, #160	@ 0xa0
 8004e12:	4a12      	ldr	r2, [pc, #72]	@ (8004e5c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8004e14:	4413      	add	r3, r2
 8004e16:	1d1a      	adds	r2, r3, #4
 8004e18:	4b10      	ldr	r3, [pc, #64]	@ (8004e5c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8004e1a:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8004e1e:	334c      	adds	r3, #76	@ 0x4c
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	490e      	ldr	r1, [pc, #56]	@ (8004e5c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8004e24:	440b      	add	r3, r1
 8004e26:	3304      	adds	r3, #4
 8004e28:	2100      	movs	r1, #0
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f001 feb0 	bl	8006b90 <HAL_CAN_GetRxMessage>
	Node[0].buffer_shift_refister++;
 8004e30:	4b0a      	ldr	r3, [pc, #40]	@ (8004e5c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8004e32:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8004e36:	3301      	adds	r3, #1
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	4b08      	ldr	r3, [pc, #32]	@ (8004e5c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8004e3c:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
	if(Node[0].buffer_shift_refister>=16) Node[0].buffer_shift_refister=0;
 8004e40:	4b06      	ldr	r3, [pc, #24]	@ (8004e5c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8004e42:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8004e46:	2b0f      	cmp	r3, #15
 8004e48:	d903      	bls.n	8004e52 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
 8004e4a:	4b04      	ldr	r3, [pc, #16]	@ (8004e5c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
}
 8004e52:	bf00      	nop
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000190 	.word	0x20000190

08004e60 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan1){
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
	//per convenzione attribuiamo i nodi dispari alla trazione, secondo i filtri impostati, e facciamo storeging sul fifo uno
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO1, &Node[1].RxHeader_node[Node[1].buffer_shift_refister], Node[1].RxData_node[Node[1].buffer_shift_refister]);
 8004e68:	4b17      	ldr	r3, [pc, #92]	@ (8004ec8 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 8004e6a:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
 8004e6e:	461a      	mov	r2, r3
 8004e70:	4613      	mov	r3, r2
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	1a9b      	subs	r3, r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	f203 433c 	addw	r3, r3, #1084	@ 0x43c
 8004e7c:	4a12      	ldr	r2, [pc, #72]	@ (8004ec8 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 8004e7e:	4413      	add	r3, r2
 8004e80:	1d1a      	adds	r2, r3, #4
 8004e82:	4b11      	ldr	r3, [pc, #68]	@ (8004ec8 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 8004e84:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	f203 53fc 	addw	r3, r3, #1532	@ 0x5fc
 8004e8e:	490e      	ldr	r1, [pc, #56]	@ (8004ec8 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 8004e90:	440b      	add	r3, r1
 8004e92:	3304      	adds	r3, #4
 8004e94:	2101      	movs	r1, #1
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f001 fe7a 	bl	8006b90 <HAL_CAN_GetRxMessage>
	Node[1].buffer_shift_refister++;
 8004e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec8 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 8004e9e:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	4b08      	ldr	r3, [pc, #32]	@ (8004ec8 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 8004ea8:	f883 2680 	strb.w	r2, [r3, #1664]	@ 0x680
	if(Node[1].buffer_shift_refister>=16) Node[1].buffer_shift_refister=0;
 8004eac:	4b06      	ldr	r3, [pc, #24]	@ (8004ec8 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 8004eae:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
 8004eb2:	2b0f      	cmp	r3, #15
 8004eb4:	d903      	bls.n	8004ebe <HAL_CAN_RxFifo1MsgPendingCallback+0x5e>
 8004eb6:	4b04      	ldr	r3, [pc, #16]	@ (8004ec8 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2680 	strb.w	r2, [r3, #1664]	@ 0x680

}
 8004ebe:	bf00      	nop
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20000190 	.word	0x20000190

08004ecc <HAL_TIM_PeriodElapsedCallback>:

}
void RxFifo1FullCallback(CAN_HandleTypeDef *hcan1){

}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim11){
 8004ecc:	b590      	push	{r4, r7, lr}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
	//tarato a 10 ms...da aumentare a 25 ms, per otterenre uno sparo sul bus dei pdo ogni 50 ms
	for (int x=Timer_nodes_intervaller;x<=NUMBER_OF_NODES;x+=2){
 8004ed4:	4b5f      	ldr	r3, [pc, #380]	@ (8005054 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	e1a3      	b.n	8005224 <HAL_TIM_PeriodElapsedCallback+0x358>
		if  (Node[x].BASE_ID_NODE==0 ) continue;
 8004edc:	4a5e      	ldr	r2, [pc, #376]	@ (8005058 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004ee4:	fb01 f303 	mul.w	r3, r1, r3
 8004ee8:	4413      	add	r3, r2
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 8191 	beq.w	8005214 <HAL_TIM_PeriodElapsedCallback+0x348>
		switch (Node[x].Mode_of_operation){
 8004ef2:	4a59      	ldr	r2, [pc, #356]	@ (8005058 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004efa:	fb01 f303 	mul.w	r3, r1, r3
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	f000 80ac 	beq.w	8005064 <HAL_TIM_PeriodElapsedCallback+0x198>
 8004f0c:	2b03      	cmp	r3, #3
 8004f0e:	f040 8186 	bne.w	800521e <HAL_TIM_PeriodElapsedCallback+0x352>
			case 3:
				if(Node[x].NMT_slave_feadback==5) {//dovrebbe essere Node[x].NMT_slave_state per essere fiscali ma va bene dai...
 8004f12:	4a51      	ldr	r2, [pc, #324]	@ (8005058 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004f1a:	fb01 f303 	mul.w	r3, r1, r3
 8004f1e:	4413      	add	r3, r2
 8004f20:	f203 23e6 	addw	r3, r3, #742	@ 0x2e6
 8004f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f28:	2b05      	cmp	r3, #5
 8004f2a:	f040 8175 	bne.w	8005218 <HAL_TIM_PeriodElapsedCallback+0x34c>
					Node[x].TxData_PDO[1][0]=(Node[x].Target_Velocity >> 0) & 0xFF;
 8004f2e:	4a4a      	ldr	r2, [pc, #296]	@ (8005058 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004f36:	fb01 f303 	mul.w	r3, r1, r3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	b2d8      	uxtb	r0, r3
 8004f44:	4a44      	ldr	r2, [pc, #272]	@ (8005058 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004f4c:	fb01 f303 	mul.w	r3, r1, r3
 8004f50:	4413      	add	r3, r2
 8004f52:	3384      	adds	r3, #132	@ 0x84
 8004f54:	4602      	mov	r2, r0
 8004f56:	701a      	strb	r2, [r3, #0]
					Node[x].TxData_PDO[1][1]=(Node[x].Target_Velocity >> 8) & 0xFF;
 8004f58:	4a3f      	ldr	r2, [pc, #252]	@ (8005058 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004f60:	fb01 f303 	mul.w	r3, r1, r3
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	0a1b      	lsrs	r3, r3, #8
 8004f6e:	b2d8      	uxtb	r0, r3
 8004f70:	4a39      	ldr	r2, [pc, #228]	@ (8005058 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004f78:	fb01 f303 	mul.w	r3, r1, r3
 8004f7c:	4413      	add	r3, r2
 8004f7e:	3385      	adds	r3, #133	@ 0x85
 8004f80:	4602      	mov	r2, r0
 8004f82:	701a      	strb	r2, [r3, #0]
					Node[x].TxData_PDO[1][2]=(Node[x].Target_Velocity >> 16) & 0xFF;
 8004f84:	4a34      	ldr	r2, [pc, #208]	@ (8005058 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004f8c:	fb01 f303 	mul.w	r3, r1, r3
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	0c1b      	lsrs	r3, r3, #16
 8004f9a:	b2d8      	uxtb	r0, r3
 8004f9c:	4a2e      	ldr	r2, [pc, #184]	@ (8005058 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004fa4:	fb01 f303 	mul.w	r3, r1, r3
 8004fa8:	4413      	add	r3, r2
 8004faa:	3386      	adds	r3, #134	@ 0x86
 8004fac:	4602      	mov	r2, r0
 8004fae:	701a      	strb	r2, [r3, #0]
					Node[x].TxData_PDO[1][3]=(Node[x].Target_Velocity >> 24) & 0xFF;
 8004fb0:	4a29      	ldr	r2, [pc, #164]	@ (8005058 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004fb8:	fb01 f303 	mul.w	r3, r1, r3
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	0e1b      	lsrs	r3, r3, #24
 8004fc6:	b2d8      	uxtb	r0, r3
 8004fc8:	4a23      	ldr	r2, [pc, #140]	@ (8005058 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004fd0:	fb01 f303 	mul.w	r3, r1, r3
 8004fd4:	4413      	add	r3, r2
 8004fd6:	3387      	adds	r3, #135	@ 0x87
 8004fd8:	4602      	mov	r2, r0
 8004fda:	701a      	strb	r2, [r3, #0]
					Node[x].TxData_PDO[1][4]=(Node[x].Touch_probe_function >> 0) & 0xFF;
 8004fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8005058 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004fe4:	fb01 f303 	mul.w	r3, r1, r3
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8004fee:	7818      	ldrb	r0, [r3, #0]
 8004ff0:	4a19      	ldr	r2, [pc, #100]	@ (8005058 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8004ff8:	fb01 f303 	mul.w	r3, r1, r3
 8004ffc:	4413      	add	r3, r2
 8004ffe:	3388      	adds	r3, #136	@ 0x88
 8005000:	4602      	mov	r2, r0
 8005002:	701a      	strb	r2, [r3, #0]
					Node[x].TxData_PDO[1][5]=(Node[x].Touch_probe_function >> 8) & 0xFF;
 8005004:	4a14      	ldr	r2, [pc, #80]	@ (8005058 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800500c:	fb01 f303 	mul.w	r3, r1, r3
 8005010:	4413      	add	r3, r2
 8005012:	3389      	adds	r3, #137	@ 0x89
 8005014:	2200      	movs	r2, #0
 8005016:	701a      	strb	r2, [r3, #0]
					if (HAL_CAN_AddTxMessage(&hcan1, &Node[x].Tx_STD_Header_PDO[1], Node[x].TxData_PDO[1], &TxMailbox[1]) != HAL_OK)
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 800501e:	fb02 f303 	mul.w	r3, r2, r3
 8005022:	3330      	adds	r3, #48	@ 0x30
 8005024:	4a0c      	ldr	r2, [pc, #48]	@ (8005058 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8005026:	4413      	add	r3, r2
 8005028:	1d19      	adds	r1, r3, #4
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 8005030:	fb02 f303 	mul.w	r3, r2, r3
 8005034:	3380      	adds	r3, #128	@ 0x80
 8005036:	4a08      	ldr	r2, [pc, #32]	@ (8005058 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8005038:	4413      	add	r3, r2
 800503a:	1d1a      	adds	r2, r3, #4
 800503c:	4b07      	ldr	r3, [pc, #28]	@ (800505c <HAL_TIM_PeriodElapsedCallback+0x190>)
 800503e:	4808      	ldr	r0, [pc, #32]	@ (8005060 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8005040:	f001 fcd6 	bl	80069f0 <HAL_CAN_AddTxMessage>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 80e6 	beq.w	8005218 <HAL_TIM_PeriodElapsedCallback+0x34c>
					                 {
					               	  Error_Handler();
 800504c:	f001 f976 	bl	800633c <Error_Handler>
					                 }
				}

			break;
 8005050:	e0e2      	b.n	8005218 <HAL_TIM_PeriodElapsedCallback+0x34c>
 8005052:	bf00      	nop
 8005054:	200008c8 	.word	0x200008c8
 8005058:	20000190 	.word	0x20000190
 800505c:	200008f8 	.word	0x200008f8
 8005060:	20000078 	.word	0x20000078

			case 1:
				if (Node[x].NMT_slave_feadback==5) {
 8005064:	4abd      	ldr	r2, [pc, #756]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800506c:	fb01 f303 	mul.w	r3, r1, r3
 8005070:	4413      	add	r3, r2
 8005072:	f203 23e6 	addw	r3, r3, #742	@ 0x2e6
 8005076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800507a:	2b05      	cmp	r3, #5
 800507c:	f040 80ce 	bne.w	800521c <HAL_TIM_PeriodElapsedCallback+0x350>
					Node[x].TxData_PDO[2][0]=(Node[x].Target_Velocity >> 0) & 0xFF;
 8005080:	4ab6      	ldr	r2, [pc, #728]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005088:	fb01 f303 	mul.w	r3, r1, r3
 800508c:	4413      	add	r3, r2
 800508e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	b2d8      	uxtb	r0, r3
 8005096:	4ab1      	ldr	r2, [pc, #708]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800509e:	fb01 f303 	mul.w	r3, r1, r3
 80050a2:	4413      	add	r3, r2
 80050a4:	338c      	adds	r3, #140	@ 0x8c
 80050a6:	4602      	mov	r2, r0
 80050a8:	701a      	strb	r2, [r3, #0]
					Node[x].TxData_PDO[2][1]=(Node[x].Target_Velocity >> 8) & 0xFF;
 80050aa:	4aac      	ldr	r2, [pc, #688]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80050b2:	fb01 f303 	mul.w	r3, r1, r3
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	0a1b      	lsrs	r3, r3, #8
 80050c0:	b2d8      	uxtb	r0, r3
 80050c2:	4aa6      	ldr	r2, [pc, #664]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80050ca:	fb01 f303 	mul.w	r3, r1, r3
 80050ce:	4413      	add	r3, r2
 80050d0:	338d      	adds	r3, #141	@ 0x8d
 80050d2:	4602      	mov	r2, r0
 80050d4:	701a      	strb	r2, [r3, #0]
					Node[x].TxData_PDO[2][2]=(Node[x].Target_Velocity >> 16) & 0xFF;
 80050d6:	4aa1      	ldr	r2, [pc, #644]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80050de:	fb01 f303 	mul.w	r3, r1, r3
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	0c1b      	lsrs	r3, r3, #16
 80050ec:	b2d8      	uxtb	r0, r3
 80050ee:	4a9b      	ldr	r2, [pc, #620]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80050f6:	fb01 f303 	mul.w	r3, r1, r3
 80050fa:	4413      	add	r3, r2
 80050fc:	338e      	adds	r3, #142	@ 0x8e
 80050fe:	4602      	mov	r2, r0
 8005100:	701a      	strb	r2, [r3, #0]
					Node[x].TxData_PDO[2][3]=(Node[x].Target_Velocity >> 24) & 0xFF;
 8005102:	4a96      	ldr	r2, [pc, #600]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800510a:	fb01 f303 	mul.w	r3, r1, r3
 800510e:	4413      	add	r3, r2
 8005110:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	0e1b      	lsrs	r3, r3, #24
 8005118:	b2d8      	uxtb	r0, r3
 800511a:	4a90      	ldr	r2, [pc, #576]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005122:	fb01 f303 	mul.w	r3, r1, r3
 8005126:	4413      	add	r3, r2
 8005128:	338f      	adds	r3, #143	@ 0x8f
 800512a:	4602      	mov	r2, r0
 800512c:	701a      	strb	r2, [r3, #0]

					Node[x].TxData_PDO[2][4]=(Node[x].Targhet_Position >> 0) & 0xFF;
 800512e:	4a8b      	ldr	r2, [pc, #556]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005136:	fb01 f303 	mul.w	r3, r1, r3
 800513a:	4413      	add	r3, r2
 800513c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	b2d8      	uxtb	r0, r3
 8005144:	4a85      	ldr	r2, [pc, #532]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800514c:	fb01 f303 	mul.w	r3, r1, r3
 8005150:	4413      	add	r3, r2
 8005152:	3390      	adds	r3, #144	@ 0x90
 8005154:	4602      	mov	r2, r0
 8005156:	701a      	strb	r2, [r3, #0]
					Node[x].TxData_PDO[2][5]=(Node[x].Targhet_Position >> 8) & 0xFF;
 8005158:	4a80      	ldr	r2, [pc, #512]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005160:	fb01 f303 	mul.w	r3, r1, r3
 8005164:	4413      	add	r3, r2
 8005166:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	0a1b      	lsrs	r3, r3, #8
 800516e:	b2d8      	uxtb	r0, r3
 8005170:	4a7a      	ldr	r2, [pc, #488]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005178:	fb01 f303 	mul.w	r3, r1, r3
 800517c:	4413      	add	r3, r2
 800517e:	3391      	adds	r3, #145	@ 0x91
 8005180:	4602      	mov	r2, r0
 8005182:	701a      	strb	r2, [r3, #0]
					Node[x].TxData_PDO[2][6]=(Node[x].Targhet_Position >> 16) & 0xFF;
 8005184:	4a75      	ldr	r2, [pc, #468]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800518c:	fb01 f303 	mul.w	r3, r1, r3
 8005190:	4413      	add	r3, r2
 8005192:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	0c1b      	lsrs	r3, r3, #16
 800519a:	b2d8      	uxtb	r0, r3
 800519c:	4a6f      	ldr	r2, [pc, #444]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80051a4:	fb01 f303 	mul.w	r3, r1, r3
 80051a8:	4413      	add	r3, r2
 80051aa:	3392      	adds	r3, #146	@ 0x92
 80051ac:	4602      	mov	r2, r0
 80051ae:	701a      	strb	r2, [r3, #0]
					Node[x].TxData_PDO[2][7]=(Node[x].Targhet_Position >> 24) & 0xFF;
 80051b0:	4a6a      	ldr	r2, [pc, #424]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80051b8:	fb01 f303 	mul.w	r3, r1, r3
 80051bc:	4413      	add	r3, r2
 80051be:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	0e1b      	lsrs	r3, r3, #24
 80051c6:	b2d8      	uxtb	r0, r3
 80051c8:	4a64      	ldr	r2, [pc, #400]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80051d0:	fb01 f303 	mul.w	r3, r1, r3
 80051d4:	4413      	add	r3, r2
 80051d6:	3393      	adds	r3, #147	@ 0x93
 80051d8:	4602      	mov	r2, r0
 80051da:	701a      	strb	r2, [r3, #0]
					if (HAL_CAN_AddTxMessage(&hcan1, &Node[x].Tx_STD_Header_PDO[2], Node[x].TxData_PDO[2], &TxMailbox[2]) != HAL_OK)
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 80051e2:	fb02 f303 	mul.w	r3, r2, r3
 80051e6:	3348      	adds	r3, #72	@ 0x48
 80051e8:	4a5c      	ldr	r2, [pc, #368]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 80051ea:	4413      	add	r3, r2
 80051ec:	1d19      	adds	r1, r3, #4
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 80051f4:	fb02 f303 	mul.w	r3, r2, r3
 80051f8:	3388      	adds	r3, #136	@ 0x88
 80051fa:	4a58      	ldr	r2, [pc, #352]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 80051fc:	4413      	add	r3, r2
 80051fe:	1d1a      	adds	r2, r3, #4
 8005200:	4b57      	ldr	r3, [pc, #348]	@ (8005360 <HAL_TIM_PeriodElapsedCallback+0x494>)
 8005202:	4858      	ldr	r0, [pc, #352]	@ (8005364 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8005204:	f001 fbf4 	bl	80069f0 <HAL_CAN_AddTxMessage>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d006      	beq.n	800521c <HAL_TIM_PeriodElapsedCallback+0x350>
									 {
									  Error_Handler();
 800520e:	f001 f895 	bl	800633c <Error_Handler>
									 }
				}
			break;
 8005212:	e003      	b.n	800521c <HAL_TIM_PeriodElapsedCallback+0x350>
		if  (Node[x].BASE_ID_NODE==0 ) continue;
 8005214:	bf00      	nop
 8005216:	e002      	b.n	800521e <HAL_TIM_PeriodElapsedCallback+0x352>
			break;
 8005218:	bf00      	nop
 800521a:	e000      	b.n	800521e <HAL_TIM_PeriodElapsedCallback+0x352>
			break;
 800521c:	bf00      	nop
	for (int x=Timer_nodes_intervaller;x<=NUMBER_OF_NODES;x+=2){
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	3302      	adds	r3, #2
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2b02      	cmp	r3, #2
 8005228:	f77f ae58 	ble.w	8004edc <HAL_TIM_PeriodElapsedCallback+0x10>
		}


	}
	for (int x=(!Timer_nodes_intervaller);x<=7;x+=2){
 800522c:	4b4e      	ldr	r3, [pc, #312]	@ (8005368 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	f083 0301 	eor.w	r3, r3, #1
 8005234:	b2db      	uxtb	r3, r3
 8005236:	613b      	str	r3, [r7, #16]
 8005238:	e07a      	b.n	8005330 <HAL_TIM_PeriodElapsedCallback+0x464>
				if  (Node[x].BASE_ID_NODE==0) continue;
 800523a:	4a48      	ldr	r2, [pc, #288]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005242:	fb01 f303 	mul.w	r3, r1, r3
 8005246:	4413      	add	r3, r2
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d06c      	beq.n	8005328 <HAL_TIM_PeriodElapsedCallback+0x45c>
				for(int a=0;a<=23;a++){
 800524e:	2300      	movs	r3, #0
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	e01d      	b.n	8005290 <HAL_TIM_PeriodElapsedCallback+0x3c4>
					if(Node[x].TxBuffer_Priority_acii[a]==0) Node[x].TxBuffer_Priority_acii[a]='#';
 8005254:	4a41      	ldr	r2, [pc, #260]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800525c:	fb01 f303 	mul.w	r3, r1, r3
 8005260:	441a      	add	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	f503 735f 	add.w	r3, r3, #892	@ 0x37c
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10c      	bne.n	800528a <HAL_TIM_PeriodElapsedCallback+0x3be>
 8005270:	4a3a      	ldr	r2, [pc, #232]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005278:	fb01 f303 	mul.w	r3, r1, r3
 800527c:	441a      	add	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	4413      	add	r3, r2
 8005282:	f503 735f 	add.w	r3, r3, #892	@ 0x37c
 8005286:	2223      	movs	r2, #35	@ 0x23
 8005288:	701a      	strb	r2, [r3, #0]
				for(int a=0;a<=23;a++){
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3301      	adds	r3, #1
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b17      	cmp	r3, #23
 8005294:	ddde      	ble.n	8005254 <HAL_TIM_PeriodElapsedCallback+0x388>
				}
				if (huart2.gState == HAL_UART_STATE_READY) {//da aggiustare bene amodo
 8005296:	4b35      	ldr	r3, [pc, #212]	@ (800536c <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 8005298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b20      	cmp	r3, #32
 80052a0:	d11d      	bne.n	80052de <HAL_TIM_PeriodElapsedCallback+0x412>
				    HAL_UART_Transmit_IT(&huart2, (uint8_t*)Node[x].TxBuffer_Priority_acii,  strlen(Node[x].TxBuffer_Priority_acii));
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 80052a8:	fb02 f303 	mul.w	r3, r2, r3
 80052ac:	f503 735e 	add.w	r3, r3, #888	@ 0x378
 80052b0:	4a2a      	ldr	r2, [pc, #168]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 80052b2:	4413      	add	r3, r2
 80052b4:	1d1c      	adds	r4, r3, #4
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 80052bc:	fb02 f303 	mul.w	r3, r2, r3
 80052c0:	f503 735e 	add.w	r3, r3, #888	@ 0x378
 80052c4:	4a25      	ldr	r2, [pc, #148]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 80052c6:	4413      	add	r3, r2
 80052c8:	3304      	adds	r3, #4
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fa ff9c 	bl	8000208 <strlen>
 80052d0:	4603      	mov	r3, r0
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	461a      	mov	r2, r3
 80052d6:	4621      	mov	r1, r4
 80052d8:	4824      	ldr	r0, [pc, #144]	@ (800536c <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 80052da:	f003 fe0f 	bl	8008efc <HAL_UART_Transmit_IT>
				}//da aggiustare
				if(Node[x].pending_uart_msg==1){
 80052de:	4a1f      	ldr	r2, [pc, #124]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80052e6:	fb01 f303 	mul.w	r3, r1, r3
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 7365 	add.w	r3, r3, #916	@ 0x394
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d019      	beq.n	800532a <HAL_TIM_PeriodElapsedCallback+0x45e>
					Node[x].timer_fired=1;
 80052f6:	4a19      	ldr	r2, [pc, #100]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80052fe:	fb01 f303 	mul.w	r3, r1, r3
 8005302:	4413      	add	r3, r2
 8005304:	f203 3395 	addw	r3, r3, #917	@ 0x395
 8005308:	2201      	movs	r2, #1
 800530a:	701a      	strb	r2, [r3, #0]
					Node[x].last_timer_tick = HAL_GetTick();
 800530c:	f001 f93c 	bl	8006588 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	4912      	ldr	r1, [pc, #72]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x490>)
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 800531a:	fb00 f303 	mul.w	r3, r0, r3
 800531e:	440b      	add	r3, r1
 8005320:	f503 7366 	add.w	r3, r3, #920	@ 0x398
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	e000      	b.n	800532a <HAL_TIM_PeriodElapsedCallback+0x45e>
				if  (Node[x].BASE_ID_NODE==0) continue;
 8005328:	bf00      	nop
	for (int x=(!Timer_nodes_intervaller);x<=7;x+=2){
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	3302      	adds	r3, #2
 800532e:	613b      	str	r3, [r7, #16]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b07      	cmp	r3, #7
 8005334:	dd81      	ble.n	800523a <HAL_TIM_PeriodElapsedCallback+0x36e>
				}
			}

		Timer_nodes_intervaller=!Timer_nodes_intervaller;
 8005336:	4b0c      	ldr	r3, [pc, #48]	@ (8005368 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	bf14      	ite	ne
 800533e:	2301      	movne	r3, #1
 8005340:	2300      	moveq	r3, #0
 8005342:	b2db      	uxtb	r3, r3
 8005344:	f083 0301 	eor.w	r3, r3, #1
 8005348:	b2db      	uxtb	r3, r3
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	b2da      	uxtb	r2, r3
 8005350:	4b05      	ldr	r3, [pc, #20]	@ (8005368 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8005352:	701a      	strb	r2, [r3, #0]



}
 8005354:	bf00      	nop
 8005356:	371c      	adds	r7, #28
 8005358:	46bd      	mov	sp, r7
 800535a:	bd90      	pop	{r4, r7, pc}
 800535c:	20000190 	.word	0x20000190
 8005360:	200008fc 	.word	0x200008fc
 8005364:	20000078 	.word	0x20000078
 8005368:	200008c8 	.word	0x200008c8
 800536c:	200000e8 	.word	0x200000e8

08005370 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005370:	b5b0      	push	{r4, r5, r7, lr}
 8005372:	b08e      	sub	sp, #56	@ 0x38
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
			setnodes((uint32_t)Rx_general_UART_Buffer[1]-48,(uint32_t)Rx_general_UART_Buffer[2]-48);
			HAL_UART_Receive_DMA(&huart2, Rx_general_UART_Buffer, sizeof(Rx_general_UART_Buffer));
		}*/

	//se la usart è quella dell wifi o quella del coso....
	for (int u=0;u<=NUMBER_OF_NODES;u++){
 8005378:	2300      	movs	r3, #0
 800537a:	637b      	str	r3, [r7, #52]	@ 0x34
 800537c:	f000 bfc7 	b.w	800630e <HAL_UART_RxCpltCallback+0xf9e>
		if(Rx_general_UART_Buffer[0]-48!=Node[u].BASE_ID_NODE) continue;//discorso sulla modularità:del numero di nodi, del numero, dello svincolamento dalla knowedge dei nodi(ad alto livello dico solo quale voglio pilotare con lo sterzo e quale voglio pilotare con la trazione), attualmente non vedo un metodo per fare entrambi....è fattibile ma non ci siamo arrivati.
 8005380:	4bb3      	ldr	r3, [pc, #716]	@ (8005650 <HAL_UART_RxCpltCallback+0x2e0>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	3b30      	subs	r3, #48	@ 0x30
 8005386:	49b3      	ldr	r1, [pc, #716]	@ (8005654 <HAL_UART_RxCpltCallback+0x2e4>)
 8005388:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800538a:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 800538e:	fb00 f202 	mul.w	r2, r0, r2
 8005392:	440a      	add	r2, r1
 8005394:	6812      	ldr	r2, [r2, #0]
 8005396:	4293      	cmp	r3, r2
 8005398:	f040 87b5 	bne.w	8006306 <HAL_UART_RxCpltCallback+0xf96>
		switch (Rx_general_UART_Buffer[1]) {
 800539c:	4bac      	ldr	r3, [pc, #688]	@ (8005650 <HAL_UART_RxCpltCallback+0x2e0>)
 800539e:	785b      	ldrb	r3, [r3, #1]
 80053a0:	3b61      	subs	r3, #97	@ 0x61
 80053a2:	2b0b      	cmp	r3, #11
 80053a4:	f200 80ac 	bhi.w	8005500 <HAL_UART_RxCpltCallback+0x190>
 80053a8:	a201      	add	r2, pc, #4	@ (adr r2, 80053b0 <HAL_UART_RxCpltCallback+0x40>)
 80053aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ae:	bf00      	nop
 80053b0:	080053e1 	.word	0x080053e1
 80053b4:	080053f9 	.word	0x080053f9
 80053b8:	08005411 	.word	0x08005411
 80053bc:	08005429 	.word	0x08005429
 80053c0:	08005441 	.word	0x08005441
 80053c4:	08005459 	.word	0x08005459
 80053c8:	08005471 	.word	0x08005471
 80053cc:	08005489 	.word	0x08005489
 80053d0:	080054a1 	.word	0x080054a1
 80053d4:	080054b9 	.word	0x080054b9
 80053d8:	080054d1 	.word	0x080054d1
 80053dc:	080054e9 	.word	0x080054e9
			case 97:
				Node[u].Enter_Pre_Operational=true;
 80053e0:	4a9c      	ldr	r2, [pc, #624]	@ (8005654 <HAL_UART_RxCpltCallback+0x2e4>)
 80053e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80053e8:	fb01 f303 	mul.w	r3, r1, r3
 80053ec:	4413      	add	r3, r2
 80053ee:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80053f2:	2201      	movs	r2, #1
 80053f4:	701a      	strb	r2, [r3, #0]
			break;
 80053f6:	e083      	b.n	8005500 <HAL_UART_RxCpltCallback+0x190>

			case 98:
				Node[u].Reset_Communication=true;
 80053f8:	4a96      	ldr	r2, [pc, #600]	@ (8005654 <HAL_UART_RxCpltCallback+0x2e4>)
 80053fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053fc:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	4413      	add	r3, r2
 8005406:	f203 3327 	addw	r3, r3, #807	@ 0x327
 800540a:	2201      	movs	r2, #1
 800540c:	701a      	strb	r2, [r3, #0]
			break;
 800540e:	e077      	b.n	8005500 <HAL_UART_RxCpltCallback+0x190>

			case 99:
				Node[u].Reset_Node=true;
 8005410:	4a90      	ldr	r2, [pc, #576]	@ (8005654 <HAL_UART_RxCpltCallback+0x2e4>)
 8005412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005414:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005418:	fb01 f303 	mul.w	r3, r1, r3
 800541c:	4413      	add	r3, r2
 800541e:	f503 734a 	add.w	r3, r3, #808	@ 0x328
 8005422:	2201      	movs	r2, #1
 8005424:	701a      	strb	r2, [r3, #0]
			break;
 8005426:	e06b      	b.n	8005500 <HAL_UART_RxCpltCallback+0x190>

			case 100:
				Node[u].Start_Remote_Node=true;
 8005428:	4a8a      	ldr	r2, [pc, #552]	@ (8005654 <HAL_UART_RxCpltCallback+0x2e4>)
 800542a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800542c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005430:	fb01 f303 	mul.w	r3, r1, r3
 8005434:	4413      	add	r3, r2
 8005436:	f203 3329 	addw	r3, r3, #809	@ 0x329
 800543a:	2201      	movs	r2, #1
 800543c:	701a      	strb	r2, [r3, #0]
			break;
 800543e:	e05f      	b.n	8005500 <HAL_UART_RxCpltCallback+0x190>

			case 101:
				Node[u].Stop_Remote_Node=true;
 8005440:	4a84      	ldr	r2, [pc, #528]	@ (8005654 <HAL_UART_RxCpltCallback+0x2e4>)
 8005442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005444:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005448:	fb01 f303 	mul.w	r3, r1, r3
 800544c:	4413      	add	r3, r2
 800544e:	f203 332a 	addw	r3, r3, #810	@ 0x32a
 8005452:	2201      	movs	r2, #1
 8005454:	701a      	strb	r2, [r3, #0]
			break;
 8005456:	e053      	b.n	8005500 <HAL_UART_RxCpltCallback+0x190>

			case 102:
				Node[u].Shutdown=true;
 8005458:	4a7e      	ldr	r2, [pc, #504]	@ (8005654 <HAL_UART_RxCpltCallback+0x2e4>)
 800545a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800545c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005460:	fb01 f303 	mul.w	r3, r1, r3
 8005464:	4413      	add	r3, r2
 8005466:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 800546a:	2201      	movs	r2, #1
 800546c:	701a      	strb	r2, [r3, #0]
			break;
 800546e:	e047      	b.n	8005500 <HAL_UART_RxCpltCallback+0x190>

			case 103:
				Node[u].Switch_On=true;
 8005470:	4a78      	ldr	r2, [pc, #480]	@ (8005654 <HAL_UART_RxCpltCallback+0x2e4>)
 8005472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005474:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005478:	fb01 f303 	mul.w	r3, r1, r3
 800547c:	4413      	add	r3, r2
 800547e:	f203 332d 	addw	r3, r3, #813	@ 0x32d
 8005482:	2201      	movs	r2, #1
 8005484:	701a      	strb	r2, [r3, #0]
			break;
 8005486:	e03b      	b.n	8005500 <HAL_UART_RxCpltCallback+0x190>

			case 104:
				Node[u].Disable_voltage=true;
 8005488:	4a72      	ldr	r2, [pc, #456]	@ (8005654 <HAL_UART_RxCpltCallback+0x2e4>)
 800548a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800548c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005490:	fb01 f303 	mul.w	r3, r1, r3
 8005494:	4413      	add	r3, r2
 8005496:	f203 332e 	addw	r3, r3, #814	@ 0x32e
 800549a:	2201      	movs	r2, #1
 800549c:	701a      	strb	r2, [r3, #0]
			break;
 800549e:	e02f      	b.n	8005500 <HAL_UART_RxCpltCallback+0x190>

			case 105:
				Node[u].Quick_Stop=true;
 80054a0:	4a6c      	ldr	r2, [pc, #432]	@ (8005654 <HAL_UART_RxCpltCallback+0x2e4>)
 80054a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054a4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80054a8:	fb01 f303 	mul.w	r3, r1, r3
 80054ac:	4413      	add	r3, r2
 80054ae:	f203 332f 	addw	r3, r3, #815	@ 0x32f
 80054b2:	2201      	movs	r2, #1
 80054b4:	701a      	strb	r2, [r3, #0]
			break;
 80054b6:	e023      	b.n	8005500 <HAL_UART_RxCpltCallback+0x190>

			case 106:
				Node[u].Disable_operation=true;
 80054b8:	4a66      	ldr	r2, [pc, #408]	@ (8005654 <HAL_UART_RxCpltCallback+0x2e4>)
 80054ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054bc:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80054c0:	fb01 f303 	mul.w	r3, r1, r3
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 80054ca:	2201      	movs	r2, #1
 80054cc:	701a      	strb	r2, [r3, #0]
			break;
 80054ce:	e017      	b.n	8005500 <HAL_UART_RxCpltCallback+0x190>

			case 107:
				Node[u].Enable_Operation=true;
 80054d0:	4a60      	ldr	r2, [pc, #384]	@ (8005654 <HAL_UART_RxCpltCallback+0x2e4>)
 80054d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	4413      	add	r3, r2
 80054de:	f203 3331 	addw	r3, r3, #817	@ 0x331
 80054e2:	2201      	movs	r2, #1
 80054e4:	701a      	strb	r2, [r3, #0]
			break;
 80054e6:	e00b      	b.n	8005500 <HAL_UART_RxCpltCallback+0x190>

			case 108:
				Node[u].Fault_Reset=true;
 80054e8:	4a5a      	ldr	r2, [pc, #360]	@ (8005654 <HAL_UART_RxCpltCallback+0x2e4>)
 80054ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ec:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80054f0:	fb01 f303 	mul.w	r3, r1, r3
 80054f4:	4413      	add	r3, r2
 80054f6:	f203 3332 	addw	r3, r3, #818	@ 0x332
 80054fa:	2201      	movs	r2, #1
 80054fc:	701a      	strb	r2, [r3, #0]
			break;
 80054fe:	bf00      	nop

		}



		if(Rx_general_UART_Buffer[3]!=Node[u].Mode_of_operation){
 8005500:	4b53      	ldr	r3, [pc, #332]	@ (8005650 <HAL_UART_RxCpltCallback+0x2e0>)
 8005502:	78da      	ldrb	r2, [r3, #3]
 8005504:	4953      	ldr	r1, [pc, #332]	@ (8005654 <HAL_UART_RxCpltCallback+0x2e4>)
 8005506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005508:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 800550c:	fb00 f303 	mul.w	r3, r0, r3
 8005510:	440b      	add	r3, r1
 8005512:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	429a      	cmp	r2, r3
 800551a:	d00e      	beq.n	800553a <HAL_UART_RxCpltCallback+0x1ca>
			Node[u].Mode_Of_Operation_requested=Rx_general_UART_Buffer[3]-48;
 800551c:	4b4c      	ldr	r3, [pc, #304]	@ (8005650 <HAL_UART_RxCpltCallback+0x2e0>)
 800551e:	78db      	ldrb	r3, [r3, #3]
 8005520:	3b30      	subs	r3, #48	@ 0x30
 8005522:	b2d8      	uxtb	r0, r3
 8005524:	4a4b      	ldr	r2, [pc, #300]	@ (8005654 <HAL_UART_RxCpltCallback+0x2e4>)
 8005526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005528:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800552c:	fb01 f303 	mul.w	r3, r1, r3
 8005530:	4413      	add	r3, r2
 8005532:	f203 3336 	addw	r3, r3, #822	@ 0x336
 8005536:	4602      	mov	r2, r0
 8005538:	701a      	strb	r2, [r3, #0]
			//Node[u].TxData_PDO[0][2]=Node[u].Mode_Of_Operation_requested;
			//Node[u].Transition_Drive_requested=true;
		}
		Node[u].Touch_probe_function=Rx_general_UART_Buffer[4]-48;
 800553a:	4b45      	ldr	r3, [pc, #276]	@ (8005650 <HAL_UART_RxCpltCallback+0x2e0>)
 800553c:	791b      	ldrb	r3, [r3, #4]
 800553e:	3b30      	subs	r3, #48	@ 0x30
 8005540:	b2d8      	uxtb	r0, r3
 8005542:	4a44      	ldr	r2, [pc, #272]	@ (8005654 <HAL_UART_RxCpltCallback+0x2e4>)
 8005544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005546:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800554a:	fb01 f303 	mul.w	r3, r1, r3
 800554e:	4413      	add	r3, r2
 8005550:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8005554:	4602      	mov	r2, r0
 8005556:	701a      	strb	r2, [r3, #0]





		switch (Rx_general_UART_Buffer[5]){
 8005558:	4b3d      	ldr	r3, [pc, #244]	@ (8005650 <HAL_UART_RxCpltCallback+0x2e0>)
 800555a:	795b      	ldrb	r3, [r3, #5]
 800555c:	2b50      	cmp	r3, #80	@ 0x50
 800555e:	d064      	beq.n	800562a <HAL_UART_RxCpltCallback+0x2ba>
 8005560:	2b56      	cmp	r3, #86	@ 0x56
 8005562:	f040 80b9 	bne.w	80056d8 <HAL_UART_RxCpltCallback+0x368>
		case 86://V=velocità

			Node[u].Profile_Velocity=0;
 8005566:	4a3b      	ldr	r2, [pc, #236]	@ (8005654 <HAL_UART_RxCpltCallback+0x2e4>)
 8005568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800556a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800556e:	fb01 f303 	mul.w	r3, r1, r3
 8005572:	4413      	add	r3, r2
 8005574:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]
									for (int h=6;h<38;h++){
 800557c:	2306      	movs	r3, #6
 800557e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005580:	e03b      	b.n	80055fa <HAL_UART_RxCpltCallback+0x28a>
										if(Rx_general_UART_Buffer[h]==49) Node[u].Profile_Velocity=Node[u].Profile_Velocity+ pow((2),(h - 6));
 8005582:	4a33      	ldr	r2, [pc, #204]	@ (8005650 <HAL_UART_RxCpltCallback+0x2e0>)
 8005584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005586:	4413      	add	r3, r2
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	2b31      	cmp	r3, #49	@ 0x31
 800558c:	d132      	bne.n	80055f4 <HAL_UART_RxCpltCallback+0x284>
 800558e:	4a31      	ldr	r2, [pc, #196]	@ (8005654 <HAL_UART_RxCpltCallback+0x2e4>)
 8005590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005592:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005596:	fb01 f303 	mul.w	r3, r1, r3
 800559a:	4413      	add	r3, r2
 800559c:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fa ff7a 	bl	800049c <__aeabi_ui2d>
 80055a8:	4604      	mov	r4, r0
 80055aa:	460d      	mov	r5, r1
 80055ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ae:	3b06      	subs	r3, #6
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7fa ff83 	bl	80004bc <__aeabi_i2d>
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	ec43 2b11 	vmov	d1, r2, r3
 80055be:	ed9f 0b22 	vldr	d0, [pc, #136]	@ 8005648 <HAL_UART_RxCpltCallback+0x2d8>
 80055c2:	f004 fdd7 	bl	800a174 <pow>
 80055c6:	ec53 2b10 	vmov	r2, r3, d0
 80055ca:	4620      	mov	r0, r4
 80055cc:	4629      	mov	r1, r5
 80055ce:	f7fa fe29 	bl	8000224 <__adddf3>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4610      	mov	r0, r2
 80055d8:	4619      	mov	r1, r3
 80055da:	f7fb fa89 	bl	8000af0 <__aeabi_d2uiz>
 80055de:	4602      	mov	r2, r0
 80055e0:	491c      	ldr	r1, [pc, #112]	@ (8005654 <HAL_UART_RxCpltCallback+0x2e4>)
 80055e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e4:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 80055e8:	fb00 f303 	mul.w	r3, r0, r3
 80055ec:	440b      	add	r3, r1
 80055ee:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 80055f2:	601a      	str	r2, [r3, #0]
									for (int h=6;h<38;h++){
 80055f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f6:	3301      	adds	r3, #1
 80055f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80055fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fc:	2b25      	cmp	r3, #37	@ 0x25
 80055fe:	ddc0      	ble.n	8005582 <HAL_UART_RxCpltCallback+0x212>
									}
									Node[u].Target_Velocity=Node[u].Profile_Velocity;
 8005600:	4a14      	ldr	r2, [pc, #80]	@ (8005654 <HAL_UART_RxCpltCallback+0x2e4>)
 8005602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005604:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005608:	fb01 f303 	mul.w	r3, r1, r3
 800560c:	4413      	add	r3, r2
 800560e:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	490f      	ldr	r1, [pc, #60]	@ (8005654 <HAL_UART_RxCpltCallback+0x2e4>)
 8005616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005618:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 800561c:	fb00 f303 	mul.w	r3, r0, r3
 8005620:	440b      	add	r3, r1
 8005622:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005626:	601a      	str	r2, [r3, #0]
												//Node[u].Speed_search_for_zero=Node[u].Profile_Velocity;
		break;
 8005628:	e056      	b.n	80056d8 <HAL_UART_RxCpltCallback+0x368>

		case 80://P=posizione
			Node[u].Targhet_Position=0;
 800562a:	4a0a      	ldr	r2, [pc, #40]	@ (8005654 <HAL_UART_RxCpltCallback+0x2e4>)
 800562c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800562e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005632:	fb01 f303 	mul.w	r3, r1, r3
 8005636:	4413      	add	r3, r2
 8005638:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
						for (int h=6;h<38;h++){
 8005640:	2306      	movs	r3, #6
 8005642:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005644:	e044      	b.n	80056d0 <HAL_UART_RxCpltCallback+0x360>
 8005646:	bf00      	nop
 8005648:	00000000 	.word	0x00000000
 800564c:	40000000 	.word	0x40000000
 8005650:	200008cc 	.word	0x200008cc
 8005654:	20000190 	.word	0x20000190
							if(Rx_general_UART_Buffer[h]==49) Node[u].Targhet_Position=Node[u].Targhet_Position+ pow((2),(h - 6));
 8005658:	4a9f      	ldr	r2, [pc, #636]	@ (80058d8 <HAL_UART_RxCpltCallback+0x568>)
 800565a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800565c:	4413      	add	r3, r2
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	2b31      	cmp	r3, #49	@ 0x31
 8005662:	d132      	bne.n	80056ca <HAL_UART_RxCpltCallback+0x35a>
 8005664:	4a9d      	ldr	r2, [pc, #628]	@ (80058dc <HAL_UART_RxCpltCallback+0x56c>)
 8005666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005668:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800566c:	fb01 f303 	mul.w	r3, r1, r3
 8005670:	4413      	add	r3, r2
 8005672:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4618      	mov	r0, r3
 800567a:	f7fa ff0f 	bl	800049c <__aeabi_ui2d>
 800567e:	4604      	mov	r4, r0
 8005680:	460d      	mov	r5, r1
 8005682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005684:	3b06      	subs	r3, #6
 8005686:	4618      	mov	r0, r3
 8005688:	f7fa ff18 	bl	80004bc <__aeabi_i2d>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	ec43 2b11 	vmov	d1, r2, r3
 8005694:	ed9f 0b8e 	vldr	d0, [pc, #568]	@ 80058d0 <HAL_UART_RxCpltCallback+0x560>
 8005698:	f004 fd6c 	bl	800a174 <pow>
 800569c:	ec53 2b10 	vmov	r2, r3, d0
 80056a0:	4620      	mov	r0, r4
 80056a2:	4629      	mov	r1, r5
 80056a4:	f7fa fdbe 	bl	8000224 <__adddf3>
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	4610      	mov	r0, r2
 80056ae:	4619      	mov	r1, r3
 80056b0:	f7fb fa1e 	bl	8000af0 <__aeabi_d2uiz>
 80056b4:	4602      	mov	r2, r0
 80056b6:	4989      	ldr	r1, [pc, #548]	@ (80058dc <HAL_UART_RxCpltCallback+0x56c>)
 80056b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ba:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 80056be:	fb00 f303 	mul.w	r3, r0, r3
 80056c2:	440b      	add	r3, r1
 80056c4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80056c8:	601a      	str	r2, [r3, #0]
						for (int h=6;h<38;h++){
 80056ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056cc:	3301      	adds	r3, #1
 80056ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d2:	2b25      	cmp	r3, #37	@ 0x25
 80056d4:	ddc0      	ble.n	8005658 <HAL_UART_RxCpltCallback+0x2e8>
						}
		break;
 80056d6:	bf00      	nop
		}


		switch (Rx_general_UART_Buffer[2]){//casi di halt ...ecc ecc, messaggi urgenti
 80056d8:	4b7f      	ldr	r3, [pc, #508]	@ (80058d8 <HAL_UART_RxCpltCallback+0x568>)
 80056da:	789b      	ldrb	r3, [r3, #2]
 80056dc:	3b30      	subs	r3, #48	@ 0x30
 80056de:	2b07      	cmp	r3, #7
 80056e0:	f200 860b 	bhi.w	80062fa <HAL_UART_RxCpltCallback+0xf8a>
 80056e4:	a201      	add	r2, pc, #4	@ (adr r2, 80056ec <HAL_UART_RxCpltCallback+0x37c>)
 80056e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ea:	bf00      	nop
 80056ec:	0800570d 	.word	0x0800570d
 80056f0:	08005883 	.word	0x08005883
 80056f4:	08005a13 	.word	0x08005a13
 80056f8:	08005b85 	.word	0x08005b85
 80056fc:	08005d0b 	.word	0x08005d0b
 8005700:	08005e7d 	.word	0x08005e7d
 8005704:	08006003 	.word	0x08006003
 8005708:	08006175 	.word	0x08006175
			case 48://0:Halt richiesta alto
				switch (Node[u].ControlWord_bool[8]) {
 800570c:	4a73      	ldr	r2, [pc, #460]	@ (80058dc <HAL_UART_RxCpltCallback+0x56c>)
 800570e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005710:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005714:	fb01 f303 	mul.w	r3, r1, r3
 8005718:	4413      	add	r3, r2
 800571a:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b01      	cmp	r3, #1
 8005722:	f040 80a8 	bne.w	8005876 <HAL_UART_RxCpltCallback+0x506>
					case 0:

					break;

					case 1:
						Node[u].ControlWord_bool[8]=0;
 8005726:	4a6d      	ldr	r2, [pc, #436]	@ (80058dc <HAL_UART_RxCpltCallback+0x56c>)
 8005728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800572e:	fb01 f303 	mul.w	r3, r1, r3
 8005732:	4413      	add	r3, r2
 8005734:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8005738:	2200      	movs	r2, #0
 800573a:	701a      	strb	r2, [r3, #0]
						Node[u].ControlWord_app=0;
 800573c:	4a67      	ldr	r2, [pc, #412]	@ (80058dc <HAL_UART_RxCpltCallback+0x56c>)
 800573e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005740:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005744:	fb01 f303 	mul.w	r3, r1, r3
 8005748:	4413      	add	r3, r2
 800574a:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 800574e:	2200      	movs	r2, #0
 8005750:	801a      	strh	r2, [r3, #0]
							  	  	  	for(int j=0;j<=15;j++){
 8005752:	2300      	movs	r3, #0
 8005754:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005756:	e043      	b.n	80057e0 <HAL_UART_RxCpltCallback+0x470>
							  	  	  		if(Node[u].ControlWord_bool[j]==1){
 8005758:	4a60      	ldr	r2, [pc, #384]	@ (80058dc <HAL_UART_RxCpltCallback+0x56c>)
 800575a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800575c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005760:	fb01 f303 	mul.w	r3, r1, r3
 8005764:	441a      	add	r2, r3
 8005766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005768:	4413      	add	r3, r2
 800576a:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d032      	beq.n	80057da <HAL_UART_RxCpltCallback+0x46a>
							  	  	  		Node[u].ControlWord_app=Node[u].ControlWord_app+ pow(2, j);
 8005774:	4a59      	ldr	r2, [pc, #356]	@ (80058dc <HAL_UART_RxCpltCallback+0x56c>)
 8005776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005778:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800577c:	fb01 f303 	mul.w	r3, r1, r3
 8005780:	4413      	add	r3, r2
 8005782:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	4618      	mov	r0, r3
 800578a:	f7fa fe97 	bl	80004bc <__aeabi_i2d>
 800578e:	4604      	mov	r4, r0
 8005790:	460d      	mov	r5, r1
 8005792:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005794:	f7fa fe92 	bl	80004bc <__aeabi_i2d>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	ec43 2b11 	vmov	d1, r2, r3
 80057a0:	ed9f 0b4b 	vldr	d0, [pc, #300]	@ 80058d0 <HAL_UART_RxCpltCallback+0x560>
 80057a4:	f004 fce6 	bl	800a174 <pow>
 80057a8:	ec53 2b10 	vmov	r2, r3, d0
 80057ac:	4620      	mov	r0, r4
 80057ae:	4629      	mov	r1, r5
 80057b0:	f7fa fd38 	bl	8000224 <__adddf3>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4610      	mov	r0, r2
 80057ba:	4619      	mov	r1, r3
 80057bc:	f7fb f998 	bl	8000af0 <__aeabi_d2uiz>
 80057c0:	4603      	mov	r3, r0
 80057c2:	b298      	uxth	r0, r3
 80057c4:	4a45      	ldr	r2, [pc, #276]	@ (80058dc <HAL_UART_RxCpltCallback+0x56c>)
 80057c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80057cc:	fb01 f303 	mul.w	r3, r1, r3
 80057d0:	4413      	add	r3, r2
 80057d2:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 80057d6:	4602      	mov	r2, r0
 80057d8:	801a      	strh	r2, [r3, #0]
							  	  	  	for(int j=0;j<=15;j++){
 80057da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057dc:	3301      	adds	r3, #1
 80057de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e2:	2b0f      	cmp	r3, #15
 80057e4:	ddb8      	ble.n	8005758 <HAL_UART_RxCpltCallback+0x3e8>
							  	  	  		}
							  	  	  	}
							  	  	Node[u].TxData_PDO[0][0]=(Node[u].ControlWord_app >> 0)  & 0xFF;
 80057e6:	4a3d      	ldr	r2, [pc, #244]	@ (80058dc <HAL_UART_RxCpltCallback+0x56c>)
 80057e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ea:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80057ee:	fb01 f303 	mul.w	r3, r1, r3
 80057f2:	4413      	add	r3, r2
 80057f4:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	b2d8      	uxtb	r0, r3
 80057fc:	4a37      	ldr	r2, [pc, #220]	@ (80058dc <HAL_UART_RxCpltCallback+0x56c>)
 80057fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005800:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005804:	fb01 f303 	mul.w	r3, r1, r3
 8005808:	4413      	add	r3, r2
 800580a:	337c      	adds	r3, #124	@ 0x7c
 800580c:	4602      	mov	r2, r0
 800580e:	701a      	strb	r2, [r3, #0]
							  	  	Node[u].TxData_PDO[0][1]=(Node[u].ControlWord_app >> 8)  & 0xFF;
 8005810:	4a32      	ldr	r2, [pc, #200]	@ (80058dc <HAL_UART_RxCpltCallback+0x56c>)
 8005812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005814:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005818:	fb01 f303 	mul.w	r3, r1, r3
 800581c:	4413      	add	r3, r2
 800581e:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	0a1b      	lsrs	r3, r3, #8
 8005826:	b29b      	uxth	r3, r3
 8005828:	b2d8      	uxtb	r0, r3
 800582a:	4a2c      	ldr	r2, [pc, #176]	@ (80058dc <HAL_UART_RxCpltCallback+0x56c>)
 800582c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800582e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005832:	fb01 f303 	mul.w	r3, r1, r3
 8005836:	4413      	add	r3, r2
 8005838:	337d      	adds	r3, #125	@ 0x7d
 800583a:	4602      	mov	r2, r0
 800583c:	701a      	strb	r2, [r3, #0]
							  	  if (HAL_CAN_AddTxMessage(&hcan1, &Node[u].Tx_STD_Header_PDO[0], Node[u].TxData_PDO[0], &TxMailbox[0]) != HAL_OK)
 800583e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005840:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 8005844:	fb02 f303 	mul.w	r3, r2, r3
 8005848:	3318      	adds	r3, #24
 800584a:	4a24      	ldr	r2, [pc, #144]	@ (80058dc <HAL_UART_RxCpltCallback+0x56c>)
 800584c:	4413      	add	r3, r2
 800584e:	1d19      	adds	r1, r3, #4
 8005850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005852:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 8005856:	fb02 f303 	mul.w	r3, r2, r3
 800585a:	3378      	adds	r3, #120	@ 0x78
 800585c:	4a1f      	ldr	r2, [pc, #124]	@ (80058dc <HAL_UART_RxCpltCallback+0x56c>)
 800585e:	4413      	add	r3, r2
 8005860:	1d1a      	adds	r2, r3, #4
 8005862:	4b1f      	ldr	r3, [pc, #124]	@ (80058e0 <HAL_UART_RxCpltCallback+0x570>)
 8005864:	481f      	ldr	r0, [pc, #124]	@ (80058e4 <HAL_UART_RxCpltCallback+0x574>)
 8005866:	f001 f8c3 	bl	80069f0 <HAL_CAN_AddTxMessage>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d005      	beq.n	800587c <HAL_UART_RxCpltCallback+0x50c>
							  	  	  	  	               {
							  	  	  	  	             	  Error_Handler();
 8005870:	f000 fd64 	bl	800633c <Error_Handler>
							  	  	  	  	               }
					break;
 8005874:	e002      	b.n	800587c <HAL_UART_RxCpltCallback+0x50c>
					break;
 8005876:	bf00      	nop
 8005878:	f000 bd3f 	b.w	80062fa <HAL_UART_RxCpltCallback+0xf8a>
					break;
 800587c:	bf00      	nop
				}
			break;
 800587e:	f000 bd3c 	b.w	80062fa <HAL_UART_RxCpltCallback+0xf8a>

			case 49://1:Halt richiesta basso
				switch (Node[u].ControlWord_bool[8]) {
 8005882:	4a16      	ldr	r2, [pc, #88]	@ (80058dc <HAL_UART_RxCpltCallback+0x56c>)
 8005884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005886:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800588a:	fb01 f303 	mul.w	r3, r1, r3
 800588e:	4413      	add	r3, r2
 8005890:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b01      	cmp	r3, #1
 8005898:	f000 80b5 	beq.w	8005a06 <HAL_UART_RxCpltCallback+0x696>
					case 0:
						Node[u].ControlWord_bool[8]=1;
 800589c:	4a0f      	ldr	r2, [pc, #60]	@ (80058dc <HAL_UART_RxCpltCallback+0x56c>)
 800589e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058a0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80058a4:	fb01 f303 	mul.w	r3, r1, r3
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 80058ae:	2201      	movs	r2, #1
 80058b0:	701a      	strb	r2, [r3, #0]
												Node[u].ControlWord_app=0;
 80058b2:	4a0a      	ldr	r2, [pc, #40]	@ (80058dc <HAL_UART_RxCpltCallback+0x56c>)
 80058b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058b6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80058ba:	fb01 f303 	mul.w	r3, r1, r3
 80058be:	4413      	add	r3, r2
 80058c0:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 80058c4:	2200      	movs	r2, #0
 80058c6:	801a      	strh	r2, [r3, #0]
													  	  	  	for(int j=0;j<=15;j++){
 80058c8:	2300      	movs	r3, #0
 80058ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80058cc:	e050      	b.n	8005970 <HAL_UART_RxCpltCallback+0x600>
 80058ce:	bf00      	nop
 80058d0:	00000000 	.word	0x00000000
 80058d4:	40000000 	.word	0x40000000
 80058d8:	200008cc 	.word	0x200008cc
 80058dc:	20000190 	.word	0x20000190
 80058e0:	200008f4 	.word	0x200008f4
 80058e4:	20000078 	.word	0x20000078
													  	  	  		if(Node[u].ControlWord_bool[j]==1){
 80058e8:	4abb      	ldr	r2, [pc, #748]	@ (8005bd8 <HAL_UART_RxCpltCallback+0x868>)
 80058ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ec:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80058f0:	fb01 f303 	mul.w	r3, r1, r3
 80058f4:	441a      	add	r2, r3
 80058f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d032      	beq.n	800596a <HAL_UART_RxCpltCallback+0x5fa>
													  	  	  		Node[u].ControlWord_app=Node[u].ControlWord_app+ pow(2, j);
 8005904:	4ab4      	ldr	r2, [pc, #720]	@ (8005bd8 <HAL_UART_RxCpltCallback+0x868>)
 8005906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005908:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800590c:	fb01 f303 	mul.w	r3, r1, r3
 8005910:	4413      	add	r3, r2
 8005912:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	4618      	mov	r0, r3
 800591a:	f7fa fdcf 	bl	80004bc <__aeabi_i2d>
 800591e:	4604      	mov	r4, r0
 8005920:	460d      	mov	r5, r1
 8005922:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005924:	f7fa fdca 	bl	80004bc <__aeabi_i2d>
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	ec43 2b11 	vmov	d1, r2, r3
 8005930:	ed9f 0ba7 	vldr	d0, [pc, #668]	@ 8005bd0 <HAL_UART_RxCpltCallback+0x860>
 8005934:	f004 fc1e 	bl	800a174 <pow>
 8005938:	ec53 2b10 	vmov	r2, r3, d0
 800593c:	4620      	mov	r0, r4
 800593e:	4629      	mov	r1, r5
 8005940:	f7fa fc70 	bl	8000224 <__adddf3>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4610      	mov	r0, r2
 800594a:	4619      	mov	r1, r3
 800594c:	f7fb f8d0 	bl	8000af0 <__aeabi_d2uiz>
 8005950:	4603      	mov	r3, r0
 8005952:	b298      	uxth	r0, r3
 8005954:	4aa0      	ldr	r2, [pc, #640]	@ (8005bd8 <HAL_UART_RxCpltCallback+0x868>)
 8005956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005958:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800595c:	fb01 f303 	mul.w	r3, r1, r3
 8005960:	4413      	add	r3, r2
 8005962:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005966:	4602      	mov	r2, r0
 8005968:	801a      	strh	r2, [r3, #0]
													  	  	  	for(int j=0;j<=15;j++){
 800596a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596c:	3301      	adds	r3, #1
 800596e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005972:	2b0f      	cmp	r3, #15
 8005974:	ddb8      	ble.n	80058e8 <HAL_UART_RxCpltCallback+0x578>
													  	  	  		}
													  	  	  	}
													  	  	Node[u].TxData_PDO[0][0]=(Node[u].ControlWord_app >> 0)  & 0xFF;
 8005976:	4a98      	ldr	r2, [pc, #608]	@ (8005bd8 <HAL_UART_RxCpltCallback+0x868>)
 8005978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800597a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800597e:	fb01 f303 	mul.w	r3, r1, r3
 8005982:	4413      	add	r3, r2
 8005984:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	b2d8      	uxtb	r0, r3
 800598c:	4a92      	ldr	r2, [pc, #584]	@ (8005bd8 <HAL_UART_RxCpltCallback+0x868>)
 800598e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005990:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005994:	fb01 f303 	mul.w	r3, r1, r3
 8005998:	4413      	add	r3, r2
 800599a:	337c      	adds	r3, #124	@ 0x7c
 800599c:	4602      	mov	r2, r0
 800599e:	701a      	strb	r2, [r3, #0]
													  	  	Node[u].TxData_PDO[0][1]=(Node[u].ControlWord_app >> 8)  & 0xFF;
 80059a0:	4a8d      	ldr	r2, [pc, #564]	@ (8005bd8 <HAL_UART_RxCpltCallback+0x868>)
 80059a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80059a8:	fb01 f303 	mul.w	r3, r1, r3
 80059ac:	4413      	add	r3, r2
 80059ae:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	0a1b      	lsrs	r3, r3, #8
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	b2d8      	uxtb	r0, r3
 80059ba:	4a87      	ldr	r2, [pc, #540]	@ (8005bd8 <HAL_UART_RxCpltCallback+0x868>)
 80059bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059be:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80059c2:	fb01 f303 	mul.w	r3, r1, r3
 80059c6:	4413      	add	r3, r2
 80059c8:	337d      	adds	r3, #125	@ 0x7d
 80059ca:	4602      	mov	r2, r0
 80059cc:	701a      	strb	r2, [r3, #0]
													  	  if (HAL_CAN_AddTxMessage(&hcan1, &Node[u].Tx_STD_Header_PDO[0], Node[u].TxData_PDO[0], &TxMailbox[0]) != HAL_OK)
 80059ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059d0:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 80059d4:	fb02 f303 	mul.w	r3, r2, r3
 80059d8:	3318      	adds	r3, #24
 80059da:	4a7f      	ldr	r2, [pc, #508]	@ (8005bd8 <HAL_UART_RxCpltCallback+0x868>)
 80059dc:	4413      	add	r3, r2
 80059de:	1d19      	adds	r1, r3, #4
 80059e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059e2:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 80059e6:	fb02 f303 	mul.w	r3, r2, r3
 80059ea:	3378      	adds	r3, #120	@ 0x78
 80059ec:	4a7a      	ldr	r2, [pc, #488]	@ (8005bd8 <HAL_UART_RxCpltCallback+0x868>)
 80059ee:	4413      	add	r3, r2
 80059f0:	1d1a      	adds	r2, r3, #4
 80059f2:	4b7a      	ldr	r3, [pc, #488]	@ (8005bdc <HAL_UART_RxCpltCallback+0x86c>)
 80059f4:	487a      	ldr	r0, [pc, #488]	@ (8005be0 <HAL_UART_RxCpltCallback+0x870>)
 80059f6:	f000 fffb 	bl	80069f0 <HAL_CAN_AddTxMessage>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d005      	beq.n	8005a0c <HAL_UART_RxCpltCallback+0x69c>
													  	  	  	  	               {
													  	  	  	  	             	  Error_Handler();
 8005a00:	f000 fc9c 	bl	800633c <Error_Handler>
													  	  	  	  	               }
											break;
 8005a04:	e002      	b.n	8005a0c <HAL_UART_RxCpltCallback+0x69c>
					break;

					case 1:

					break;
 8005a06:	bf00      	nop
 8005a08:	f000 bc77 	b.w	80062fa <HAL_UART_RxCpltCallback+0xf8a>
											break;
 8005a0c:	bf00      	nop
				}
			break;
 8005a0e:	f000 bc74 	b.w	80062fa <HAL_UART_RxCpltCallback+0xf8a>
				case 50://2:new set point richiesta alto
					switch (Node[u].ControlWord_bool[4]) {
 8005a12:	4a71      	ldr	r2, [pc, #452]	@ (8005bd8 <HAL_UART_RxCpltCallback+0x868>)
 8005a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a16:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005a1a:	fb01 f303 	mul.w	r3, r1, r3
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 7350 	add.w	r3, r3, #832	@ 0x340
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	f040 80a8 	bne.w	8005b7c <HAL_UART_RxCpltCallback+0x80c>
						case 0:

						break;

						case 1:
							Node[u].ControlWord_bool[4]=0;
 8005a2c:	4a6a      	ldr	r2, [pc, #424]	@ (8005bd8 <HAL_UART_RxCpltCallback+0x868>)
 8005a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a30:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005a34:	fb01 f303 	mul.w	r3, r1, r3
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 7350 	add.w	r3, r3, #832	@ 0x340
 8005a3e:	2200      	movs	r2, #0
 8005a40:	701a      	strb	r2, [r3, #0]
							Node[u].ControlWord_app=0;
 8005a42:	4a65      	ldr	r2, [pc, #404]	@ (8005bd8 <HAL_UART_RxCpltCallback+0x868>)
 8005a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a46:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005a4a:	fb01 f303 	mul.w	r3, r1, r3
 8005a4e:	4413      	add	r3, r2
 8005a50:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005a54:	2200      	movs	r2, #0
 8005a56:	801a      	strh	r2, [r3, #0]
								for(int j=0;j<=15;j++){
 8005a58:	2300      	movs	r3, #0
 8005a5a:	623b      	str	r3, [r7, #32]
 8005a5c:	e043      	b.n	8005ae6 <HAL_UART_RxCpltCallback+0x776>
									if(Node[u].ControlWord_bool[j]==1){
 8005a5e:	4a5e      	ldr	r2, [pc, #376]	@ (8005bd8 <HAL_UART_RxCpltCallback+0x868>)
 8005a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a62:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005a66:	fb01 f303 	mul.w	r3, r1, r3
 8005a6a:	441a      	add	r2, r3
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d032      	beq.n	8005ae0 <HAL_UART_RxCpltCallback+0x770>
											Node[u].ControlWord_app=Node[u].ControlWord_app+ pow(2, j);
 8005a7a:	4a57      	ldr	r2, [pc, #348]	@ (8005bd8 <HAL_UART_RxCpltCallback+0x868>)
 8005a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a7e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005a82:	fb01 f303 	mul.w	r3, r1, r3
 8005a86:	4413      	add	r3, r2
 8005a88:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fa fd14 	bl	80004bc <__aeabi_i2d>
 8005a94:	4604      	mov	r4, r0
 8005a96:	460d      	mov	r5, r1
 8005a98:	6a38      	ldr	r0, [r7, #32]
 8005a9a:	f7fa fd0f 	bl	80004bc <__aeabi_i2d>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	ec43 2b11 	vmov	d1, r2, r3
 8005aa6:	ed9f 0b4a 	vldr	d0, [pc, #296]	@ 8005bd0 <HAL_UART_RxCpltCallback+0x860>
 8005aaa:	f004 fb63 	bl	800a174 <pow>
 8005aae:	ec53 2b10 	vmov	r2, r3, d0
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	f7fa fbb5 	bl	8000224 <__adddf3>
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	4610      	mov	r0, r2
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	f7fb f815 	bl	8000af0 <__aeabi_d2uiz>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	b298      	uxth	r0, r3
 8005aca:	4a43      	ldr	r2, [pc, #268]	@ (8005bd8 <HAL_UART_RxCpltCallback+0x868>)
 8005acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ace:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005ad2:	fb01 f303 	mul.w	r3, r1, r3
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005adc:	4602      	mov	r2, r0
 8005ade:	801a      	strh	r2, [r3, #0]
								for(int j=0;j<=15;j++){
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	623b      	str	r3, [r7, #32]
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	2b0f      	cmp	r3, #15
 8005aea:	ddb8      	ble.n	8005a5e <HAL_UART_RxCpltCallback+0x6ee>
									}
								}
							Node[u].TxData_PDO[0][0]=(Node[u].ControlWord_app >> 0)  & 0xFF;
 8005aec:	4a3a      	ldr	r2, [pc, #232]	@ (8005bd8 <HAL_UART_RxCpltCallback+0x868>)
 8005aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005af4:	fb01 f303 	mul.w	r3, r1, r3
 8005af8:	4413      	add	r3, r2
 8005afa:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005afe:	881b      	ldrh	r3, [r3, #0]
 8005b00:	b2d8      	uxtb	r0, r3
 8005b02:	4a35      	ldr	r2, [pc, #212]	@ (8005bd8 <HAL_UART_RxCpltCallback+0x868>)
 8005b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b06:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005b0a:	fb01 f303 	mul.w	r3, r1, r3
 8005b0e:	4413      	add	r3, r2
 8005b10:	337c      	adds	r3, #124	@ 0x7c
 8005b12:	4602      	mov	r2, r0
 8005b14:	701a      	strb	r2, [r3, #0]
							Node[u].TxData_PDO[0][1]=(Node[u].ControlWord_app >> 8)  & 0xFF;
 8005b16:	4a30      	ldr	r2, [pc, #192]	@ (8005bd8 <HAL_UART_RxCpltCallback+0x868>)
 8005b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b1a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005b1e:	fb01 f303 	mul.w	r3, r1, r3
 8005b22:	4413      	add	r3, r2
 8005b24:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	0a1b      	lsrs	r3, r3, #8
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	b2d8      	uxtb	r0, r3
 8005b30:	4a29      	ldr	r2, [pc, #164]	@ (8005bd8 <HAL_UART_RxCpltCallback+0x868>)
 8005b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b34:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005b38:	fb01 f303 	mul.w	r3, r1, r3
 8005b3c:	4413      	add	r3, r2
 8005b3e:	337d      	adds	r3, #125	@ 0x7d
 8005b40:	4602      	mov	r2, r0
 8005b42:	701a      	strb	r2, [r3, #0]
							if (HAL_CAN_AddTxMessage(&hcan1, &Node[u].Tx_STD_Header_PDO[0], Node[u].TxData_PDO[0], &TxMailbox[0]) != HAL_OK)
 8005b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b46:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 8005b4a:	fb02 f303 	mul.w	r3, r2, r3
 8005b4e:	3318      	adds	r3, #24
 8005b50:	4a21      	ldr	r2, [pc, #132]	@ (8005bd8 <HAL_UART_RxCpltCallback+0x868>)
 8005b52:	4413      	add	r3, r2
 8005b54:	1d19      	adds	r1, r3, #4
 8005b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b58:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 8005b5c:	fb02 f303 	mul.w	r3, r2, r3
 8005b60:	3378      	adds	r3, #120	@ 0x78
 8005b62:	4a1d      	ldr	r2, [pc, #116]	@ (8005bd8 <HAL_UART_RxCpltCallback+0x868>)
 8005b64:	4413      	add	r3, r2
 8005b66:	1d1a      	adds	r2, r3, #4
 8005b68:	4b1c      	ldr	r3, [pc, #112]	@ (8005bdc <HAL_UART_RxCpltCallback+0x86c>)
 8005b6a:	481d      	ldr	r0, [pc, #116]	@ (8005be0 <HAL_UART_RxCpltCallback+0x870>)
 8005b6c:	f000 ff40 	bl	80069f0 <HAL_CAN_AddTxMessage>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d004      	beq.n	8005b80 <HAL_UART_RxCpltCallback+0x810>
							{
								 Error_Handler();
 8005b76:	f000 fbe1 	bl	800633c <Error_Handler>
							}
							break;
 8005b7a:	e001      	b.n	8005b80 <HAL_UART_RxCpltCallback+0x810>
						break;
 8005b7c:	bf00      	nop
 8005b7e:	e3bc      	b.n	80062fa <HAL_UART_RxCpltCallback+0xf8a>
							break;
 8005b80:	bf00      	nop
						}
						break;
 8005b82:	e3ba      	b.n	80062fa <HAL_UART_RxCpltCallback+0xf8a>
					case 51://3:new set point(ovvero l'equivalente del goto) richiesta basso
						switch (Node[u].ControlWord_bool[4]) {
 8005b84:	4a14      	ldr	r2, [pc, #80]	@ (8005bd8 <HAL_UART_RxCpltCallback+0x868>)
 8005b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b88:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005b8c:	fb01 f303 	mul.w	r3, r1, r3
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 7350 	add.w	r3, r3, #832	@ 0x340
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	f000 80b2 	beq.w	8005d02 <HAL_UART_RxCpltCallback+0x992>
							case 0:
								Node[u].ControlWord_bool[4]=1;
 8005b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8005bd8 <HAL_UART_RxCpltCallback+0x868>)
 8005ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ba2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005ba6:	fb01 f303 	mul.w	r3, r1, r3
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 7350 	add.w	r3, r3, #832	@ 0x340
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	701a      	strb	r2, [r3, #0]
								Node[u].ControlWord_app=0;
 8005bb4:	4a08      	ldr	r2, [pc, #32]	@ (8005bd8 <HAL_UART_RxCpltCallback+0x868>)
 8005bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bb8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005bbc:	fb01 f303 	mul.w	r3, r1, r3
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	801a      	strh	r2, [r3, #0]
									for(int j=0;j<=15;j++){
 8005bca:	2300      	movs	r3, #0
 8005bcc:	61fb      	str	r3, [r7, #28]
 8005bce:	e04d      	b.n	8005c6c <HAL_UART_RxCpltCallback+0x8fc>
 8005bd0:	00000000 	.word	0x00000000
 8005bd4:	40000000 	.word	0x40000000
 8005bd8:	20000190 	.word	0x20000190
 8005bdc:	200008f4 	.word	0x200008f4
 8005be0:	20000078 	.word	0x20000078
										if(Node[u].ControlWord_bool[j]==1){
 8005be4:	4aba      	ldr	r2, [pc, #744]	@ (8005ed0 <HAL_UART_RxCpltCallback+0xb60>)
 8005be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005be8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005bec:	fb01 f303 	mul.w	r3, r1, r3
 8005bf0:	441a      	add	r2, r3
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d032      	beq.n	8005c66 <HAL_UART_RxCpltCallback+0x8f6>
											Node[u].ControlWord_app=Node[u].ControlWord_app+ pow(2, j);
 8005c00:	4ab3      	ldr	r2, [pc, #716]	@ (8005ed0 <HAL_UART_RxCpltCallback+0xb60>)
 8005c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c04:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005c08:	fb01 f303 	mul.w	r3, r1, r3
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7fa fc51 	bl	80004bc <__aeabi_i2d>
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	460d      	mov	r5, r1
 8005c1e:	69f8      	ldr	r0, [r7, #28]
 8005c20:	f7fa fc4c 	bl	80004bc <__aeabi_i2d>
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	ec43 2b11 	vmov	d1, r2, r3
 8005c2c:	ed9f 0ba6 	vldr	d0, [pc, #664]	@ 8005ec8 <HAL_UART_RxCpltCallback+0xb58>
 8005c30:	f004 faa0 	bl	800a174 <pow>
 8005c34:	ec53 2b10 	vmov	r2, r3, d0
 8005c38:	4620      	mov	r0, r4
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	f7fa faf2 	bl	8000224 <__adddf3>
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	4610      	mov	r0, r2
 8005c46:	4619      	mov	r1, r3
 8005c48:	f7fa ff52 	bl	8000af0 <__aeabi_d2uiz>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	b298      	uxth	r0, r3
 8005c50:	4a9f      	ldr	r2, [pc, #636]	@ (8005ed0 <HAL_UART_RxCpltCallback+0xb60>)
 8005c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c54:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005c58:	fb01 f303 	mul.w	r3, r1, r3
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005c62:	4602      	mov	r2, r0
 8005c64:	801a      	strh	r2, [r3, #0]
									for(int j=0;j<=15;j++){
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	61fb      	str	r3, [r7, #28]
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	2b0f      	cmp	r3, #15
 8005c70:	ddb8      	ble.n	8005be4 <HAL_UART_RxCpltCallback+0x874>
										}
																		  	  	  	}
										Node[u].TxData_PDO[0][0]=(Node[u].ControlWord_app >> 0)  & 0xFF;
 8005c72:	4a97      	ldr	r2, [pc, #604]	@ (8005ed0 <HAL_UART_RxCpltCallback+0xb60>)
 8005c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c76:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005c7a:	fb01 f303 	mul.w	r3, r1, r3
 8005c7e:	4413      	add	r3, r2
 8005c80:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	b2d8      	uxtb	r0, r3
 8005c88:	4a91      	ldr	r2, [pc, #580]	@ (8005ed0 <HAL_UART_RxCpltCallback+0xb60>)
 8005c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c8c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005c90:	fb01 f303 	mul.w	r3, r1, r3
 8005c94:	4413      	add	r3, r2
 8005c96:	337c      	adds	r3, #124	@ 0x7c
 8005c98:	4602      	mov	r2, r0
 8005c9a:	701a      	strb	r2, [r3, #0]
										Node[u].TxData_PDO[0][1]=(Node[u].ControlWord_app >> 8)  & 0xFF;
 8005c9c:	4a8c      	ldr	r2, [pc, #560]	@ (8005ed0 <HAL_UART_RxCpltCallback+0xb60>)
 8005c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005ca4:	fb01 f303 	mul.w	r3, r1, r3
 8005ca8:	4413      	add	r3, r2
 8005caa:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	0a1b      	lsrs	r3, r3, #8
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	b2d8      	uxtb	r0, r3
 8005cb6:	4a86      	ldr	r2, [pc, #536]	@ (8005ed0 <HAL_UART_RxCpltCallback+0xb60>)
 8005cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cba:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005cbe:	fb01 f303 	mul.w	r3, r1, r3
 8005cc2:	4413      	add	r3, r2
 8005cc4:	337d      	adds	r3, #125	@ 0x7d
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	701a      	strb	r2, [r3, #0]
									if (HAL_CAN_AddTxMessage(&hcan1, &Node[u].Tx_STD_Header_PDO[0], Node[u].TxData_PDO[0], &TxMailbox[0]) != HAL_OK)
 8005cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ccc:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 8005cd0:	fb02 f303 	mul.w	r3, r2, r3
 8005cd4:	3318      	adds	r3, #24
 8005cd6:	4a7e      	ldr	r2, [pc, #504]	@ (8005ed0 <HAL_UART_RxCpltCallback+0xb60>)
 8005cd8:	4413      	add	r3, r2
 8005cda:	1d19      	adds	r1, r3, #4
 8005cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cde:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 8005ce2:	fb02 f303 	mul.w	r3, r2, r3
 8005ce6:	3378      	adds	r3, #120	@ 0x78
 8005ce8:	4a79      	ldr	r2, [pc, #484]	@ (8005ed0 <HAL_UART_RxCpltCallback+0xb60>)
 8005cea:	4413      	add	r3, r2
 8005cec:	1d1a      	adds	r2, r3, #4
 8005cee:	4b79      	ldr	r3, [pc, #484]	@ (8005ed4 <HAL_UART_RxCpltCallback+0xb64>)
 8005cf0:	4879      	ldr	r0, [pc, #484]	@ (8005ed8 <HAL_UART_RxCpltCallback+0xb68>)
 8005cf2:	f000 fe7d 	bl	80069f0 <HAL_CAN_AddTxMessage>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d004      	beq.n	8005d06 <HAL_UART_RxCpltCallback+0x996>
									{
										Error_Handler();
 8005cfc:	f000 fb1e 	bl	800633c <Error_Handler>
									}
								break;
 8005d00:	e001      	b.n	8005d06 <HAL_UART_RxCpltCallback+0x996>
							break;

							case 1:

							break;
 8005d02:	bf00      	nop
 8005d04:	e2f9      	b.n	80062fa <HAL_UART_RxCpltCallback+0xf8a>
								break;
 8005d06:	bf00      	nop
						}
					break;
 8005d08:	e2f7      	b.n	80062fa <HAL_UART_RxCpltCallback+0xf8a>
						case 52://4:change set immediately richiesta alto
											switch (Node[u].ControlWord_bool[5]) {
 8005d0a:	4a71      	ldr	r2, [pc, #452]	@ (8005ed0 <HAL_UART_RxCpltCallback+0xb60>)
 8005d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d0e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005d12:	fb01 f303 	mul.w	r3, r1, r3
 8005d16:	4413      	add	r3, r2
 8005d18:	f203 3341 	addw	r3, r3, #833	@ 0x341
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	f040 80a8 	bne.w	8005e74 <HAL_UART_RxCpltCallback+0xb04>
												case 0:

												break;

												case 1:
													Node[u].ControlWord_bool[5]=0;
 8005d24:	4a6a      	ldr	r2, [pc, #424]	@ (8005ed0 <HAL_UART_RxCpltCallback+0xb60>)
 8005d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d28:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005d2c:	fb01 f303 	mul.w	r3, r1, r3
 8005d30:	4413      	add	r3, r2
 8005d32:	f203 3341 	addw	r3, r3, #833	@ 0x341
 8005d36:	2200      	movs	r2, #0
 8005d38:	701a      	strb	r2, [r3, #0]
													Node[u].ControlWord_app=0;
 8005d3a:	4a65      	ldr	r2, [pc, #404]	@ (8005ed0 <HAL_UART_RxCpltCallback+0xb60>)
 8005d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d3e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005d42:	fb01 f303 	mul.w	r3, r1, r3
 8005d46:	4413      	add	r3, r2
 8005d48:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	801a      	strh	r2, [r3, #0]
														for(int j=0;j<=15;j++){
 8005d50:	2300      	movs	r3, #0
 8005d52:	61bb      	str	r3, [r7, #24]
 8005d54:	e043      	b.n	8005dde <HAL_UART_RxCpltCallback+0xa6e>
															if(Node[u].ControlWord_bool[j]==1){
 8005d56:	4a5e      	ldr	r2, [pc, #376]	@ (8005ed0 <HAL_UART_RxCpltCallback+0xb60>)
 8005d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d5a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005d5e:	fb01 f303 	mul.w	r3, r1, r3
 8005d62:	441a      	add	r2, r3
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d032      	beq.n	8005dd8 <HAL_UART_RxCpltCallback+0xa68>
																	Node[u].ControlWord_app=Node[u].ControlWord_app+ pow(2, j);
 8005d72:	4a57      	ldr	r2, [pc, #348]	@ (8005ed0 <HAL_UART_RxCpltCallback+0xb60>)
 8005d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d76:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005d7a:	fb01 f303 	mul.w	r3, r1, r3
 8005d7e:	4413      	add	r3, r2
 8005d80:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fa fb98 	bl	80004bc <__aeabi_i2d>
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	460d      	mov	r5, r1
 8005d90:	69b8      	ldr	r0, [r7, #24]
 8005d92:	f7fa fb93 	bl	80004bc <__aeabi_i2d>
 8005d96:	4602      	mov	r2, r0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	ec43 2b11 	vmov	d1, r2, r3
 8005d9e:	ed9f 0b4a 	vldr	d0, [pc, #296]	@ 8005ec8 <HAL_UART_RxCpltCallback+0xb58>
 8005da2:	f004 f9e7 	bl	800a174 <pow>
 8005da6:	ec53 2b10 	vmov	r2, r3, d0
 8005daa:	4620      	mov	r0, r4
 8005dac:	4629      	mov	r1, r5
 8005dae:	f7fa fa39 	bl	8000224 <__adddf3>
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	4610      	mov	r0, r2
 8005db8:	4619      	mov	r1, r3
 8005dba:	f7fa fe99 	bl	8000af0 <__aeabi_d2uiz>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	b298      	uxth	r0, r3
 8005dc2:	4a43      	ldr	r2, [pc, #268]	@ (8005ed0 <HAL_UART_RxCpltCallback+0xb60>)
 8005dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005dca:	fb01 f303 	mul.w	r3, r1, r3
 8005dce:	4413      	add	r3, r2
 8005dd0:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	801a      	strh	r2, [r3, #0]
														for(int j=0;j<=15;j++){
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	61bb      	str	r3, [r7, #24]
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	2b0f      	cmp	r3, #15
 8005de2:	ddb8      	ble.n	8005d56 <HAL_UART_RxCpltCallback+0x9e6>
															}
														}
													Node[u].TxData_PDO[0][0]=(Node[u].ControlWord_app >> 0)  & 0xFF;
 8005de4:	4a3a      	ldr	r2, [pc, #232]	@ (8005ed0 <HAL_UART_RxCpltCallback+0xb60>)
 8005de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005de8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005dec:	fb01 f303 	mul.w	r3, r1, r3
 8005df0:	4413      	add	r3, r2
 8005df2:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005df6:	881b      	ldrh	r3, [r3, #0]
 8005df8:	b2d8      	uxtb	r0, r3
 8005dfa:	4a35      	ldr	r2, [pc, #212]	@ (8005ed0 <HAL_UART_RxCpltCallback+0xb60>)
 8005dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfe:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005e02:	fb01 f303 	mul.w	r3, r1, r3
 8005e06:	4413      	add	r3, r2
 8005e08:	337c      	adds	r3, #124	@ 0x7c
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	701a      	strb	r2, [r3, #0]
													Node[u].TxData_PDO[0][1]=(Node[u].ControlWord_app >> 8)  & 0xFF;
 8005e0e:	4a30      	ldr	r2, [pc, #192]	@ (8005ed0 <HAL_UART_RxCpltCallback+0xb60>)
 8005e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e12:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005e16:	fb01 f303 	mul.w	r3, r1, r3
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	0a1b      	lsrs	r3, r3, #8
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	b2d8      	uxtb	r0, r3
 8005e28:	4a29      	ldr	r2, [pc, #164]	@ (8005ed0 <HAL_UART_RxCpltCallback+0xb60>)
 8005e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e2c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005e30:	fb01 f303 	mul.w	r3, r1, r3
 8005e34:	4413      	add	r3, r2
 8005e36:	337d      	adds	r3, #125	@ 0x7d
 8005e38:	4602      	mov	r2, r0
 8005e3a:	701a      	strb	r2, [r3, #0]
													if (HAL_CAN_AddTxMessage(&hcan1, &Node[u].Tx_STD_Header_PDO[0], Node[u].TxData_PDO[0], &TxMailbox[0]) != HAL_OK)
 8005e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e3e:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 8005e42:	fb02 f303 	mul.w	r3, r2, r3
 8005e46:	3318      	adds	r3, #24
 8005e48:	4a21      	ldr	r2, [pc, #132]	@ (8005ed0 <HAL_UART_RxCpltCallback+0xb60>)
 8005e4a:	4413      	add	r3, r2
 8005e4c:	1d19      	adds	r1, r3, #4
 8005e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e50:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 8005e54:	fb02 f303 	mul.w	r3, r2, r3
 8005e58:	3378      	adds	r3, #120	@ 0x78
 8005e5a:	4a1d      	ldr	r2, [pc, #116]	@ (8005ed0 <HAL_UART_RxCpltCallback+0xb60>)
 8005e5c:	4413      	add	r3, r2
 8005e5e:	1d1a      	adds	r2, r3, #4
 8005e60:	4b1c      	ldr	r3, [pc, #112]	@ (8005ed4 <HAL_UART_RxCpltCallback+0xb64>)
 8005e62:	481d      	ldr	r0, [pc, #116]	@ (8005ed8 <HAL_UART_RxCpltCallback+0xb68>)
 8005e64:	f000 fdc4 	bl	80069f0 <HAL_CAN_AddTxMessage>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d004      	beq.n	8005e78 <HAL_UART_RxCpltCallback+0xb08>
													{
														 Error_Handler();
 8005e6e:	f000 fa65 	bl	800633c <Error_Handler>
													}
													break;
 8005e72:	e001      	b.n	8005e78 <HAL_UART_RxCpltCallback+0xb08>
												break;
 8005e74:	bf00      	nop
 8005e76:	e240      	b.n	80062fa <HAL_UART_RxCpltCallback+0xf8a>
													break;
 8005e78:	bf00      	nop
												}
												break;
 8005e7a:	e23e      	b.n	80062fa <HAL_UART_RxCpltCallback+0xf8a>
											case 53://5:change set immediately richiesta basso
												switch (Node[u].ControlWord_bool[5]) {
 8005e7c:	4a14      	ldr	r2, [pc, #80]	@ (8005ed0 <HAL_UART_RxCpltCallback+0xb60>)
 8005e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e80:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005e84:	fb01 f303 	mul.w	r3, r1, r3
 8005e88:	4413      	add	r3, r2
 8005e8a:	f203 3341 	addw	r3, r3, #833	@ 0x341
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	f000 80b2 	beq.w	8005ffa <HAL_UART_RxCpltCallback+0xc8a>
													case 0:
														Node[u].ControlWord_bool[5]=1;
 8005e96:	4a0e      	ldr	r2, [pc, #56]	@ (8005ed0 <HAL_UART_RxCpltCallback+0xb60>)
 8005e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e9a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005e9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f203 3341 	addw	r3, r3, #833	@ 0x341
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	701a      	strb	r2, [r3, #0]
														Node[u].ControlWord_app=0;
 8005eac:	4a08      	ldr	r2, [pc, #32]	@ (8005ed0 <HAL_UART_RxCpltCallback+0xb60>)
 8005eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005eb4:	fb01 f303 	mul.w	r3, r1, r3
 8005eb8:	4413      	add	r3, r2
 8005eba:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	801a      	strh	r2, [r3, #0]
															for(int j=0;j<=15;j++){
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	617b      	str	r3, [r7, #20]
 8005ec6:	e04d      	b.n	8005f64 <HAL_UART_RxCpltCallback+0xbf4>
 8005ec8:	00000000 	.word	0x00000000
 8005ecc:	40000000 	.word	0x40000000
 8005ed0:	20000190 	.word	0x20000190
 8005ed4:	200008f4 	.word	0x200008f4
 8005ed8:	20000078 	.word	0x20000078
																if(Node[u].ControlWord_bool[j]==1){
 8005edc:	4aba      	ldr	r2, [pc, #744]	@ (80061c8 <HAL_UART_RxCpltCallback+0xe58>)
 8005ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ee0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005ee4:	fb01 f303 	mul.w	r3, r1, r3
 8005ee8:	441a      	add	r2, r3
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d032      	beq.n	8005f5e <HAL_UART_RxCpltCallback+0xbee>
																	Node[u].ControlWord_app=Node[u].ControlWord_app+ pow(2, j);
 8005ef8:	4ab3      	ldr	r2, [pc, #716]	@ (80061c8 <HAL_UART_RxCpltCallback+0xe58>)
 8005efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005efc:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005f00:	fb01 f303 	mul.w	r3, r1, r3
 8005f04:	4413      	add	r3, r2
 8005f06:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fa fad5 	bl	80004bc <__aeabi_i2d>
 8005f12:	4604      	mov	r4, r0
 8005f14:	460d      	mov	r5, r1
 8005f16:	6978      	ldr	r0, [r7, #20]
 8005f18:	f7fa fad0 	bl	80004bc <__aeabi_i2d>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	ec43 2b11 	vmov	d1, r2, r3
 8005f24:	ed9f 0ba6 	vldr	d0, [pc, #664]	@ 80061c0 <HAL_UART_RxCpltCallback+0xe50>
 8005f28:	f004 f924 	bl	800a174 <pow>
 8005f2c:	ec53 2b10 	vmov	r2, r3, d0
 8005f30:	4620      	mov	r0, r4
 8005f32:	4629      	mov	r1, r5
 8005f34:	f7fa f976 	bl	8000224 <__adddf3>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	4619      	mov	r1, r3
 8005f40:	f7fa fdd6 	bl	8000af0 <__aeabi_d2uiz>
 8005f44:	4603      	mov	r3, r0
 8005f46:	b298      	uxth	r0, r3
 8005f48:	4a9f      	ldr	r2, [pc, #636]	@ (80061c8 <HAL_UART_RxCpltCallback+0xe58>)
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f4c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005f50:	fb01 f303 	mul.w	r3, r1, r3
 8005f54:	4413      	add	r3, r2
 8005f56:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	801a      	strh	r2, [r3, #0]
															for(int j=0;j<=15;j++){
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	3301      	adds	r3, #1
 8005f62:	617b      	str	r3, [r7, #20]
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	2b0f      	cmp	r3, #15
 8005f68:	ddb8      	ble.n	8005edc <HAL_UART_RxCpltCallback+0xb6c>
																}
																								  	  	  	}
																Node[u].TxData_PDO[0][0]=(Node[u].ControlWord_app >> 0)  & 0xFF;
 8005f6a:	4a97      	ldr	r2, [pc, #604]	@ (80061c8 <HAL_UART_RxCpltCallback+0xe58>)
 8005f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f6e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005f72:	fb01 f303 	mul.w	r3, r1, r3
 8005f76:	4413      	add	r3, r2
 8005f78:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	b2d8      	uxtb	r0, r3
 8005f80:	4a91      	ldr	r2, [pc, #580]	@ (80061c8 <HAL_UART_RxCpltCallback+0xe58>)
 8005f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f84:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005f88:	fb01 f303 	mul.w	r3, r1, r3
 8005f8c:	4413      	add	r3, r2
 8005f8e:	337c      	adds	r3, #124	@ 0x7c
 8005f90:	4602      	mov	r2, r0
 8005f92:	701a      	strb	r2, [r3, #0]
																Node[u].TxData_PDO[0][1]=(Node[u].ControlWord_app >> 8)  & 0xFF;
 8005f94:	4a8c      	ldr	r2, [pc, #560]	@ (80061c8 <HAL_UART_RxCpltCallback+0xe58>)
 8005f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f98:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005f9c:	fb01 f303 	mul.w	r3, r1, r3
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	0a1b      	lsrs	r3, r3, #8
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	b2d8      	uxtb	r0, r3
 8005fae:	4a86      	ldr	r2, [pc, #536]	@ (80061c8 <HAL_UART_RxCpltCallback+0xe58>)
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb2:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005fb6:	fb01 f303 	mul.w	r3, r1, r3
 8005fba:	4413      	add	r3, r2
 8005fbc:	337d      	adds	r3, #125	@ 0x7d
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	701a      	strb	r2, [r3, #0]
															if (HAL_CAN_AddTxMessage(&hcan1, &Node[u].Tx_STD_Header_PDO[0], Node[u].TxData_PDO[0], &TxMailbox[0]) != HAL_OK)
 8005fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fc4:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 8005fc8:	fb02 f303 	mul.w	r3, r2, r3
 8005fcc:	3318      	adds	r3, #24
 8005fce:	4a7e      	ldr	r2, [pc, #504]	@ (80061c8 <HAL_UART_RxCpltCallback+0xe58>)
 8005fd0:	4413      	add	r3, r2
 8005fd2:	1d19      	adds	r1, r3, #4
 8005fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd6:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 8005fda:	fb02 f303 	mul.w	r3, r2, r3
 8005fde:	3378      	adds	r3, #120	@ 0x78
 8005fe0:	4a79      	ldr	r2, [pc, #484]	@ (80061c8 <HAL_UART_RxCpltCallback+0xe58>)
 8005fe2:	4413      	add	r3, r2
 8005fe4:	1d1a      	adds	r2, r3, #4
 8005fe6:	4b79      	ldr	r3, [pc, #484]	@ (80061cc <HAL_UART_RxCpltCallback+0xe5c>)
 8005fe8:	4879      	ldr	r0, [pc, #484]	@ (80061d0 <HAL_UART_RxCpltCallback+0xe60>)
 8005fea:	f000 fd01 	bl	80069f0 <HAL_CAN_AddTxMessage>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d004      	beq.n	8005ffe <HAL_UART_RxCpltCallback+0xc8e>
															{
																Error_Handler();
 8005ff4:	f000 f9a2 	bl	800633c <Error_Handler>
															}
														break;
 8005ff8:	e001      	b.n	8005ffe <HAL_UART_RxCpltCallback+0xc8e>
													break;

													case 1:

													break;
 8005ffa:	bf00      	nop
 8005ffc:	e17d      	b.n	80062fa <HAL_UART_RxCpltCallback+0xf8a>
														break;
 8005ffe:	bf00      	nop
												}
											break;
 8006000:	e17b      	b.n	80062fa <HAL_UART_RxCpltCallback+0xf8a>
												case 54://5:aboslute/relative richiesta alto
																switch (Node[u].ControlWord_bool[6]) {
 8006002:	4a71      	ldr	r2, [pc, #452]	@ (80061c8 <HAL_UART_RxCpltCallback+0xe58>)
 8006004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006006:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800600a:	fb01 f303 	mul.w	r3, r1, r3
 800600e:	4413      	add	r3, r2
 8006010:	f203 3342 	addw	r3, r3, #834	@ 0x342
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b01      	cmp	r3, #1
 8006018:	f040 80a8 	bne.w	800616c <HAL_UART_RxCpltCallback+0xdfc>
																	case 0:

																	break;

																	case 1:
																		Node[u].ControlWord_bool[6]=0;
 800601c:	4a6a      	ldr	r2, [pc, #424]	@ (80061c8 <HAL_UART_RxCpltCallback+0xe58>)
 800601e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006020:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8006024:	fb01 f303 	mul.w	r3, r1, r3
 8006028:	4413      	add	r3, r2
 800602a:	f203 3342 	addw	r3, r3, #834	@ 0x342
 800602e:	2200      	movs	r2, #0
 8006030:	701a      	strb	r2, [r3, #0]
																		Node[u].ControlWord_app=0;
 8006032:	4a65      	ldr	r2, [pc, #404]	@ (80061c8 <HAL_UART_RxCpltCallback+0xe58>)
 8006034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006036:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800603a:	fb01 f303 	mul.w	r3, r1, r3
 800603e:	4413      	add	r3, r2
 8006040:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8006044:	2200      	movs	r2, #0
 8006046:	801a      	strh	r2, [r3, #0]
																			  	  	  	for(int j=0;j<=15;j++){
 8006048:	2300      	movs	r3, #0
 800604a:	613b      	str	r3, [r7, #16]
 800604c:	e043      	b.n	80060d6 <HAL_UART_RxCpltCallback+0xd66>
																			  	  	  		if(Node[u].ControlWord_bool[j]==1){
 800604e:	4a5e      	ldr	r2, [pc, #376]	@ (80061c8 <HAL_UART_RxCpltCallback+0xe58>)
 8006050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006052:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8006056:	fb01 f303 	mul.w	r3, r1, r3
 800605a:	441a      	add	r2, r3
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	4413      	add	r3, r2
 8006060:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d032      	beq.n	80060d0 <HAL_UART_RxCpltCallback+0xd60>
																			  	  	  		Node[u].ControlWord_app=Node[u].ControlWord_app+ pow(2, j);
 800606a:	4a57      	ldr	r2, [pc, #348]	@ (80061c8 <HAL_UART_RxCpltCallback+0xe58>)
 800606c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800606e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8006072:	fb01 f303 	mul.w	r3, r1, r3
 8006076:	4413      	add	r3, r2
 8006078:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	4618      	mov	r0, r3
 8006080:	f7fa fa1c 	bl	80004bc <__aeabi_i2d>
 8006084:	4604      	mov	r4, r0
 8006086:	460d      	mov	r5, r1
 8006088:	6938      	ldr	r0, [r7, #16]
 800608a:	f7fa fa17 	bl	80004bc <__aeabi_i2d>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	ec43 2b11 	vmov	d1, r2, r3
 8006096:	ed9f 0b4a 	vldr	d0, [pc, #296]	@ 80061c0 <HAL_UART_RxCpltCallback+0xe50>
 800609a:	f004 f86b 	bl	800a174 <pow>
 800609e:	ec53 2b10 	vmov	r2, r3, d0
 80060a2:	4620      	mov	r0, r4
 80060a4:	4629      	mov	r1, r5
 80060a6:	f7fa f8bd 	bl	8000224 <__adddf3>
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	4610      	mov	r0, r2
 80060b0:	4619      	mov	r1, r3
 80060b2:	f7fa fd1d 	bl	8000af0 <__aeabi_d2uiz>
 80060b6:	4603      	mov	r3, r0
 80060b8:	b298      	uxth	r0, r3
 80060ba:	4a43      	ldr	r2, [pc, #268]	@ (80061c8 <HAL_UART_RxCpltCallback+0xe58>)
 80060bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060be:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80060c2:	fb01 f303 	mul.w	r3, r1, r3
 80060c6:	4413      	add	r3, r2
 80060c8:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 80060cc:	4602      	mov	r2, r0
 80060ce:	801a      	strh	r2, [r3, #0]
																			  	  	  	for(int j=0;j<=15;j++){
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	3301      	adds	r3, #1
 80060d4:	613b      	str	r3, [r7, #16]
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	2b0f      	cmp	r3, #15
 80060da:	ddb8      	ble.n	800604e <HAL_UART_RxCpltCallback+0xcde>
																			  	  	  		}
																			  	  	  	}
																			  	  	Node[u].TxData_PDO[0][0]=(Node[u].ControlWord_app >> 0)  & 0xFF;
 80060dc:	4a3a      	ldr	r2, [pc, #232]	@ (80061c8 <HAL_UART_RxCpltCallback+0xe58>)
 80060de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80060e4:	fb01 f303 	mul.w	r3, r1, r3
 80060e8:	4413      	add	r3, r2
 80060ea:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	b2d8      	uxtb	r0, r3
 80060f2:	4a35      	ldr	r2, [pc, #212]	@ (80061c8 <HAL_UART_RxCpltCallback+0xe58>)
 80060f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060f6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80060fa:	fb01 f303 	mul.w	r3, r1, r3
 80060fe:	4413      	add	r3, r2
 8006100:	337c      	adds	r3, #124	@ 0x7c
 8006102:	4602      	mov	r2, r0
 8006104:	701a      	strb	r2, [r3, #0]
																			  	  	Node[u].TxData_PDO[0][1]=(Node[u].ControlWord_app >> 8)  & 0xFF;
 8006106:	4a30      	ldr	r2, [pc, #192]	@ (80061c8 <HAL_UART_RxCpltCallback+0xe58>)
 8006108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800610a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800610e:	fb01 f303 	mul.w	r3, r1, r3
 8006112:	4413      	add	r3, r2
 8006114:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	0a1b      	lsrs	r3, r3, #8
 800611c:	b29b      	uxth	r3, r3
 800611e:	b2d8      	uxtb	r0, r3
 8006120:	4a29      	ldr	r2, [pc, #164]	@ (80061c8 <HAL_UART_RxCpltCallback+0xe58>)
 8006122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006124:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8006128:	fb01 f303 	mul.w	r3, r1, r3
 800612c:	4413      	add	r3, r2
 800612e:	337d      	adds	r3, #125	@ 0x7d
 8006130:	4602      	mov	r2, r0
 8006132:	701a      	strb	r2, [r3, #0]
																			  	  if (HAL_CAN_AddTxMessage(&hcan1, &Node[u].Tx_STD_Header_PDO[0], Node[u].TxData_PDO[0], &TxMailbox[0]) != HAL_OK)
 8006134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006136:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 800613a:	fb02 f303 	mul.w	r3, r2, r3
 800613e:	3318      	adds	r3, #24
 8006140:	4a21      	ldr	r2, [pc, #132]	@ (80061c8 <HAL_UART_RxCpltCallback+0xe58>)
 8006142:	4413      	add	r3, r2
 8006144:	1d19      	adds	r1, r3, #4
 8006146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006148:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 800614c:	fb02 f303 	mul.w	r3, r2, r3
 8006150:	3378      	adds	r3, #120	@ 0x78
 8006152:	4a1d      	ldr	r2, [pc, #116]	@ (80061c8 <HAL_UART_RxCpltCallback+0xe58>)
 8006154:	4413      	add	r3, r2
 8006156:	1d1a      	adds	r2, r3, #4
 8006158:	4b1c      	ldr	r3, [pc, #112]	@ (80061cc <HAL_UART_RxCpltCallback+0xe5c>)
 800615a:	481d      	ldr	r0, [pc, #116]	@ (80061d0 <HAL_UART_RxCpltCallback+0xe60>)
 800615c:	f000 fc48 	bl	80069f0 <HAL_CAN_AddTxMessage>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d004      	beq.n	8006170 <HAL_UART_RxCpltCallback+0xe00>
																			  	  	  	  	               {
																			  	  	  	  	             	  Error_Handler();
 8006166:	f000 f8e9 	bl	800633c <Error_Handler>
																			  	  	  	  	               }
																	break;
 800616a:	e001      	b.n	8006170 <HAL_UART_RxCpltCallback+0xe00>
																	break;
 800616c:	bf00      	nop
 800616e:	e0c4      	b.n	80062fa <HAL_UART_RxCpltCallback+0xf8a>
																	break;
 8006170:	bf00      	nop
																}
															break;
 8006172:	e0c2      	b.n	80062fa <HAL_UART_RxCpltCallback+0xf8a>

															case 55://6:aboslute/relative richiesta basso
																switch (Node[u].ControlWord_bool[6]) {
 8006174:	4a14      	ldr	r2, [pc, #80]	@ (80061c8 <HAL_UART_RxCpltCallback+0xe58>)
 8006176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006178:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800617c:	fb01 f303 	mul.w	r3, r1, r3
 8006180:	4413      	add	r3, r2
 8006182:	f203 3342 	addw	r3, r3, #834	@ 0x342
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b01      	cmp	r3, #1
 800618a:	f000 80b2 	beq.w	80062f2 <HAL_UART_RxCpltCallback+0xf82>
																	case 0:
																		Node[u].ControlWord_bool[6]=1;
 800618e:	4a0e      	ldr	r2, [pc, #56]	@ (80061c8 <HAL_UART_RxCpltCallback+0xe58>)
 8006190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006192:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8006196:	fb01 f303 	mul.w	r3, r1, r3
 800619a:	4413      	add	r3, r2
 800619c:	f203 3342 	addw	r3, r3, #834	@ 0x342
 80061a0:	2201      	movs	r2, #1
 80061a2:	701a      	strb	r2, [r3, #0]
																								Node[u].ControlWord_app=0;
 80061a4:	4a08      	ldr	r2, [pc, #32]	@ (80061c8 <HAL_UART_RxCpltCallback+0xe58>)
 80061a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061a8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80061ac:	fb01 f303 	mul.w	r3, r1, r3
 80061b0:	4413      	add	r3, r2
 80061b2:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 80061b6:	2200      	movs	r2, #0
 80061b8:	801a      	strh	r2, [r3, #0]
																									  	  	  	for(int j=0;j<=15;j++){
 80061ba:	2300      	movs	r3, #0
 80061bc:	60fb      	str	r3, [r7, #12]
 80061be:	e04d      	b.n	800625c <HAL_UART_RxCpltCallback+0xeec>
 80061c0:	00000000 	.word	0x00000000
 80061c4:	40000000 	.word	0x40000000
 80061c8:	20000190 	.word	0x20000190
 80061cc:	200008f4 	.word	0x200008f4
 80061d0:	20000078 	.word	0x20000078
																									  	  	  		if(Node[u].ControlWord_bool[j]==1){
 80061d4:	4a54      	ldr	r2, [pc, #336]	@ (8006328 <HAL_UART_RxCpltCallback+0xfb8>)
 80061d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061d8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80061dc:	fb01 f303 	mul.w	r3, r1, r3
 80061e0:	441a      	add	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d032      	beq.n	8006256 <HAL_UART_RxCpltCallback+0xee6>
																									  	  	  		Node[u].ControlWord_app=Node[u].ControlWord_app+ pow(2, j);
 80061f0:	4a4d      	ldr	r2, [pc, #308]	@ (8006328 <HAL_UART_RxCpltCallback+0xfb8>)
 80061f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80061f8:	fb01 f303 	mul.w	r3, r1, r3
 80061fc:	4413      	add	r3, r2
 80061fe:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	4618      	mov	r0, r3
 8006206:	f7fa f959 	bl	80004bc <__aeabi_i2d>
 800620a:	4604      	mov	r4, r0
 800620c:	460d      	mov	r5, r1
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f7fa f954 	bl	80004bc <__aeabi_i2d>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	ec43 2b11 	vmov	d1, r2, r3
 800621c:	ed9f 0b40 	vldr	d0, [pc, #256]	@ 8006320 <HAL_UART_RxCpltCallback+0xfb0>
 8006220:	f003 ffa8 	bl	800a174 <pow>
 8006224:	ec53 2b10 	vmov	r2, r3, d0
 8006228:	4620      	mov	r0, r4
 800622a:	4629      	mov	r1, r5
 800622c:	f7f9 fffa 	bl	8000224 <__adddf3>
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	4610      	mov	r0, r2
 8006236:	4619      	mov	r1, r3
 8006238:	f7fa fc5a 	bl	8000af0 <__aeabi_d2uiz>
 800623c:	4603      	mov	r3, r0
 800623e:	b298      	uxth	r0, r3
 8006240:	4a39      	ldr	r2, [pc, #228]	@ (8006328 <HAL_UART_RxCpltCallback+0xfb8>)
 8006242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006244:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8006248:	fb01 f303 	mul.w	r3, r1, r3
 800624c:	4413      	add	r3, r2
 800624e:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8006252:	4602      	mov	r2, r0
 8006254:	801a      	strh	r2, [r3, #0]
																									  	  	  	for(int j=0;j<=15;j++){
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3301      	adds	r3, #1
 800625a:	60fb      	str	r3, [r7, #12]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2b0f      	cmp	r3, #15
 8006260:	ddb8      	ble.n	80061d4 <HAL_UART_RxCpltCallback+0xe64>
																									  	  	  		}
																									  	  	  	}
																									  	  	Node[u].TxData_PDO[0][0]=(Node[u].ControlWord_app >> 0)  & 0xFF;
 8006262:	4a31      	ldr	r2, [pc, #196]	@ (8006328 <HAL_UART_RxCpltCallback+0xfb8>)
 8006264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006266:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800626a:	fb01 f303 	mul.w	r3, r1, r3
 800626e:	4413      	add	r3, r2
 8006270:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	b2d8      	uxtb	r0, r3
 8006278:	4a2b      	ldr	r2, [pc, #172]	@ (8006328 <HAL_UART_RxCpltCallback+0xfb8>)
 800627a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800627c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8006280:	fb01 f303 	mul.w	r3, r1, r3
 8006284:	4413      	add	r3, r2
 8006286:	337c      	adds	r3, #124	@ 0x7c
 8006288:	4602      	mov	r2, r0
 800628a:	701a      	strb	r2, [r3, #0]
																									  	  	Node[u].TxData_PDO[0][1]=(Node[u].ControlWord_app >> 8)  & 0xFF;
 800628c:	4a26      	ldr	r2, [pc, #152]	@ (8006328 <HAL_UART_RxCpltCallback+0xfb8>)
 800628e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006290:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8006294:	fb01 f303 	mul.w	r3, r1, r3
 8006298:	4413      	add	r3, r2
 800629a:	f203 333a 	addw	r3, r3, #826	@ 0x33a
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	0a1b      	lsrs	r3, r3, #8
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	b2d8      	uxtb	r0, r3
 80062a6:	4a20      	ldr	r2, [pc, #128]	@ (8006328 <HAL_UART_RxCpltCallback+0xfb8>)
 80062a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062aa:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80062ae:	fb01 f303 	mul.w	r3, r1, r3
 80062b2:	4413      	add	r3, r2
 80062b4:	337d      	adds	r3, #125	@ 0x7d
 80062b6:	4602      	mov	r2, r0
 80062b8:	701a      	strb	r2, [r3, #0]
																									  	  if (HAL_CAN_AddTxMessage(&hcan1, &Node[u].Tx_STD_Header_PDO[0], Node[u].TxData_PDO[0], &TxMailbox[0]) != HAL_OK)
 80062ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062bc:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 80062c0:	fb02 f303 	mul.w	r3, r2, r3
 80062c4:	3318      	adds	r3, #24
 80062c6:	4a18      	ldr	r2, [pc, #96]	@ (8006328 <HAL_UART_RxCpltCallback+0xfb8>)
 80062c8:	4413      	add	r3, r2
 80062ca:	1d19      	adds	r1, r3, #4
 80062cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ce:	f44f 7267 	mov.w	r2, #924	@ 0x39c
 80062d2:	fb02 f303 	mul.w	r3, r2, r3
 80062d6:	3378      	adds	r3, #120	@ 0x78
 80062d8:	4a13      	ldr	r2, [pc, #76]	@ (8006328 <HAL_UART_RxCpltCallback+0xfb8>)
 80062da:	4413      	add	r3, r2
 80062dc:	1d1a      	adds	r2, r3, #4
 80062de:	4b13      	ldr	r3, [pc, #76]	@ (800632c <HAL_UART_RxCpltCallback+0xfbc>)
 80062e0:	4813      	ldr	r0, [pc, #76]	@ (8006330 <HAL_UART_RxCpltCallback+0xfc0>)
 80062e2:	f000 fb85 	bl	80069f0 <HAL_CAN_AddTxMessage>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d004      	beq.n	80062f6 <HAL_UART_RxCpltCallback+0xf86>
																									  	  	  	  	               {
																									  	  	  	  	             	  Error_Handler();
 80062ec:	f000 f826 	bl	800633c <Error_Handler>
																									  	  	  	  	               }
																							break;
 80062f0:	e001      	b.n	80062f6 <HAL_UART_RxCpltCallback+0xf86>
																	break;

																	case 1:

																	break;
 80062f2:	bf00      	nop
 80062f4:	e000      	b.n	80062f8 <HAL_UART_RxCpltCallback+0xf88>
																							break;
 80062f6:	bf00      	nop
																}
															break;
 80062f8:	bf00      	nop
		}
		//HAL_UART_Receive_IT(&huart2, Rx_general_UART_Buffer, sizeof(Rx_general_UART_Buffer));
		HAL_UART_Receive_DMA(&huart2, Rx_general_UART_Buffer, sizeof(Rx_general_UART_Buffer));
 80062fa:	2226      	movs	r2, #38	@ 0x26
 80062fc:	490d      	ldr	r1, [pc, #52]	@ (8006334 <HAL_UART_RxCpltCallback+0xfc4>)
 80062fe:	480e      	ldr	r0, [pc, #56]	@ (8006338 <HAL_UART_RxCpltCallback+0xfc8>)
 8006300:	f002 fe32 	bl	8008f68 <HAL_UART_Receive_DMA>
 8006304:	e000      	b.n	8006308 <HAL_UART_RxCpltCallback+0xf98>
		if(Rx_general_UART_Buffer[0]-48!=Node[u].BASE_ID_NODE) continue;//discorso sulla modularità:del numero di nodi, del numero, dello svincolamento dalla knowedge dei nodi(ad alto livello dico solo quale voglio pilotare con lo sterzo e quale voglio pilotare con la trazione), attualmente non vedo un metodo per fare entrambi....è fattibile ma non ci siamo arrivati.
 8006306:	bf00      	nop
	for (int u=0;u<=NUMBER_OF_NODES;u++){
 8006308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800630a:	3301      	adds	r3, #1
 800630c:	637b      	str	r3, [r7, #52]	@ 0x34
 800630e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006310:	2b02      	cmp	r3, #2
 8006312:	f77f a835 	ble.w	8005380 <HAL_UART_RxCpltCallback+0x10>
	}




}
 8006316:	bf00      	nop
 8006318:	bf00      	nop
 800631a:	3738      	adds	r7, #56	@ 0x38
 800631c:	46bd      	mov	sp, r7
 800631e:	bdb0      	pop	{r4, r5, r7, pc}
 8006320:	00000000 	.word	0x00000000
 8006324:	40000000 	.word	0x40000000
 8006328:	20000190 	.word	0x20000190
 800632c:	200008f4 	.word	0x200008f4
 8006330:	20000078 	.word	0x20000078
 8006334:	200008cc 	.word	0x200008cc
 8006338:	200000e8 	.word	0x200000e8

0800633c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800633c:	b480      	push	{r7}
 800633e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006340:	b672      	cpsid	i
}
 8006342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006344:	bf00      	nop
 8006346:	e7fd      	b.n	8006344 <Error_Handler+0x8>

08006348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006348:	b480      	push	{r7}
 800634a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800634c:	bf00      	nop
 800634e:	e7fd      	b.n	800634c <NMI_Handler+0x4>

08006350 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006354:	bf00      	nop
 8006356:	e7fd      	b.n	8006354 <HardFault_Handler+0x4>

08006358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006358:	b480      	push	{r7}
 800635a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800635c:	bf00      	nop
 800635e:	e7fd      	b.n	800635c <MemManage_Handler+0x4>

08006360 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006360:	b480      	push	{r7}
 8006362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006364:	bf00      	nop
 8006366:	e7fd      	b.n	8006364 <BusFault_Handler+0x4>

08006368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800636c:	bf00      	nop
 800636e:	e7fd      	b.n	800636c <UsageFault_Handler+0x4>

08006370 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006370:	b480      	push	{r7}
 8006372:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006374:	bf00      	nop
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800637e:	b480      	push	{r7}
 8006380:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006382:	bf00      	nop
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006390:	bf00      	nop
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800639e:	f000 f8df 	bl	8006560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80063a2:	bf00      	nop
 80063a4:	bd80      	pop	{r7, pc}
	...

080063a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80063ac:	4802      	ldr	r0, [pc, #8]	@ (80063b8 <DMA1_Stream5_IRQHandler+0x10>)
 80063ae:	f001 f97b 	bl	80076a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80063b2:	bf00      	nop
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20000130 	.word	0x20000130

080063bc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80063c0:	4802      	ldr	r0, [pc, #8]	@ (80063cc <CAN1_TX_IRQHandler+0x10>)
 80063c2:	f000 fd2d 	bl	8006e20 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80063c6:	bf00      	nop
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	20000078 	.word	0x20000078

080063d0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80063d4:	4802      	ldr	r0, [pc, #8]	@ (80063e0 <CAN1_RX0_IRQHandler+0x10>)
 80063d6:	f000 fd23 	bl	8006e20 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80063da:	bf00      	nop
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	20000078 	.word	0x20000078

080063e4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80063e8:	4802      	ldr	r0, [pc, #8]	@ (80063f4 <CAN1_RX1_IRQHandler+0x10>)
 80063ea:	f000 fd19 	bl	8006e20 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80063ee:	bf00      	nop
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	20000078 	.word	0x20000078

080063f8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80063fc:	4802      	ldr	r0, [pc, #8]	@ (8006408 <CAN1_SCE_IRQHandler+0x10>)
 80063fe:	f000 fd0f 	bl	8006e20 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8006402:	bf00      	nop
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20000078 	.word	0x20000078

0800640c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8006410:	4802      	ldr	r0, [pc, #8]	@ (800641c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8006412:	f002 fb47 	bl	8008aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8006416:	bf00      	nop
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	200000a0 	.word	0x200000a0

08006420 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006424:	4802      	ldr	r0, [pc, #8]	@ (8006430 <USART2_IRQHandler+0x10>)
 8006426:	f002 fdc5 	bl	8008fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800642a:	bf00      	nop
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	200000e8 	.word	0x200000e8

08006434 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006434:	b480      	push	{r7}
 8006436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006438:	4b06      	ldr	r3, [pc, #24]	@ (8006454 <SystemInit+0x20>)
 800643a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800643e:	4a05      	ldr	r2, [pc, #20]	@ (8006454 <SystemInit+0x20>)
 8006440:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006444:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006448:	bf00      	nop
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	e000ed00 	.word	0xe000ed00

08006458 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006458:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006490 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800645c:	f7ff ffea 	bl	8006434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006460:	480c      	ldr	r0, [pc, #48]	@ (8006494 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006462:	490d      	ldr	r1, [pc, #52]	@ (8006498 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006464:	4a0d      	ldr	r2, [pc, #52]	@ (800649c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006468:	e002      	b.n	8006470 <LoopCopyDataInit>

0800646a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800646a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800646c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800646e:	3304      	adds	r3, #4

08006470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006474:	d3f9      	bcc.n	800646a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006476:	4a0a      	ldr	r2, [pc, #40]	@ (80064a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006478:	4c0a      	ldr	r4, [pc, #40]	@ (80064a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800647a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800647c:	e001      	b.n	8006482 <LoopFillZerobss>

0800647e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800647e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006480:	3204      	adds	r2, #4

08006482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006484:	d3fb      	bcc.n	800647e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8006486:	f003 fe51 	bl	800a12c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800648a:	f7fa fce9 	bl	8000e60 <main>
  bx  lr    
 800648e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006490:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006498:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800649c:	0800b0b8 	.word	0x0800b0b8
  ldr r2, =_sbss
 80064a0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80064a4:	20000a3c 	.word	0x20000a3c

080064a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80064a8:	e7fe      	b.n	80064a8 <ADC_IRQHandler>
	...

080064ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80064b0:	4b0e      	ldr	r3, [pc, #56]	@ (80064ec <HAL_Init+0x40>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a0d      	ldr	r2, [pc, #52]	@ (80064ec <HAL_Init+0x40>)
 80064b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80064ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80064bc:	4b0b      	ldr	r3, [pc, #44]	@ (80064ec <HAL_Init+0x40>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a0a      	ldr	r2, [pc, #40]	@ (80064ec <HAL_Init+0x40>)
 80064c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80064c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80064c8:	4b08      	ldr	r3, [pc, #32]	@ (80064ec <HAL_Init+0x40>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a07      	ldr	r2, [pc, #28]	@ (80064ec <HAL_Init+0x40>)
 80064ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064d4:	2003      	movs	r0, #3
 80064d6:	f000 ffbb 	bl	8007450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80064da:	2000      	movs	r0, #0
 80064dc:	f000 f810 	bl	8006500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80064e0:	f000 f806 	bl	80064f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	40023c00 	.word	0x40023c00

080064f0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80064f0:	b480      	push	{r7}
 80064f2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
	...

08006500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006508:	4b12      	ldr	r3, [pc, #72]	@ (8006554 <HAL_InitTick+0x54>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	4b12      	ldr	r3, [pc, #72]	@ (8006558 <HAL_InitTick+0x58>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	4619      	mov	r1, r3
 8006512:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006516:	fbb3 f3f1 	udiv	r3, r3, r1
 800651a:	fbb2 f3f3 	udiv	r3, r2, r3
 800651e:	4618      	mov	r0, r3
 8006520:	f000 ffcb 	bl	80074ba <HAL_SYSTICK_Config>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e00e      	b.n	800654c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b0f      	cmp	r3, #15
 8006532:	d80a      	bhi.n	800654a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006534:	2200      	movs	r2, #0
 8006536:	6879      	ldr	r1, [r7, #4]
 8006538:	f04f 30ff 	mov.w	r0, #4294967295
 800653c:	f000 ff93 	bl	8007466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006540:	4a06      	ldr	r2, [pc, #24]	@ (800655c <HAL_InitTick+0x5c>)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	e000      	b.n	800654c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
}
 800654c:	4618      	mov	r0, r3
 800654e:	3708      	adds	r7, #8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	20000000 	.word	0x20000000
 8006558:	20000008 	.word	0x20000008
 800655c:	20000004 	.word	0x20000004

08006560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006564:	4b06      	ldr	r3, [pc, #24]	@ (8006580 <HAL_IncTick+0x20>)
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	461a      	mov	r2, r3
 800656a:	4b06      	ldr	r3, [pc, #24]	@ (8006584 <HAL_IncTick+0x24>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4413      	add	r3, r2
 8006570:	4a04      	ldr	r2, [pc, #16]	@ (8006584 <HAL_IncTick+0x24>)
 8006572:	6013      	str	r3, [r2, #0]
}
 8006574:	bf00      	nop
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	20000008 	.word	0x20000008
 8006584:	20000900 	.word	0x20000900

08006588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
  return uwTick;
 800658c:	4b03      	ldr	r3, [pc, #12]	@ (800659c <HAL_GetTick+0x14>)
 800658e:	681b      	ldr	r3, [r3, #0]
}
 8006590:	4618      	mov	r0, r3
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	20000900 	.word	0x20000900

080065a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e0ed      	b.n	800678e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d102      	bne.n	80065c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f8e9 	bl	8006796 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f042 0201 	orr.w	r2, r2, #1
 80065d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065d4:	f7ff ffd8 	bl	8006588 <HAL_GetTick>
 80065d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80065da:	e012      	b.n	8006602 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80065dc:	f7ff ffd4 	bl	8006588 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b0a      	cmp	r3, #10
 80065e8:	d90b      	bls.n	8006602 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2205      	movs	r2, #5
 80065fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e0c5      	b.n	800678e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0e5      	beq.n	80065dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0202 	bic.w	r2, r2, #2
 800661e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006620:	f7ff ffb2 	bl	8006588 <HAL_GetTick>
 8006624:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006626:	e012      	b.n	800664e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006628:	f7ff ffae 	bl	8006588 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b0a      	cmp	r3, #10
 8006634:	d90b      	bls.n	800664e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2205      	movs	r2, #5
 8006646:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e09f      	b.n	800678e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1e5      	bne.n	8006628 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	7e1b      	ldrb	r3, [r3, #24]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d108      	bne.n	8006676 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	e007      	b.n	8006686 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006684:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	7e5b      	ldrb	r3, [r3, #25]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d108      	bne.n	80066a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	e007      	b.n	80066b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	7e9b      	ldrb	r3, [r3, #26]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d108      	bne.n	80066ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f042 0220 	orr.w	r2, r2, #32
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	e007      	b.n	80066da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 0220 	bic.w	r2, r2, #32
 80066d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	7edb      	ldrb	r3, [r3, #27]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d108      	bne.n	80066f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f022 0210 	bic.w	r2, r2, #16
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	e007      	b.n	8006704 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f042 0210 	orr.w	r2, r2, #16
 8006702:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	7f1b      	ldrb	r3, [r3, #28]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d108      	bne.n	800671e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0208 	orr.w	r2, r2, #8
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	e007      	b.n	800672e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f022 0208 	bic.w	r2, r2, #8
 800672c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	7f5b      	ldrb	r3, [r3, #29]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d108      	bne.n	8006748 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f042 0204 	orr.w	r2, r2, #4
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	e007      	b.n	8006758 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 0204 	bic.w	r2, r2, #4
 8006756:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	431a      	orrs	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	431a      	orrs	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	ea42 0103 	orr.w	r1, r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	1e5a      	subs	r2, r3, #1
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <HAL_CAN_MspInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8006796:	b480      	push	{r7}
 8006798:	b083      	sub	sp, #12
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_MspInit could be implemented in the user file
   */
}
 800679e:	bf00      	nop
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
	...

080067ac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80067bc:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 80067be:	7dfb      	ldrb	r3, [r7, #23]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d003      	beq.n	80067cc <HAL_CAN_ConfigFilter+0x20>
 80067c4:	7dfb      	ldrb	r3, [r7, #23]
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	f040 80be 	bne.w	8006948 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80067cc:	4b65      	ldr	r3, [pc, #404]	@ (8006964 <HAL_CAN_ConfigFilter+0x1b8>)
 80067ce:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80067d6:	f043 0201 	orr.w	r2, r3, #1
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80067e6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067fa:	021b      	lsls	r3, r3, #8
 80067fc:	431a      	orrs	r2, r3
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	f003 031f 	and.w	r3, r3, #31
 800680c:	2201      	movs	r2, #1
 800680e:	fa02 f303 	lsl.w	r3, r2, r3
 8006812:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	43db      	mvns	r3, r3
 800681e:	401a      	ands	r2, r3
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	69db      	ldr	r3, [r3, #28]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d123      	bne.n	8006876 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	43db      	mvns	r3, r3
 8006838:	401a      	ands	r2, r3
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006850:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	3248      	adds	r2, #72	@ 0x48
 8006856:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800686a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800686c:	6939      	ldr	r1, [r7, #16]
 800686e:	3348      	adds	r3, #72	@ 0x48
 8006870:	00db      	lsls	r3, r3, #3
 8006872:	440b      	add	r3, r1
 8006874:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d122      	bne.n	80068c4 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	431a      	orrs	r2, r3
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800689e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	3248      	adds	r2, #72	@ 0x48
 80068a4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80068b8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80068ba:	6939      	ldr	r1, [r7, #16]
 80068bc:	3348      	adds	r3, #72	@ 0x48
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	440b      	add	r3, r1
 80068c2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d109      	bne.n	80068e0 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	43db      	mvns	r3, r3
 80068d6:	401a      	ands	r2, r3
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80068de:	e007      	b.n	80068f0 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	431a      	orrs	r2, r3
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d109      	bne.n	800690c <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	43db      	mvns	r3, r3
 8006902:	401a      	ands	r2, r3
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800690a:	e007      	b.n	800691c <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	431a      	orrs	r2, r3
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d107      	bne.n	8006934 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	431a      	orrs	r2, r3
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800693a:	f023 0201 	bic.w	r2, r3, #1
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8006944:	2300      	movs	r3, #0
 8006946:	e006      	b.n	8006956 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
  }
}
 8006956:	4618      	mov	r0, r3
 8006958:	371c      	adds	r7, #28
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	40006400 	.word	0x40006400

08006968 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b01      	cmp	r3, #1
 800697a:	d12e      	bne.n	80069da <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0201 	bic.w	r2, r2, #1
 8006992:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006994:	f7ff fdf8 	bl	8006588 <HAL_GetTick>
 8006998:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800699a:	e012      	b.n	80069c2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800699c:	f7ff fdf4 	bl	8006588 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b0a      	cmp	r3, #10
 80069a8:	d90b      	bls.n	80069c2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2205      	movs	r2, #5
 80069ba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e012      	b.n	80069e8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1e5      	bne.n	800699c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	e006      	b.n	80069e8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069de:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
  }
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b089      	sub	sp, #36	@ 0x24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a04:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006a0e:	7ffb      	ldrb	r3, [r7, #31]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d003      	beq.n	8006a1c <HAL_CAN_AddTxMessage+0x2c>
 8006a14:	7ffb      	ldrb	r3, [r7, #31]
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	f040 80ad 	bne.w	8006b76 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10a      	bne.n	8006a3c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d105      	bne.n	8006a3c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 8095 	beq.w	8006b66 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	0e1b      	lsrs	r3, r3, #24
 8006a40:	f003 0303 	and.w	r3, r3, #3
 8006a44:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006a46:	2201      	movs	r2, #1
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	409a      	lsls	r2, r3
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10d      	bne.n	8006a74 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006a62:	68f9      	ldr	r1, [r7, #12]
 8006a64:	6809      	ldr	r1, [r1, #0]
 8006a66:	431a      	orrs	r2, r3
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	3318      	adds	r3, #24
 8006a6c:	011b      	lsls	r3, r3, #4
 8006a6e:	440b      	add	r3, r1
 8006a70:	601a      	str	r2, [r3, #0]
 8006a72:	e00f      	b.n	8006a94 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006a7e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006a84:	68f9      	ldr	r1, [r7, #12]
 8006a86:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006a88:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	3318      	adds	r3, #24
 8006a8e:	011b      	lsls	r3, r3, #4
 8006a90:	440b      	add	r3, r1
 8006a92:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6819      	ldr	r1, [r3, #0]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	691a      	ldr	r2, [r3, #16]
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	3318      	adds	r3, #24
 8006aa0:	011b      	lsls	r3, r3, #4
 8006aa2:	440b      	add	r3, r1
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	7d1b      	ldrb	r3, [r3, #20]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d111      	bne.n	8006ad4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	3318      	adds	r3, #24
 8006ab8:	011b      	lsls	r3, r3, #4
 8006aba:	4413      	add	r3, r2
 8006abc:	3304      	adds	r3, #4
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	6811      	ldr	r1, [r2, #0]
 8006ac4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	3318      	adds	r3, #24
 8006acc:	011b      	lsls	r3, r3, #4
 8006ace:	440b      	add	r3, r1
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3307      	adds	r3, #7
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	061a      	lsls	r2, r3, #24
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	3306      	adds	r3, #6
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	041b      	lsls	r3, r3, #16
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	3305      	adds	r3, #5
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	021b      	lsls	r3, r3, #8
 8006aee:	4313      	orrs	r3, r2
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	3204      	adds	r2, #4
 8006af4:	7812      	ldrb	r2, [r2, #0]
 8006af6:	4610      	mov	r0, r2
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	6811      	ldr	r1, [r2, #0]
 8006afc:	ea43 0200 	orr.w	r2, r3, r0
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	011b      	lsls	r3, r3, #4
 8006b04:	440b      	add	r3, r1
 8006b06:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8006b0a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	3303      	adds	r3, #3
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	061a      	lsls	r2, r3, #24
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	3302      	adds	r3, #2
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	041b      	lsls	r3, r3, #16
 8006b1c:	431a      	orrs	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	3301      	adds	r3, #1
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	021b      	lsls	r3, r3, #8
 8006b26:	4313      	orrs	r3, r2
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	7812      	ldrb	r2, [r2, #0]
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	6811      	ldr	r1, [r2, #0]
 8006b32:	ea43 0200 	orr.w	r2, r3, r0
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	011b      	lsls	r3, r3, #4
 8006b3a:	440b      	add	r3, r1
 8006b3c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8006b40:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	3318      	adds	r3, #24
 8006b4a:	011b      	lsls	r3, r3, #4
 8006b4c:	4413      	add	r3, r2
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	6811      	ldr	r1, [r2, #0]
 8006b54:	f043 0201 	orr.w	r2, r3, #1
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	3318      	adds	r3, #24
 8006b5c:	011b      	lsls	r3, r3, #4
 8006b5e:	440b      	add	r3, r1
 8006b60:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	e00e      	b.n	8006b84 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b6a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e006      	b.n	8006b84 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
  }
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3724      	adds	r7, #36	@ 0x24
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ba4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006ba6:	7dfb      	ldrb	r3, [r7, #23]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d003      	beq.n	8006bb4 <HAL_CAN_GetRxMessage+0x24>
 8006bac:	7dfb      	ldrb	r3, [r7, #23]
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	f040 8103 	bne.w	8006dba <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10e      	bne.n	8006bd8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f003 0303 	and.w	r3, r3, #3
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d116      	bne.n	8006bf6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bcc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e0f7      	b.n	8006dc8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	f003 0303 	and.w	r3, r3, #3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d107      	bne.n	8006bf6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e0e8      	b.n	8006dc8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	331b      	adds	r3, #27
 8006bfe:	011b      	lsls	r3, r3, #4
 8006c00:	4413      	add	r3, r2
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0204 	and.w	r2, r3, #4
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10c      	bne.n	8006c2e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	331b      	adds	r3, #27
 8006c1c:	011b      	lsls	r3, r3, #4
 8006c1e:	4413      	add	r3, r2
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	0d5b      	lsrs	r3, r3, #21
 8006c24:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	e00b      	b.n	8006c46 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	331b      	adds	r3, #27
 8006c36:	011b      	lsls	r3, r3, #4
 8006c38:	4413      	add	r3, r2
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	08db      	lsrs	r3, r3, #3
 8006c3e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	331b      	adds	r3, #27
 8006c4e:	011b      	lsls	r3, r3, #4
 8006c50:	4413      	add	r3, r2
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0202 	and.w	r2, r3, #2
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	331b      	adds	r3, #27
 8006c64:	011b      	lsls	r3, r3, #4
 8006c66:	4413      	add	r3, r2
 8006c68:	3304      	adds	r3, #4
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0308 	and.w	r3, r3, #8
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d003      	beq.n	8006c7c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2208      	movs	r2, #8
 8006c78:	611a      	str	r2, [r3, #16]
 8006c7a:	e00b      	b.n	8006c94 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	331b      	adds	r3, #27
 8006c84:	011b      	lsls	r3, r3, #4
 8006c86:	4413      	add	r3, r2
 8006c88:	3304      	adds	r3, #4
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 020f 	and.w	r2, r3, #15
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	331b      	adds	r3, #27
 8006c9c:	011b      	lsls	r3, r3, #4
 8006c9e:	4413      	add	r3, r2
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	0a1b      	lsrs	r3, r3, #8
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	331b      	adds	r3, #27
 8006cb4:	011b      	lsls	r3, r3, #4
 8006cb6:	4413      	add	r3, r2
 8006cb8:	3304      	adds	r3, #4
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	0c1b      	lsrs	r3, r3, #16
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	011b      	lsls	r3, r3, #4
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	011b      	lsls	r3, r3, #4
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	0a1a      	lsrs	r2, r3, #8
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	b2d2      	uxtb	r2, r2
 8006cf2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	011b      	lsls	r3, r3, #4
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	0c1a      	lsrs	r2, r3, #16
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	3302      	adds	r3, #2
 8006d0a:	b2d2      	uxtb	r2, r2
 8006d0c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	011b      	lsls	r3, r3, #4
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	0e1a      	lsrs	r2, r3, #24
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	3303      	adds	r3, #3
 8006d24:	b2d2      	uxtb	r2, r2
 8006d26:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	011b      	lsls	r3, r3, #4
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	3304      	adds	r3, #4
 8006d3c:	b2d2      	uxtb	r2, r2
 8006d3e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	011b      	lsls	r3, r3, #4
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	0a1a      	lsrs	r2, r3, #8
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	3305      	adds	r3, #5
 8006d56:	b2d2      	uxtb	r2, r2
 8006d58:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	011b      	lsls	r3, r3, #4
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	0c1a      	lsrs	r2, r3, #16
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	3306      	adds	r3, #6
 8006d70:	b2d2      	uxtb	r2, r2
 8006d72:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	011b      	lsls	r3, r3, #4
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	0e1a      	lsrs	r2, r3, #24
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	3307      	adds	r3, #7
 8006d8a:	b2d2      	uxtb	r2, r2
 8006d8c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d108      	bne.n	8006da6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68da      	ldr	r2, [r3, #12]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0220 	orr.w	r2, r2, #32
 8006da2:	60da      	str	r2, [r3, #12]
 8006da4:	e007      	b.n	8006db6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	691a      	ldr	r2, [r3, #16]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f042 0220 	orr.w	r2, r2, #32
 8006db4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	e006      	b.n	8006dc8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dbe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
  }
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	371c      	adds	r7, #28
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006de4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d002      	beq.n	8006df2 <HAL_CAN_ActivateNotification+0x1e>
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d109      	bne.n	8006e06 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6959      	ldr	r1, [r3, #20]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006e02:	2300      	movs	r3, #0
 8006e04:	e006      	b.n	8006e14 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
  }
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b08a      	sub	sp, #40	@ 0x28
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d07c      	beq.n	8006f60 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d023      	beq.n	8006eb8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2201      	movs	r2, #1
 8006e76:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d003      	beq.n	8006e8a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f983 	bl	800718e <HAL_CAN_TxMailbox0CompleteCallback>
 8006e88:	e016      	b.n	8006eb8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d004      	beq.n	8006e9e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e96:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006e9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e9c:	e00c      	b.n	8006eb8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	f003 0308 	and.w	r3, r3, #8
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d004      	beq.n	8006eb2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eaa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006eae:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eb0:	e002      	b.n	8006eb8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f989 	bl	80071ca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d024      	beq.n	8006f0c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006eca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f963 	bl	80071a2 <HAL_CAN_TxMailbox1CompleteCallback>
 8006edc:	e016      	b.n	8006f0c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d004      	beq.n	8006ef2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ef0:	e00c      	b.n	8006f0c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d004      	beq.n	8006f06 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f02:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f04:	e002      	b.n	8006f0c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f969 	bl	80071de <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d024      	beq.n	8006f60 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006f1e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d003      	beq.n	8006f32 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f943 	bl	80071b6 <HAL_CAN_TxMailbox2CompleteCallback>
 8006f30:	e016      	b.n	8006f60 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d004      	beq.n	8006f46 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f42:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f44:	e00c      	b.n	8006f60 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d004      	beq.n	8006f5a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f58:	e002      	b.n	8006f60 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f949 	bl	80071f2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	f003 0308 	and.w	r3, r3, #8
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00c      	beq.n	8006f84 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f003 0310 	and.w	r3, r3, #16
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d007      	beq.n	8006f84 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006f7a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2210      	movs	r2, #16
 8006f82:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	f003 0304 	and.w	r3, r3, #4
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00b      	beq.n	8006fa6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f003 0308 	and.w	r3, r3, #8
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d006      	beq.n	8006fa6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2208      	movs	r2, #8
 8006f9e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f930 	bl	8007206 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006fa6:	6a3b      	ldr	r3, [r7, #32]
 8006fa8:	f003 0302 	and.w	r3, r3, #2
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d009      	beq.n	8006fc4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	f003 0303 	and.w	r3, r3, #3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d002      	beq.n	8006fc4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7fd ff1a 	bl	8004df8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006fc4:	6a3b      	ldr	r3, [r7, #32]
 8006fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00c      	beq.n	8006fe8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	f003 0310 	and.w	r3, r3, #16
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d007      	beq.n	8006fe8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006fde:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2210      	movs	r2, #16
 8006fe6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	f003 0320 	and.w	r3, r3, #32
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00b      	beq.n	800700a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f003 0308 	and.w	r3, r3, #8
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d006      	beq.n	800700a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2208      	movs	r2, #8
 8007002:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f908 	bl	800721a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	f003 0310 	and.w	r3, r3, #16
 8007010:	2b00      	cmp	r3, #0
 8007012:	d009      	beq.n	8007028 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	f003 0303 	and.w	r3, r3, #3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d002      	beq.n	8007028 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7fd ff1c 	bl	8004e60 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00b      	beq.n	800704a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	f003 0310 	and.w	r3, r3, #16
 8007038:	2b00      	cmp	r3, #0
 800703a:	d006      	beq.n	800704a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2210      	movs	r2, #16
 8007042:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f8f2 	bl	800722e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00b      	beq.n	800706c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d006      	beq.n	800706c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2208      	movs	r2, #8
 8007064:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f8eb 	bl	8007242 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d07b      	beq.n	800716e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	f003 0304 	and.w	r3, r3, #4
 800707c:	2b00      	cmp	r3, #0
 800707e:	d072      	beq.n	8007166 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007080:	6a3b      	ldr	r3, [r7, #32]
 8007082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007086:	2b00      	cmp	r3, #0
 8007088:	d008      	beq.n	800709c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007090:	2b00      	cmp	r3, #0
 8007092:	d003      	beq.n	800709c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007096:	f043 0301 	orr.w	r3, r3, #1
 800709a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800709c:	6a3b      	ldr	r3, [r7, #32]
 800709e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d008      	beq.n	80070b8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d003      	beq.n	80070b8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80070b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b2:	f043 0302 	orr.w	r3, r3, #2
 80070b6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d008      	beq.n	80070d4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d003      	beq.n	80070d4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80070cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ce:	f043 0304 	orr.w	r3, r3, #4
 80070d2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d043      	beq.n	8007166 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d03e      	beq.n	8007166 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070ee:	2b60      	cmp	r3, #96	@ 0x60
 80070f0:	d02b      	beq.n	800714a <HAL_CAN_IRQHandler+0x32a>
 80070f2:	2b60      	cmp	r3, #96	@ 0x60
 80070f4:	d82e      	bhi.n	8007154 <HAL_CAN_IRQHandler+0x334>
 80070f6:	2b50      	cmp	r3, #80	@ 0x50
 80070f8:	d022      	beq.n	8007140 <HAL_CAN_IRQHandler+0x320>
 80070fa:	2b50      	cmp	r3, #80	@ 0x50
 80070fc:	d82a      	bhi.n	8007154 <HAL_CAN_IRQHandler+0x334>
 80070fe:	2b40      	cmp	r3, #64	@ 0x40
 8007100:	d019      	beq.n	8007136 <HAL_CAN_IRQHandler+0x316>
 8007102:	2b40      	cmp	r3, #64	@ 0x40
 8007104:	d826      	bhi.n	8007154 <HAL_CAN_IRQHandler+0x334>
 8007106:	2b30      	cmp	r3, #48	@ 0x30
 8007108:	d010      	beq.n	800712c <HAL_CAN_IRQHandler+0x30c>
 800710a:	2b30      	cmp	r3, #48	@ 0x30
 800710c:	d822      	bhi.n	8007154 <HAL_CAN_IRQHandler+0x334>
 800710e:	2b10      	cmp	r3, #16
 8007110:	d002      	beq.n	8007118 <HAL_CAN_IRQHandler+0x2f8>
 8007112:	2b20      	cmp	r3, #32
 8007114:	d005      	beq.n	8007122 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007116:	e01d      	b.n	8007154 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711a:	f043 0308 	orr.w	r3, r3, #8
 800711e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007120:	e019      	b.n	8007156 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007124:	f043 0310 	orr.w	r3, r3, #16
 8007128:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800712a:	e014      	b.n	8007156 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800712c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712e:	f043 0320 	orr.w	r3, r3, #32
 8007132:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007134:	e00f      	b.n	8007156 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007138:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800713c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800713e:	e00a      	b.n	8007156 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007146:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007148:	e005      	b.n	8007156 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800714a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007150:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007152:	e000      	b.n	8007156 <HAL_CAN_IRQHandler+0x336>
            break;
 8007154:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	699a      	ldr	r2, [r3, #24]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007164:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2204      	movs	r2, #4
 800716c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800716e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007170:	2b00      	cmp	r3, #0
 8007172:	d008      	beq.n	8007186 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717a:	431a      	orrs	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f868 	bl	8007256 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007186:	bf00      	nop
 8007188:	3728      	adds	r7, #40	@ 0x28
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800718e:	b480      	push	{r7}
 8007190:	b083      	sub	sp, #12
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007196:	bf00      	nop
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b083      	sub	sp, #12
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80071aa:	bf00      	nop
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b083      	sub	sp, #12
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80071be:	bf00      	nop
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b083      	sub	sp, #12
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80071d2:	bf00      	nop
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80071de:	b480      	push	{r7}
 80071e0:	b083      	sub	sp, #12
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80071e6:	bf00      	nop
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b083      	sub	sp, #12
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80071fa:	bf00      	nop
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007206:	b480      	push	{r7}
 8007208:	b083      	sub	sp, #12
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800720e:	bf00      	nop
 8007210:	370c      	adds	r7, #12
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800721a:	b480      	push	{r7}
 800721c:	b083      	sub	sp, #12
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007222:	bf00      	nop
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007236:	bf00      	nop
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007242:	b480      	push	{r7}
 8007244:	b083      	sub	sp, #12
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007256:	b480      	push	{r7}
 8007258:	b083      	sub	sp, #12
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800725e:	bf00      	nop
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 800726a:	b480      	push	{r7}
 800726c:	b085      	sub	sp, #20
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007272:	2300      	movs	r3, #0
 8007274:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 3020 	ldrb.w	r3, [r3, #32]
 800727c:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 800727e:	7bbb      	ldrb	r3, [r7, #14]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d002      	beq.n	800728a <HAL_CAN_ResetError+0x20>
 8007284:	7bbb      	ldrb	r3, [r7, #14]
 8007286:	2b02      	cmp	r3, #2
 8007288:	d103      	bne.n	8007292 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007290:	e007      	b.n	80072a2 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007296:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	625a      	str	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f003 0307 	and.w	r3, r3, #7
 80072be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80072c0:	4b0c      	ldr	r3, [pc, #48]	@ (80072f4 <__NVIC_SetPriorityGrouping+0x44>)
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80072cc:	4013      	ands	r3, r2
 80072ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80072d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80072dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80072e2:	4a04      	ldr	r2, [pc, #16]	@ (80072f4 <__NVIC_SetPriorityGrouping+0x44>)
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	60d3      	str	r3, [r2, #12]
}
 80072e8:	bf00      	nop
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	e000ed00 	.word	0xe000ed00

080072f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80072f8:	b480      	push	{r7}
 80072fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80072fc:	4b04      	ldr	r3, [pc, #16]	@ (8007310 <__NVIC_GetPriorityGrouping+0x18>)
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	0a1b      	lsrs	r3, r3, #8
 8007302:	f003 0307 	and.w	r3, r3, #7
}
 8007306:	4618      	mov	r0, r3
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	e000ed00 	.word	0xe000ed00

08007314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	4603      	mov	r3, r0
 800731c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800731e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007322:	2b00      	cmp	r3, #0
 8007324:	db0b      	blt.n	800733e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007326:	79fb      	ldrb	r3, [r7, #7]
 8007328:	f003 021f 	and.w	r2, r3, #31
 800732c:	4907      	ldr	r1, [pc, #28]	@ (800734c <__NVIC_EnableIRQ+0x38>)
 800732e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007332:	095b      	lsrs	r3, r3, #5
 8007334:	2001      	movs	r0, #1
 8007336:	fa00 f202 	lsl.w	r2, r0, r2
 800733a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800733e:	bf00      	nop
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	e000e100 	.word	0xe000e100

08007350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	4603      	mov	r3, r0
 8007358:	6039      	str	r1, [r7, #0]
 800735a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800735c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007360:	2b00      	cmp	r3, #0
 8007362:	db0a      	blt.n	800737a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	b2da      	uxtb	r2, r3
 8007368:	490c      	ldr	r1, [pc, #48]	@ (800739c <__NVIC_SetPriority+0x4c>)
 800736a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800736e:	0112      	lsls	r2, r2, #4
 8007370:	b2d2      	uxtb	r2, r2
 8007372:	440b      	add	r3, r1
 8007374:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007378:	e00a      	b.n	8007390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	b2da      	uxtb	r2, r3
 800737e:	4908      	ldr	r1, [pc, #32]	@ (80073a0 <__NVIC_SetPriority+0x50>)
 8007380:	79fb      	ldrb	r3, [r7, #7]
 8007382:	f003 030f 	and.w	r3, r3, #15
 8007386:	3b04      	subs	r3, #4
 8007388:	0112      	lsls	r2, r2, #4
 800738a:	b2d2      	uxtb	r2, r2
 800738c:	440b      	add	r3, r1
 800738e:	761a      	strb	r2, [r3, #24]
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	e000e100 	.word	0xe000e100
 80073a0:	e000ed00 	.word	0xe000ed00

080073a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b089      	sub	sp, #36	@ 0x24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f003 0307 	and.w	r3, r3, #7
 80073b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	f1c3 0307 	rsb	r3, r3, #7
 80073be:	2b04      	cmp	r3, #4
 80073c0:	bf28      	it	cs
 80073c2:	2304      	movcs	r3, #4
 80073c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	3304      	adds	r3, #4
 80073ca:	2b06      	cmp	r3, #6
 80073cc:	d902      	bls.n	80073d4 <NVIC_EncodePriority+0x30>
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	3b03      	subs	r3, #3
 80073d2:	e000      	b.n	80073d6 <NVIC_EncodePriority+0x32>
 80073d4:	2300      	movs	r3, #0
 80073d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073d8:	f04f 32ff 	mov.w	r2, #4294967295
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	fa02 f303 	lsl.w	r3, r2, r3
 80073e2:	43da      	mvns	r2, r3
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	401a      	ands	r2, r3
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80073ec:	f04f 31ff 	mov.w	r1, #4294967295
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	fa01 f303 	lsl.w	r3, r1, r3
 80073f6:	43d9      	mvns	r1, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073fc:	4313      	orrs	r3, r2
         );
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3724      	adds	r7, #36	@ 0x24
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
	...

0800740c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	3b01      	subs	r3, #1
 8007418:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800741c:	d301      	bcc.n	8007422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800741e:	2301      	movs	r3, #1
 8007420:	e00f      	b.n	8007442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007422:	4a0a      	ldr	r2, [pc, #40]	@ (800744c <SysTick_Config+0x40>)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	3b01      	subs	r3, #1
 8007428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800742a:	210f      	movs	r1, #15
 800742c:	f04f 30ff 	mov.w	r0, #4294967295
 8007430:	f7ff ff8e 	bl	8007350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007434:	4b05      	ldr	r3, [pc, #20]	@ (800744c <SysTick_Config+0x40>)
 8007436:	2200      	movs	r2, #0
 8007438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800743a:	4b04      	ldr	r3, [pc, #16]	@ (800744c <SysTick_Config+0x40>)
 800743c:	2207      	movs	r2, #7
 800743e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	e000e010 	.word	0xe000e010

08007450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f7ff ff29 	bl	80072b0 <__NVIC_SetPriorityGrouping>
}
 800745e:	bf00      	nop
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007466:	b580      	push	{r7, lr}
 8007468:	b086      	sub	sp, #24
 800746a:	af00      	add	r7, sp, #0
 800746c:	4603      	mov	r3, r0
 800746e:	60b9      	str	r1, [r7, #8]
 8007470:	607a      	str	r2, [r7, #4]
 8007472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007474:	2300      	movs	r3, #0
 8007476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007478:	f7ff ff3e 	bl	80072f8 <__NVIC_GetPriorityGrouping>
 800747c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	68b9      	ldr	r1, [r7, #8]
 8007482:	6978      	ldr	r0, [r7, #20]
 8007484:	f7ff ff8e 	bl	80073a4 <NVIC_EncodePriority>
 8007488:	4602      	mov	r2, r0
 800748a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800748e:	4611      	mov	r1, r2
 8007490:	4618      	mov	r0, r3
 8007492:	f7ff ff5d 	bl	8007350 <__NVIC_SetPriority>
}
 8007496:	bf00      	nop
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b082      	sub	sp, #8
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	4603      	mov	r3, r0
 80074a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80074a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7ff ff31 	bl	8007314 <__NVIC_EnableIRQ>
}
 80074b2:	bf00      	nop
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b082      	sub	sp, #8
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7ff ffa2 	bl	800740c <SysTick_Config>
 80074c8:	4603      	mov	r3, r0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b086      	sub	sp, #24
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	60f8      	str	r0, [r7, #12]
 80074da:	60b9      	str	r1, [r7, #8]
 80074dc:	607a      	str	r2, [r7, #4]
 80074de:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074e8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d101      	bne.n	80074f8 <HAL_DMA_Start_IT+0x26>
 80074f4:	2302      	movs	r3, #2
 80074f6:	e040      	b.n	800757a <HAL_DMA_Start_IT+0xa8>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b01      	cmp	r3, #1
 800750a:	d12f      	bne.n	800756c <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2202      	movs	r2, #2
 8007510:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	68b9      	ldr	r1, [r7, #8]
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f000 fa4b 	bl	80079bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800752a:	223f      	movs	r2, #63	@ 0x3f
 800752c:	409a      	lsls	r2, r3
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f042 0216 	orr.w	r2, r2, #22
 8007540:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007546:	2b00      	cmp	r3, #0
 8007548:	d007      	beq.n	800755a <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f042 0208 	orr.w	r2, r2, #8
 8007558:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f042 0201 	orr.w	r2, r2, #1
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	e005      	b.n	8007578 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007574:	2302      	movs	r3, #2
 8007576:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007578:	7dfb      	ldrb	r3, [r7, #23]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3718      	adds	r7, #24
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b084      	sub	sp, #16
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800758e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007590:	f7fe fffa 	bl	8006588 <HAL_GetTick>
 8007594:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d008      	beq.n	80075b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2280      	movs	r2, #128	@ 0x80
 80075a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e052      	b.n	800765a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f022 0216 	bic.w	r2, r2, #22
 80075c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	695a      	ldr	r2, [r3, #20]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80075d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d103      	bne.n	80075e4 <HAL_DMA_Abort+0x62>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d007      	beq.n	80075f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0208 	bic.w	r2, r2, #8
 80075f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f022 0201 	bic.w	r2, r2, #1
 8007602:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007604:	e013      	b.n	800762e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007606:	f7fe ffbf 	bl	8006588 <HAL_GetTick>
 800760a:	4602      	mov	r2, r0
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	2b05      	cmp	r3, #5
 8007612:	d90c      	bls.n	800762e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2220      	movs	r2, #32
 8007618:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2203      	movs	r2, #3
 800761e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e015      	b.n	800765a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0301 	and.w	r3, r3, #1
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1e4      	bne.n	8007606 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007640:	223f      	movs	r2, #63	@ 0x3f
 8007642:	409a      	lsls	r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b02      	cmp	r3, #2
 8007674:	d004      	beq.n	8007680 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2280      	movs	r2, #128	@ 0x80
 800767a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e00c      	b.n	800769a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2205      	movs	r2, #5
 8007684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f022 0201 	bic.w	r2, r2, #1
 8007696:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	370c      	adds	r7, #12
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
	...

080076a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80076b0:	2300      	movs	r3, #0
 80076b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80076b4:	4b8e      	ldr	r3, [pc, #568]	@ (80078f0 <HAL_DMA_IRQHandler+0x248>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a8e      	ldr	r2, [pc, #568]	@ (80078f4 <HAL_DMA_IRQHandler+0x24c>)
 80076ba:	fba2 2303 	umull	r2, r3, r2, r3
 80076be:	0a9b      	lsrs	r3, r3, #10
 80076c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076d2:	2208      	movs	r2, #8
 80076d4:	409a      	lsls	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	4013      	ands	r3, r2
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d01a      	beq.n	8007714 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0304 	and.w	r3, r3, #4
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d013      	beq.n	8007714 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f022 0204 	bic.w	r2, r2, #4
 80076fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007700:	2208      	movs	r2, #8
 8007702:	409a      	lsls	r2, r3
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800770c:	f043 0201 	orr.w	r2, r3, #1
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007718:	2201      	movs	r2, #1
 800771a:	409a      	lsls	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4013      	ands	r3, r2
 8007720:	2b00      	cmp	r3, #0
 8007722:	d012      	beq.n	800774a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00b      	beq.n	800774a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007736:	2201      	movs	r2, #1
 8007738:	409a      	lsls	r2, r3
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007742:	f043 0202 	orr.w	r2, r3, #2
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800774e:	2204      	movs	r2, #4
 8007750:	409a      	lsls	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	4013      	ands	r3, r2
 8007756:	2b00      	cmp	r3, #0
 8007758:	d012      	beq.n	8007780 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00b      	beq.n	8007780 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800776c:	2204      	movs	r2, #4
 800776e:	409a      	lsls	r2, r3
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007778:	f043 0204 	orr.w	r2, r3, #4
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007784:	2210      	movs	r2, #16
 8007786:	409a      	lsls	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	4013      	ands	r3, r2
 800778c:	2b00      	cmp	r3, #0
 800778e:	d043      	beq.n	8007818 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 0308 	and.w	r3, r3, #8
 800779a:	2b00      	cmp	r3, #0
 800779c:	d03c      	beq.n	8007818 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077a2:	2210      	movs	r2, #16
 80077a4:	409a      	lsls	r2, r3
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d018      	beq.n	80077ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d108      	bne.n	80077d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d024      	beq.n	8007818 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	4798      	blx	r3
 80077d6:	e01f      	b.n	8007818 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d01b      	beq.n	8007818 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	4798      	blx	r3
 80077e8:	e016      	b.n	8007818 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d107      	bne.n	8007808 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f022 0208 	bic.w	r2, r2, #8
 8007806:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800780c:	2b00      	cmp	r3, #0
 800780e:	d003      	beq.n	8007818 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800781c:	2220      	movs	r2, #32
 800781e:	409a      	lsls	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4013      	ands	r3, r2
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 808f 	beq.w	8007948 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0310 	and.w	r3, r3, #16
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 8087 	beq.w	8007948 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800783e:	2220      	movs	r2, #32
 8007840:	409a      	lsls	r2, r3
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b05      	cmp	r3, #5
 8007850:	d136      	bne.n	80078c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 0216 	bic.w	r2, r2, #22
 8007860:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	695a      	ldr	r2, [r3, #20]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007870:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007876:	2b00      	cmp	r3, #0
 8007878:	d103      	bne.n	8007882 <HAL_DMA_IRQHandler+0x1da>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800787e:	2b00      	cmp	r3, #0
 8007880:	d007      	beq.n	8007892 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f022 0208 	bic.w	r2, r2, #8
 8007890:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007896:	223f      	movs	r2, #63	@ 0x3f
 8007898:	409a      	lsls	r2, r3
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d07e      	beq.n	80079b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	4798      	blx	r3
        }
        return;
 80078be:	e079      	b.n	80079b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d01d      	beq.n	800790a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10d      	bne.n	80078f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d031      	beq.n	8007948 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	4798      	blx	r3
 80078ec:	e02c      	b.n	8007948 <HAL_DMA_IRQHandler+0x2a0>
 80078ee:	bf00      	nop
 80078f0:	20000000 	.word	0x20000000
 80078f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d023      	beq.n	8007948 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	4798      	blx	r3
 8007908:	e01e      	b.n	8007948 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10f      	bne.n	8007938 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 0210 	bic.w	r2, r2, #16
 8007926:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800793c:	2b00      	cmp	r3, #0
 800793e:	d003      	beq.n	8007948 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800794c:	2b00      	cmp	r3, #0
 800794e:	d032      	beq.n	80079b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	2b00      	cmp	r3, #0
 800795a:	d022      	beq.n	80079a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2205      	movs	r2, #5
 8007960:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f022 0201 	bic.w	r2, r2, #1
 8007972:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	3301      	adds	r3, #1
 8007978:	60bb      	str	r3, [r7, #8]
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	429a      	cmp	r2, r3
 800797e:	d307      	bcc.n	8007990 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1f2      	bne.n	8007974 <HAL_DMA_IRQHandler+0x2cc>
 800798e:	e000      	b.n	8007992 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007990:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d005      	beq.n	80079b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	4798      	blx	r3
 80079b2:	e000      	b.n	80079b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80079b4:	bf00      	nop
    }
  }
}
 80079b6:	3718      	adds	r7, #24
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
 80079c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80079d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	2b40      	cmp	r3, #64	@ 0x40
 80079e8:	d108      	bne.n	80079fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80079fa:	e007      	b.n	8007a0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	60da      	str	r2, [r3, #12]
}
 8007a0c:	bf00      	nop
 8007a0e:	3714      	adds	r7, #20
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b089      	sub	sp, #36	@ 0x24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007a22:	2300      	movs	r3, #0
 8007a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a2e:	2300      	movs	r3, #0
 8007a30:	61fb      	str	r3, [r7, #28]
 8007a32:	e165      	b.n	8007d00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007a34:	2201      	movs	r2, #1
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	4013      	ands	r3, r2
 8007a46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	f040 8154 	bne.w	8007cfa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f003 0303 	and.w	r3, r3, #3
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d005      	beq.n	8007a6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d130      	bne.n	8007acc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	005b      	lsls	r3, r3, #1
 8007a74:	2203      	movs	r2, #3
 8007a76:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7a:	43db      	mvns	r3, r3
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	68da      	ldr	r2, [r3, #12]
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8e:	69ba      	ldr	r2, [r7, #24]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	69ba      	ldr	r2, [r7, #24]
 8007a98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa8:	43db      	mvns	r3, r3
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	4013      	ands	r3, r2
 8007aae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	091b      	lsrs	r3, r3, #4
 8007ab6:	f003 0201 	and.w	r2, r3, #1
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac0:	69ba      	ldr	r2, [r7, #24]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	69ba      	ldr	r2, [r7, #24]
 8007aca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f003 0303 	and.w	r3, r3, #3
 8007ad4:	2b03      	cmp	r3, #3
 8007ad6:	d017      	beq.n	8007b08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	005b      	lsls	r3, r3, #1
 8007ae2:	2203      	movs	r2, #3
 8007ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae8:	43db      	mvns	r3, r3
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	4013      	ands	r3, r2
 8007aee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	005b      	lsls	r3, r3, #1
 8007af8:	fa02 f303 	lsl.w	r3, r2, r3
 8007afc:	69ba      	ldr	r2, [r7, #24]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f003 0303 	and.w	r3, r3, #3
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d123      	bne.n	8007b5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	08da      	lsrs	r2, r3, #3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	3208      	adds	r2, #8
 8007b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	f003 0307 	and.w	r3, r3, #7
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	220f      	movs	r2, #15
 8007b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b30:	43db      	mvns	r3, r3
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	4013      	ands	r3, r2
 8007b36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	691a      	ldr	r2, [r3, #16]
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	f003 0307 	and.w	r3, r3, #7
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	fa02 f303 	lsl.w	r3, r2, r3
 8007b48:	69ba      	ldr	r2, [r7, #24]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	08da      	lsrs	r2, r3, #3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	3208      	adds	r2, #8
 8007b56:	69b9      	ldr	r1, [r7, #24]
 8007b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	005b      	lsls	r3, r3, #1
 8007b66:	2203      	movs	r2, #3
 8007b68:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6c:	43db      	mvns	r3, r3
 8007b6e:	69ba      	ldr	r2, [r7, #24]
 8007b70:	4013      	ands	r3, r2
 8007b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	f003 0203 	and.w	r2, r3, #3
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	005b      	lsls	r3, r3, #1
 8007b80:	fa02 f303 	lsl.w	r3, r2, r3
 8007b84:	69ba      	ldr	r2, [r7, #24]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	69ba      	ldr	r2, [r7, #24]
 8007b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 80ae 	beq.w	8007cfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	60fb      	str	r3, [r7, #12]
 8007ba2:	4b5d      	ldr	r3, [pc, #372]	@ (8007d18 <HAL_GPIO_Init+0x300>)
 8007ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ba6:	4a5c      	ldr	r2, [pc, #368]	@ (8007d18 <HAL_GPIO_Init+0x300>)
 8007ba8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8007bae:	4b5a      	ldr	r3, [pc, #360]	@ (8007d18 <HAL_GPIO_Init+0x300>)
 8007bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bb6:	60fb      	str	r3, [r7, #12]
 8007bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007bba:	4a58      	ldr	r2, [pc, #352]	@ (8007d1c <HAL_GPIO_Init+0x304>)
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	089b      	lsrs	r3, r3, #2
 8007bc0:	3302      	adds	r3, #2
 8007bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	f003 0303 	and.w	r3, r3, #3
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	220f      	movs	r2, #15
 8007bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd6:	43db      	mvns	r3, r3
 8007bd8:	69ba      	ldr	r2, [r7, #24]
 8007bda:	4013      	ands	r3, r2
 8007bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a4f      	ldr	r2, [pc, #316]	@ (8007d20 <HAL_GPIO_Init+0x308>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d025      	beq.n	8007c32 <HAL_GPIO_Init+0x21a>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a4e      	ldr	r2, [pc, #312]	@ (8007d24 <HAL_GPIO_Init+0x30c>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d01f      	beq.n	8007c2e <HAL_GPIO_Init+0x216>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a4d      	ldr	r2, [pc, #308]	@ (8007d28 <HAL_GPIO_Init+0x310>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d019      	beq.n	8007c2a <HAL_GPIO_Init+0x212>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a4c      	ldr	r2, [pc, #304]	@ (8007d2c <HAL_GPIO_Init+0x314>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d013      	beq.n	8007c26 <HAL_GPIO_Init+0x20e>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a4b      	ldr	r2, [pc, #300]	@ (8007d30 <HAL_GPIO_Init+0x318>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d00d      	beq.n	8007c22 <HAL_GPIO_Init+0x20a>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a4a      	ldr	r2, [pc, #296]	@ (8007d34 <HAL_GPIO_Init+0x31c>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d007      	beq.n	8007c1e <HAL_GPIO_Init+0x206>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a49      	ldr	r2, [pc, #292]	@ (8007d38 <HAL_GPIO_Init+0x320>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d101      	bne.n	8007c1a <HAL_GPIO_Init+0x202>
 8007c16:	2306      	movs	r3, #6
 8007c18:	e00c      	b.n	8007c34 <HAL_GPIO_Init+0x21c>
 8007c1a:	2307      	movs	r3, #7
 8007c1c:	e00a      	b.n	8007c34 <HAL_GPIO_Init+0x21c>
 8007c1e:	2305      	movs	r3, #5
 8007c20:	e008      	b.n	8007c34 <HAL_GPIO_Init+0x21c>
 8007c22:	2304      	movs	r3, #4
 8007c24:	e006      	b.n	8007c34 <HAL_GPIO_Init+0x21c>
 8007c26:	2303      	movs	r3, #3
 8007c28:	e004      	b.n	8007c34 <HAL_GPIO_Init+0x21c>
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	e002      	b.n	8007c34 <HAL_GPIO_Init+0x21c>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e000      	b.n	8007c34 <HAL_GPIO_Init+0x21c>
 8007c32:	2300      	movs	r3, #0
 8007c34:	69fa      	ldr	r2, [r7, #28]
 8007c36:	f002 0203 	and.w	r2, r2, #3
 8007c3a:	0092      	lsls	r2, r2, #2
 8007c3c:	4093      	lsls	r3, r2
 8007c3e:	69ba      	ldr	r2, [r7, #24]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c44:	4935      	ldr	r1, [pc, #212]	@ (8007d1c <HAL_GPIO_Init+0x304>)
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	089b      	lsrs	r3, r3, #2
 8007c4a:	3302      	adds	r3, #2
 8007c4c:	69ba      	ldr	r2, [r7, #24]
 8007c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007c52:	4b3a      	ldr	r3, [pc, #232]	@ (8007d3c <HAL_GPIO_Init+0x324>)
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	43db      	mvns	r3, r3
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	4013      	ands	r3, r2
 8007c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d003      	beq.n	8007c76 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007c76:	4a31      	ldr	r2, [pc, #196]	@ (8007d3c <HAL_GPIO_Init+0x324>)
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8007d3c <HAL_GPIO_Init+0x324>)
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	43db      	mvns	r3, r3
 8007c86:	69ba      	ldr	r2, [r7, #24]
 8007c88:	4013      	ands	r3, r2
 8007c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d003      	beq.n	8007ca0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007c98:	69ba      	ldr	r2, [r7, #24]
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007ca0:	4a26      	ldr	r2, [pc, #152]	@ (8007d3c <HAL_GPIO_Init+0x324>)
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007ca6:	4b25      	ldr	r3, [pc, #148]	@ (8007d3c <HAL_GPIO_Init+0x324>)
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	43db      	mvns	r3, r3
 8007cb0:	69ba      	ldr	r2, [r7, #24]
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d003      	beq.n	8007cca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007cca:	4a1c      	ldr	r2, [pc, #112]	@ (8007d3c <HAL_GPIO_Init+0x324>)
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8007d3c <HAL_GPIO_Init+0x324>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	43db      	mvns	r3, r3
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	4013      	ands	r3, r2
 8007cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d003      	beq.n	8007cf4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007cf4:	4a11      	ldr	r2, [pc, #68]	@ (8007d3c <HAL_GPIO_Init+0x324>)
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	61fb      	str	r3, [r7, #28]
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	2b0f      	cmp	r3, #15
 8007d04:	f67f ae96 	bls.w	8007a34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007d08:	bf00      	nop
 8007d0a:	bf00      	nop
 8007d0c:	3724      	adds	r7, #36	@ 0x24
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	40023800 	.word	0x40023800
 8007d1c:	40013800 	.word	0x40013800
 8007d20:	40020000 	.word	0x40020000
 8007d24:	40020400 	.word	0x40020400
 8007d28:	40020800 	.word	0x40020800
 8007d2c:	40020c00 	.word	0x40020c00
 8007d30:	40021000 	.word	0x40021000
 8007d34:	40021400 	.word	0x40021400
 8007d38:	40021800 	.word	0x40021800
 8007d3c:	40013c00 	.word	0x40013c00

08007d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d101      	bne.n	8007d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e0cc      	b.n	8007eee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d54:	4b68      	ldr	r3, [pc, #416]	@ (8007ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 030f 	and.w	r3, r3, #15
 8007d5c:	683a      	ldr	r2, [r7, #0]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d90c      	bls.n	8007d7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d62:	4b65      	ldr	r3, [pc, #404]	@ (8007ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d64:	683a      	ldr	r2, [r7, #0]
 8007d66:	b2d2      	uxtb	r2, r2
 8007d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d6a:	4b63      	ldr	r3, [pc, #396]	@ (8007ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 030f 	and.w	r3, r3, #15
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d001      	beq.n	8007d7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e0b8      	b.n	8007eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 0302 	and.w	r3, r3, #2
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d020      	beq.n	8007dca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 0304 	and.w	r3, r3, #4
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d005      	beq.n	8007da0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d94:	4b59      	ldr	r3, [pc, #356]	@ (8007efc <HAL_RCC_ClockConfig+0x1bc>)
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	4a58      	ldr	r2, [pc, #352]	@ (8007efc <HAL_RCC_ClockConfig+0x1bc>)
 8007d9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007d9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0308 	and.w	r3, r3, #8
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d005      	beq.n	8007db8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007dac:	4b53      	ldr	r3, [pc, #332]	@ (8007efc <HAL_RCC_ClockConfig+0x1bc>)
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	4a52      	ldr	r2, [pc, #328]	@ (8007efc <HAL_RCC_ClockConfig+0x1bc>)
 8007db2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007db6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007db8:	4b50      	ldr	r3, [pc, #320]	@ (8007efc <HAL_RCC_ClockConfig+0x1bc>)
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	494d      	ldr	r1, [pc, #308]	@ (8007efc <HAL_RCC_ClockConfig+0x1bc>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 0301 	and.w	r3, r3, #1
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d044      	beq.n	8007e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d107      	bne.n	8007dee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dde:	4b47      	ldr	r3, [pc, #284]	@ (8007efc <HAL_RCC_ClockConfig+0x1bc>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d119      	bne.n	8007e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e07f      	b.n	8007eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d003      	beq.n	8007dfe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	d107      	bne.n	8007e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dfe:	4b3f      	ldr	r3, [pc, #252]	@ (8007efc <HAL_RCC_ClockConfig+0x1bc>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d109      	bne.n	8007e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e06f      	b.n	8007eee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8007efc <HAL_RCC_ClockConfig+0x1bc>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0302 	and.w	r3, r3, #2
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e067      	b.n	8007eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e1e:	4b37      	ldr	r3, [pc, #220]	@ (8007efc <HAL_RCC_ClockConfig+0x1bc>)
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f023 0203 	bic.w	r2, r3, #3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	4934      	ldr	r1, [pc, #208]	@ (8007efc <HAL_RCC_ClockConfig+0x1bc>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e30:	f7fe fbaa 	bl	8006588 <HAL_GetTick>
 8007e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e36:	e00a      	b.n	8007e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e38:	f7fe fba6 	bl	8006588 <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d901      	bls.n	8007e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e04f      	b.n	8007eee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e4e:	4b2b      	ldr	r3, [pc, #172]	@ (8007efc <HAL_RCC_ClockConfig+0x1bc>)
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	f003 020c 	and.w	r2, r3, #12
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d1eb      	bne.n	8007e38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e60:	4b25      	ldr	r3, [pc, #148]	@ (8007ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 030f 	and.w	r3, r3, #15
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d20c      	bcs.n	8007e88 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e6e:	4b22      	ldr	r3, [pc, #136]	@ (8007ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	b2d2      	uxtb	r2, r2
 8007e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e76:	4b20      	ldr	r3, [pc, #128]	@ (8007ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 030f 	and.w	r3, r3, #15
 8007e7e:	683a      	ldr	r2, [r7, #0]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d001      	beq.n	8007e88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e032      	b.n	8007eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0304 	and.w	r3, r3, #4
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d008      	beq.n	8007ea6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e94:	4b19      	ldr	r3, [pc, #100]	@ (8007efc <HAL_RCC_ClockConfig+0x1bc>)
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	4916      	ldr	r1, [pc, #88]	@ (8007efc <HAL_RCC_ClockConfig+0x1bc>)
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 0308 	and.w	r3, r3, #8
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d009      	beq.n	8007ec6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007eb2:	4b12      	ldr	r3, [pc, #72]	@ (8007efc <HAL_RCC_ClockConfig+0x1bc>)
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	490e      	ldr	r1, [pc, #56]	@ (8007efc <HAL_RCC_ClockConfig+0x1bc>)
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007ec6:	f000 f855 	bl	8007f74 <HAL_RCC_GetSysClockFreq>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8007efc <HAL_RCC_ClockConfig+0x1bc>)
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	091b      	lsrs	r3, r3, #4
 8007ed2:	f003 030f 	and.w	r3, r3, #15
 8007ed6:	490a      	ldr	r1, [pc, #40]	@ (8007f00 <HAL_RCC_ClockConfig+0x1c0>)
 8007ed8:	5ccb      	ldrb	r3, [r1, r3]
 8007eda:	fa22 f303 	lsr.w	r3, r2, r3
 8007ede:	4a09      	ldr	r2, [pc, #36]	@ (8007f04 <HAL_RCC_ClockConfig+0x1c4>)
 8007ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007ee2:	4b09      	ldr	r3, [pc, #36]	@ (8007f08 <HAL_RCC_ClockConfig+0x1c8>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fe fb0a 	bl	8006500 <HAL_InitTick>

  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	40023c00 	.word	0x40023c00
 8007efc:	40023800 	.word	0x40023800
 8007f00:	0800b050 	.word	0x0800b050
 8007f04:	20000000 	.word	0x20000000
 8007f08:	20000004 	.word	0x20000004

08007f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f10:	4b03      	ldr	r3, [pc, #12]	@ (8007f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f12:	681b      	ldr	r3, [r3, #0]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	20000000 	.word	0x20000000

08007f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007f28:	f7ff fff0 	bl	8007f0c <HAL_RCC_GetHCLKFreq>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	4b05      	ldr	r3, [pc, #20]	@ (8007f44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	0a9b      	lsrs	r3, r3, #10
 8007f34:	f003 0307 	and.w	r3, r3, #7
 8007f38:	4903      	ldr	r1, [pc, #12]	@ (8007f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f3a:	5ccb      	ldrb	r3, [r1, r3]
 8007f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	40023800 	.word	0x40023800
 8007f48:	0800b060 	.word	0x0800b060

08007f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007f50:	f7ff ffdc 	bl	8007f0c <HAL_RCC_GetHCLKFreq>
 8007f54:	4602      	mov	r2, r0
 8007f56:	4b05      	ldr	r3, [pc, #20]	@ (8007f6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	0b5b      	lsrs	r3, r3, #13
 8007f5c:	f003 0307 	and.w	r3, r3, #7
 8007f60:	4903      	ldr	r1, [pc, #12]	@ (8007f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f62:	5ccb      	ldrb	r3, [r1, r3]
 8007f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	40023800 	.word	0x40023800
 8007f70:	0800b060 	.word	0x0800b060

08007f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f78:	b0ae      	sub	sp, #184	@ 0xb8
 8007f7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8007f94:	2300      	movs	r3, #0
 8007f96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f9a:	4bcb      	ldr	r3, [pc, #812]	@ (80082c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	f003 030c 	and.w	r3, r3, #12
 8007fa2:	2b0c      	cmp	r3, #12
 8007fa4:	f200 8206 	bhi.w	80083b4 <HAL_RCC_GetSysClockFreq+0x440>
 8007fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8007fb0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fae:	bf00      	nop
 8007fb0:	08007fe5 	.word	0x08007fe5
 8007fb4:	080083b5 	.word	0x080083b5
 8007fb8:	080083b5 	.word	0x080083b5
 8007fbc:	080083b5 	.word	0x080083b5
 8007fc0:	08007fed 	.word	0x08007fed
 8007fc4:	080083b5 	.word	0x080083b5
 8007fc8:	080083b5 	.word	0x080083b5
 8007fcc:	080083b5 	.word	0x080083b5
 8007fd0:	08007ff5 	.word	0x08007ff5
 8007fd4:	080083b5 	.word	0x080083b5
 8007fd8:	080083b5 	.word	0x080083b5
 8007fdc:	080083b5 	.word	0x080083b5
 8007fe0:	080081e5 	.word	0x080081e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007fe4:	4bb9      	ldr	r3, [pc, #740]	@ (80082cc <HAL_RCC_GetSysClockFreq+0x358>)
 8007fe6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007fea:	e1e7      	b.n	80083bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007fec:	4bb8      	ldr	r3, [pc, #736]	@ (80082d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007fee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007ff2:	e1e3      	b.n	80083bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ff4:	4bb4      	ldr	r3, [pc, #720]	@ (80082c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ffc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008000:	4bb1      	ldr	r3, [pc, #708]	@ (80082c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008008:	2b00      	cmp	r3, #0
 800800a:	d071      	beq.n	80080f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800800c:	4bae      	ldr	r3, [pc, #696]	@ (80082c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	099b      	lsrs	r3, r3, #6
 8008012:	2200      	movs	r2, #0
 8008014:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008018:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800801c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008024:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008028:	2300      	movs	r3, #0
 800802a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800802e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008032:	4622      	mov	r2, r4
 8008034:	462b      	mov	r3, r5
 8008036:	f04f 0000 	mov.w	r0, #0
 800803a:	f04f 0100 	mov.w	r1, #0
 800803e:	0159      	lsls	r1, r3, #5
 8008040:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008044:	0150      	lsls	r0, r2, #5
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	4621      	mov	r1, r4
 800804c:	1a51      	subs	r1, r2, r1
 800804e:	6439      	str	r1, [r7, #64]	@ 0x40
 8008050:	4629      	mov	r1, r5
 8008052:	eb63 0301 	sbc.w	r3, r3, r1
 8008056:	647b      	str	r3, [r7, #68]	@ 0x44
 8008058:	f04f 0200 	mov.w	r2, #0
 800805c:	f04f 0300 	mov.w	r3, #0
 8008060:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8008064:	4649      	mov	r1, r9
 8008066:	018b      	lsls	r3, r1, #6
 8008068:	4641      	mov	r1, r8
 800806a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800806e:	4641      	mov	r1, r8
 8008070:	018a      	lsls	r2, r1, #6
 8008072:	4641      	mov	r1, r8
 8008074:	1a51      	subs	r1, r2, r1
 8008076:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008078:	4649      	mov	r1, r9
 800807a:	eb63 0301 	sbc.w	r3, r3, r1
 800807e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008080:	f04f 0200 	mov.w	r2, #0
 8008084:	f04f 0300 	mov.w	r3, #0
 8008088:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800808c:	4649      	mov	r1, r9
 800808e:	00cb      	lsls	r3, r1, #3
 8008090:	4641      	mov	r1, r8
 8008092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008096:	4641      	mov	r1, r8
 8008098:	00ca      	lsls	r2, r1, #3
 800809a:	4610      	mov	r0, r2
 800809c:	4619      	mov	r1, r3
 800809e:	4603      	mov	r3, r0
 80080a0:	4622      	mov	r2, r4
 80080a2:	189b      	adds	r3, r3, r2
 80080a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80080a6:	462b      	mov	r3, r5
 80080a8:	460a      	mov	r2, r1
 80080aa:	eb42 0303 	adc.w	r3, r2, r3
 80080ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80080b0:	f04f 0200 	mov.w	r2, #0
 80080b4:	f04f 0300 	mov.w	r3, #0
 80080b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80080bc:	4629      	mov	r1, r5
 80080be:	024b      	lsls	r3, r1, #9
 80080c0:	4621      	mov	r1, r4
 80080c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80080c6:	4621      	mov	r1, r4
 80080c8:	024a      	lsls	r2, r1, #9
 80080ca:	4610      	mov	r0, r2
 80080cc:	4619      	mov	r1, r3
 80080ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080d2:	2200      	movs	r2, #0
 80080d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80080d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80080dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80080e0:	f7f8 fd26 	bl	8000b30 <__aeabi_uldivmod>
 80080e4:	4602      	mov	r2, r0
 80080e6:	460b      	mov	r3, r1
 80080e8:	4613      	mov	r3, r2
 80080ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080ee:	e067      	b.n	80081c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080f0:	4b75      	ldr	r3, [pc, #468]	@ (80082c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	099b      	lsrs	r3, r3, #6
 80080f6:	2200      	movs	r2, #0
 80080f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80080fc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8008100:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008108:	67bb      	str	r3, [r7, #120]	@ 0x78
 800810a:	2300      	movs	r3, #0
 800810c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800810e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8008112:	4622      	mov	r2, r4
 8008114:	462b      	mov	r3, r5
 8008116:	f04f 0000 	mov.w	r0, #0
 800811a:	f04f 0100 	mov.w	r1, #0
 800811e:	0159      	lsls	r1, r3, #5
 8008120:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008124:	0150      	lsls	r0, r2, #5
 8008126:	4602      	mov	r2, r0
 8008128:	460b      	mov	r3, r1
 800812a:	4621      	mov	r1, r4
 800812c:	1a51      	subs	r1, r2, r1
 800812e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008130:	4629      	mov	r1, r5
 8008132:	eb63 0301 	sbc.w	r3, r3, r1
 8008136:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008138:	f04f 0200 	mov.w	r2, #0
 800813c:	f04f 0300 	mov.w	r3, #0
 8008140:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8008144:	4649      	mov	r1, r9
 8008146:	018b      	lsls	r3, r1, #6
 8008148:	4641      	mov	r1, r8
 800814a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800814e:	4641      	mov	r1, r8
 8008150:	018a      	lsls	r2, r1, #6
 8008152:	4641      	mov	r1, r8
 8008154:	ebb2 0a01 	subs.w	sl, r2, r1
 8008158:	4649      	mov	r1, r9
 800815a:	eb63 0b01 	sbc.w	fp, r3, r1
 800815e:	f04f 0200 	mov.w	r2, #0
 8008162:	f04f 0300 	mov.w	r3, #0
 8008166:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800816a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800816e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008172:	4692      	mov	sl, r2
 8008174:	469b      	mov	fp, r3
 8008176:	4623      	mov	r3, r4
 8008178:	eb1a 0303 	adds.w	r3, sl, r3
 800817c:	623b      	str	r3, [r7, #32]
 800817e:	462b      	mov	r3, r5
 8008180:	eb4b 0303 	adc.w	r3, fp, r3
 8008184:	627b      	str	r3, [r7, #36]	@ 0x24
 8008186:	f04f 0200 	mov.w	r2, #0
 800818a:	f04f 0300 	mov.w	r3, #0
 800818e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008192:	4629      	mov	r1, r5
 8008194:	028b      	lsls	r3, r1, #10
 8008196:	4621      	mov	r1, r4
 8008198:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800819c:	4621      	mov	r1, r4
 800819e:	028a      	lsls	r2, r1, #10
 80081a0:	4610      	mov	r0, r2
 80081a2:	4619      	mov	r1, r3
 80081a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80081a8:	2200      	movs	r2, #0
 80081aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80081ac:	677a      	str	r2, [r7, #116]	@ 0x74
 80081ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80081b2:	f7f8 fcbd 	bl	8000b30 <__aeabi_uldivmod>
 80081b6:	4602      	mov	r2, r0
 80081b8:	460b      	mov	r3, r1
 80081ba:	4613      	mov	r3, r2
 80081bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80081c0:	4b41      	ldr	r3, [pc, #260]	@ (80082c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	0c1b      	lsrs	r3, r3, #16
 80081c6:	f003 0303 	and.w	r3, r3, #3
 80081ca:	3301      	adds	r3, #1
 80081cc:	005b      	lsls	r3, r3, #1
 80081ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80081d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80081d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081da:	fbb2 f3f3 	udiv	r3, r2, r3
 80081de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80081e2:	e0eb      	b.n	80083bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80081e4:	4b38      	ldr	r3, [pc, #224]	@ (80082c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80081f0:	4b35      	ldr	r3, [pc, #212]	@ (80082c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d06b      	beq.n	80082d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081fc:	4b32      	ldr	r3, [pc, #200]	@ (80082c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	099b      	lsrs	r3, r3, #6
 8008202:	2200      	movs	r2, #0
 8008204:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008206:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008208:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800820a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800820e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008210:	2300      	movs	r3, #0
 8008212:	667b      	str	r3, [r7, #100]	@ 0x64
 8008214:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8008218:	4622      	mov	r2, r4
 800821a:	462b      	mov	r3, r5
 800821c:	f04f 0000 	mov.w	r0, #0
 8008220:	f04f 0100 	mov.w	r1, #0
 8008224:	0159      	lsls	r1, r3, #5
 8008226:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800822a:	0150      	lsls	r0, r2, #5
 800822c:	4602      	mov	r2, r0
 800822e:	460b      	mov	r3, r1
 8008230:	4621      	mov	r1, r4
 8008232:	1a51      	subs	r1, r2, r1
 8008234:	61b9      	str	r1, [r7, #24]
 8008236:	4629      	mov	r1, r5
 8008238:	eb63 0301 	sbc.w	r3, r3, r1
 800823c:	61fb      	str	r3, [r7, #28]
 800823e:	f04f 0200 	mov.w	r2, #0
 8008242:	f04f 0300 	mov.w	r3, #0
 8008246:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800824a:	4659      	mov	r1, fp
 800824c:	018b      	lsls	r3, r1, #6
 800824e:	4651      	mov	r1, sl
 8008250:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008254:	4651      	mov	r1, sl
 8008256:	018a      	lsls	r2, r1, #6
 8008258:	4651      	mov	r1, sl
 800825a:	ebb2 0801 	subs.w	r8, r2, r1
 800825e:	4659      	mov	r1, fp
 8008260:	eb63 0901 	sbc.w	r9, r3, r1
 8008264:	f04f 0200 	mov.w	r2, #0
 8008268:	f04f 0300 	mov.w	r3, #0
 800826c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008270:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008274:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008278:	4690      	mov	r8, r2
 800827a:	4699      	mov	r9, r3
 800827c:	4623      	mov	r3, r4
 800827e:	eb18 0303 	adds.w	r3, r8, r3
 8008282:	613b      	str	r3, [r7, #16]
 8008284:	462b      	mov	r3, r5
 8008286:	eb49 0303 	adc.w	r3, r9, r3
 800828a:	617b      	str	r3, [r7, #20]
 800828c:	f04f 0200 	mov.w	r2, #0
 8008290:	f04f 0300 	mov.w	r3, #0
 8008294:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008298:	4629      	mov	r1, r5
 800829a:	024b      	lsls	r3, r1, #9
 800829c:	4621      	mov	r1, r4
 800829e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80082a2:	4621      	mov	r1, r4
 80082a4:	024a      	lsls	r2, r1, #9
 80082a6:	4610      	mov	r0, r2
 80082a8:	4619      	mov	r1, r3
 80082aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082ae:	2200      	movs	r2, #0
 80082b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082b2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80082b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80082b8:	f7f8 fc3a 	bl	8000b30 <__aeabi_uldivmod>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	4613      	mov	r3, r2
 80082c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80082c6:	e065      	b.n	8008394 <HAL_RCC_GetSysClockFreq+0x420>
 80082c8:	40023800 	.word	0x40023800
 80082cc:	00f42400 	.word	0x00f42400
 80082d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082d4:	4b3d      	ldr	r3, [pc, #244]	@ (80083cc <HAL_RCC_GetSysClockFreq+0x458>)
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	099b      	lsrs	r3, r3, #6
 80082da:	2200      	movs	r2, #0
 80082dc:	4618      	mov	r0, r3
 80082de:	4611      	mov	r1, r2
 80082e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80082e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80082e6:	2300      	movs	r3, #0
 80082e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80082ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80082ee:	4642      	mov	r2, r8
 80082f0:	464b      	mov	r3, r9
 80082f2:	f04f 0000 	mov.w	r0, #0
 80082f6:	f04f 0100 	mov.w	r1, #0
 80082fa:	0159      	lsls	r1, r3, #5
 80082fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008300:	0150      	lsls	r0, r2, #5
 8008302:	4602      	mov	r2, r0
 8008304:	460b      	mov	r3, r1
 8008306:	4641      	mov	r1, r8
 8008308:	1a51      	subs	r1, r2, r1
 800830a:	60b9      	str	r1, [r7, #8]
 800830c:	4649      	mov	r1, r9
 800830e:	eb63 0301 	sbc.w	r3, r3, r1
 8008312:	60fb      	str	r3, [r7, #12]
 8008314:	f04f 0200 	mov.w	r2, #0
 8008318:	f04f 0300 	mov.w	r3, #0
 800831c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008320:	4659      	mov	r1, fp
 8008322:	018b      	lsls	r3, r1, #6
 8008324:	4651      	mov	r1, sl
 8008326:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800832a:	4651      	mov	r1, sl
 800832c:	018a      	lsls	r2, r1, #6
 800832e:	4651      	mov	r1, sl
 8008330:	1a54      	subs	r4, r2, r1
 8008332:	4659      	mov	r1, fp
 8008334:	eb63 0501 	sbc.w	r5, r3, r1
 8008338:	f04f 0200 	mov.w	r2, #0
 800833c:	f04f 0300 	mov.w	r3, #0
 8008340:	00eb      	lsls	r3, r5, #3
 8008342:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008346:	00e2      	lsls	r2, r4, #3
 8008348:	4614      	mov	r4, r2
 800834a:	461d      	mov	r5, r3
 800834c:	4643      	mov	r3, r8
 800834e:	18e3      	adds	r3, r4, r3
 8008350:	603b      	str	r3, [r7, #0]
 8008352:	464b      	mov	r3, r9
 8008354:	eb45 0303 	adc.w	r3, r5, r3
 8008358:	607b      	str	r3, [r7, #4]
 800835a:	f04f 0200 	mov.w	r2, #0
 800835e:	f04f 0300 	mov.w	r3, #0
 8008362:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008366:	4629      	mov	r1, r5
 8008368:	028b      	lsls	r3, r1, #10
 800836a:	4621      	mov	r1, r4
 800836c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008370:	4621      	mov	r1, r4
 8008372:	028a      	lsls	r2, r1, #10
 8008374:	4610      	mov	r0, r2
 8008376:	4619      	mov	r1, r3
 8008378:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800837c:	2200      	movs	r2, #0
 800837e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008380:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008382:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008386:	f7f8 fbd3 	bl	8000b30 <__aeabi_uldivmod>
 800838a:	4602      	mov	r2, r0
 800838c:	460b      	mov	r3, r1
 800838e:	4613      	mov	r3, r2
 8008390:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008394:	4b0d      	ldr	r3, [pc, #52]	@ (80083cc <HAL_RCC_GetSysClockFreq+0x458>)
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	0f1b      	lsrs	r3, r3, #28
 800839a:	f003 0307 	and.w	r3, r3, #7
 800839e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80083a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80083a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80083aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80083b2:	e003      	b.n	80083bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80083b4:	4b06      	ldr	r3, [pc, #24]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80083b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80083ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80083bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	37b8      	adds	r7, #184	@ 0xb8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083ca:	bf00      	nop
 80083cc:	40023800 	.word	0x40023800
 80083d0:	00f42400 	.word	0x00f42400

080083d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b086      	sub	sp, #24
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d101      	bne.n	80083e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e28d      	b.n	8008902 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f000 8083 	beq.w	80084fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80083f4:	4b94      	ldr	r3, [pc, #592]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	f003 030c 	and.w	r3, r3, #12
 80083fc:	2b04      	cmp	r3, #4
 80083fe:	d019      	beq.n	8008434 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008400:	4b91      	ldr	r3, [pc, #580]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f003 030c 	and.w	r3, r3, #12
        || \
 8008408:	2b08      	cmp	r3, #8
 800840a:	d106      	bne.n	800841a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800840c:	4b8e      	ldr	r3, [pc, #568]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008414:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008418:	d00c      	beq.n	8008434 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800841a:	4b8b      	ldr	r3, [pc, #556]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008422:	2b0c      	cmp	r3, #12
 8008424:	d112      	bne.n	800844c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008426:	4b88      	ldr	r3, [pc, #544]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800842e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008432:	d10b      	bne.n	800844c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008434:	4b84      	ldr	r3, [pc, #528]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d05b      	beq.n	80084f8 <HAL_RCC_OscConfig+0x124>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d157      	bne.n	80084f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e25a      	b.n	8008902 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008454:	d106      	bne.n	8008464 <HAL_RCC_OscConfig+0x90>
 8008456:	4b7c      	ldr	r3, [pc, #496]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a7b      	ldr	r2, [pc, #492]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 800845c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008460:	6013      	str	r3, [r2, #0]
 8008462:	e01d      	b.n	80084a0 <HAL_RCC_OscConfig+0xcc>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800846c:	d10c      	bne.n	8008488 <HAL_RCC_OscConfig+0xb4>
 800846e:	4b76      	ldr	r3, [pc, #472]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a75      	ldr	r2, [pc, #468]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 8008474:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008478:	6013      	str	r3, [r2, #0]
 800847a:	4b73      	ldr	r3, [pc, #460]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a72      	ldr	r2, [pc, #456]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 8008480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008484:	6013      	str	r3, [r2, #0]
 8008486:	e00b      	b.n	80084a0 <HAL_RCC_OscConfig+0xcc>
 8008488:	4b6f      	ldr	r3, [pc, #444]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a6e      	ldr	r2, [pc, #440]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 800848e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008492:	6013      	str	r3, [r2, #0]
 8008494:	4b6c      	ldr	r3, [pc, #432]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a6b      	ldr	r2, [pc, #428]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 800849a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800849e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d013      	beq.n	80084d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084a8:	f7fe f86e 	bl	8006588 <HAL_GetTick>
 80084ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084ae:	e008      	b.n	80084c2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084b0:	f7fe f86a 	bl	8006588 <HAL_GetTick>
 80084b4:	4602      	mov	r2, r0
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	2b64      	cmp	r3, #100	@ 0x64
 80084bc:	d901      	bls.n	80084c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e21f      	b.n	8008902 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084c2:	4b61      	ldr	r3, [pc, #388]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d0f0      	beq.n	80084b0 <HAL_RCC_OscConfig+0xdc>
 80084ce:	e014      	b.n	80084fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084d0:	f7fe f85a 	bl	8006588 <HAL_GetTick>
 80084d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084d6:	e008      	b.n	80084ea <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084d8:	f7fe f856 	bl	8006588 <HAL_GetTick>
 80084dc:	4602      	mov	r2, r0
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	2b64      	cmp	r3, #100	@ 0x64
 80084e4:	d901      	bls.n	80084ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80084e6:	2303      	movs	r3, #3
 80084e8:	e20b      	b.n	8008902 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084ea:	4b57      	ldr	r3, [pc, #348]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1f0      	bne.n	80084d8 <HAL_RCC_OscConfig+0x104>
 80084f6:	e000      	b.n	80084fa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 0302 	and.w	r3, r3, #2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d06f      	beq.n	80085e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008506:	4b50      	ldr	r3, [pc, #320]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	f003 030c 	and.w	r3, r3, #12
 800850e:	2b00      	cmp	r3, #0
 8008510:	d017      	beq.n	8008542 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008512:	4b4d      	ldr	r3, [pc, #308]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f003 030c 	and.w	r3, r3, #12
        || \
 800851a:	2b08      	cmp	r3, #8
 800851c:	d105      	bne.n	800852a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800851e:	4b4a      	ldr	r3, [pc, #296]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00b      	beq.n	8008542 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800852a:	4b47      	ldr	r3, [pc, #284]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008532:	2b0c      	cmp	r3, #12
 8008534:	d11c      	bne.n	8008570 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008536:	4b44      	ldr	r3, [pc, #272]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800853e:	2b00      	cmp	r3, #0
 8008540:	d116      	bne.n	8008570 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008542:	4b41      	ldr	r3, [pc, #260]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0302 	and.w	r3, r3, #2
 800854a:	2b00      	cmp	r3, #0
 800854c:	d005      	beq.n	800855a <HAL_RCC_OscConfig+0x186>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d001      	beq.n	800855a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e1d3      	b.n	8008902 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800855a:	4b3b      	ldr	r3, [pc, #236]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	00db      	lsls	r3, r3, #3
 8008568:	4937      	ldr	r1, [pc, #220]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 800856a:	4313      	orrs	r3, r2
 800856c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800856e:	e03a      	b.n	80085e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d020      	beq.n	80085ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008578:	4b34      	ldr	r3, [pc, #208]	@ (800864c <HAL_RCC_OscConfig+0x278>)
 800857a:	2201      	movs	r2, #1
 800857c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800857e:	f7fe f803 	bl	8006588 <HAL_GetTick>
 8008582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008584:	e008      	b.n	8008598 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008586:	f7fd ffff 	bl	8006588 <HAL_GetTick>
 800858a:	4602      	mov	r2, r0
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	2b02      	cmp	r3, #2
 8008592:	d901      	bls.n	8008598 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	e1b4      	b.n	8008902 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008598:	4b2b      	ldr	r3, [pc, #172]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 0302 	and.w	r3, r3, #2
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d0f0      	beq.n	8008586 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085a4:	4b28      	ldr	r3, [pc, #160]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	00db      	lsls	r3, r3, #3
 80085b2:	4925      	ldr	r1, [pc, #148]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	600b      	str	r3, [r1, #0]
 80085b8:	e015      	b.n	80085e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085ba:	4b24      	ldr	r3, [pc, #144]	@ (800864c <HAL_RCC_OscConfig+0x278>)
 80085bc:	2200      	movs	r2, #0
 80085be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085c0:	f7fd ffe2 	bl	8006588 <HAL_GetTick>
 80085c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085c6:	e008      	b.n	80085da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085c8:	f7fd ffde 	bl	8006588 <HAL_GetTick>
 80085cc:	4602      	mov	r2, r0
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d901      	bls.n	80085da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e193      	b.n	8008902 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085da:	4b1b      	ldr	r3, [pc, #108]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0302 	and.w	r3, r3, #2
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1f0      	bne.n	80085c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0308 	and.w	r3, r3, #8
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d036      	beq.n	8008660 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d016      	beq.n	8008628 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085fa:	4b15      	ldr	r3, [pc, #84]	@ (8008650 <HAL_RCC_OscConfig+0x27c>)
 80085fc:	2201      	movs	r2, #1
 80085fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008600:	f7fd ffc2 	bl	8006588 <HAL_GetTick>
 8008604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008606:	e008      	b.n	800861a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008608:	f7fd ffbe 	bl	8006588 <HAL_GetTick>
 800860c:	4602      	mov	r2, r0
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	2b02      	cmp	r3, #2
 8008614:	d901      	bls.n	800861a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e173      	b.n	8008902 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800861a:	4b0b      	ldr	r3, [pc, #44]	@ (8008648 <HAL_RCC_OscConfig+0x274>)
 800861c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800861e:	f003 0302 	and.w	r3, r3, #2
 8008622:	2b00      	cmp	r3, #0
 8008624:	d0f0      	beq.n	8008608 <HAL_RCC_OscConfig+0x234>
 8008626:	e01b      	b.n	8008660 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008628:	4b09      	ldr	r3, [pc, #36]	@ (8008650 <HAL_RCC_OscConfig+0x27c>)
 800862a:	2200      	movs	r2, #0
 800862c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800862e:	f7fd ffab 	bl	8006588 <HAL_GetTick>
 8008632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008634:	e00e      	b.n	8008654 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008636:	f7fd ffa7 	bl	8006588 <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	2b02      	cmp	r3, #2
 8008642:	d907      	bls.n	8008654 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e15c      	b.n	8008902 <HAL_RCC_OscConfig+0x52e>
 8008648:	40023800 	.word	0x40023800
 800864c:	42470000 	.word	0x42470000
 8008650:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008654:	4b8a      	ldr	r3, [pc, #552]	@ (8008880 <HAL_RCC_OscConfig+0x4ac>)
 8008656:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008658:	f003 0302 	and.w	r3, r3, #2
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1ea      	bne.n	8008636 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0304 	and.w	r3, r3, #4
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 8097 	beq.w	800879c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800866e:	2300      	movs	r3, #0
 8008670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008672:	4b83      	ldr	r3, [pc, #524]	@ (8008880 <HAL_RCC_OscConfig+0x4ac>)
 8008674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800867a:	2b00      	cmp	r3, #0
 800867c:	d10f      	bne.n	800869e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800867e:	2300      	movs	r3, #0
 8008680:	60bb      	str	r3, [r7, #8]
 8008682:	4b7f      	ldr	r3, [pc, #508]	@ (8008880 <HAL_RCC_OscConfig+0x4ac>)
 8008684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008686:	4a7e      	ldr	r2, [pc, #504]	@ (8008880 <HAL_RCC_OscConfig+0x4ac>)
 8008688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800868c:	6413      	str	r3, [r2, #64]	@ 0x40
 800868e:	4b7c      	ldr	r3, [pc, #496]	@ (8008880 <HAL_RCC_OscConfig+0x4ac>)
 8008690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008696:	60bb      	str	r3, [r7, #8]
 8008698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800869a:	2301      	movs	r3, #1
 800869c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800869e:	4b79      	ldr	r3, [pc, #484]	@ (8008884 <HAL_RCC_OscConfig+0x4b0>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d118      	bne.n	80086dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80086aa:	4b76      	ldr	r3, [pc, #472]	@ (8008884 <HAL_RCC_OscConfig+0x4b0>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a75      	ldr	r2, [pc, #468]	@ (8008884 <HAL_RCC_OscConfig+0x4b0>)
 80086b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80086b6:	f7fd ff67 	bl	8006588 <HAL_GetTick>
 80086ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086bc:	e008      	b.n	80086d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086be:	f7fd ff63 	bl	8006588 <HAL_GetTick>
 80086c2:	4602      	mov	r2, r0
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d901      	bls.n	80086d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e118      	b.n	8008902 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086d0:	4b6c      	ldr	r3, [pc, #432]	@ (8008884 <HAL_RCC_OscConfig+0x4b0>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d0f0      	beq.n	80086be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d106      	bne.n	80086f2 <HAL_RCC_OscConfig+0x31e>
 80086e4:	4b66      	ldr	r3, [pc, #408]	@ (8008880 <HAL_RCC_OscConfig+0x4ac>)
 80086e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086e8:	4a65      	ldr	r2, [pc, #404]	@ (8008880 <HAL_RCC_OscConfig+0x4ac>)
 80086ea:	f043 0301 	orr.w	r3, r3, #1
 80086ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80086f0:	e01c      	b.n	800872c <HAL_RCC_OscConfig+0x358>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	2b05      	cmp	r3, #5
 80086f8:	d10c      	bne.n	8008714 <HAL_RCC_OscConfig+0x340>
 80086fa:	4b61      	ldr	r3, [pc, #388]	@ (8008880 <HAL_RCC_OscConfig+0x4ac>)
 80086fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086fe:	4a60      	ldr	r2, [pc, #384]	@ (8008880 <HAL_RCC_OscConfig+0x4ac>)
 8008700:	f043 0304 	orr.w	r3, r3, #4
 8008704:	6713      	str	r3, [r2, #112]	@ 0x70
 8008706:	4b5e      	ldr	r3, [pc, #376]	@ (8008880 <HAL_RCC_OscConfig+0x4ac>)
 8008708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800870a:	4a5d      	ldr	r2, [pc, #372]	@ (8008880 <HAL_RCC_OscConfig+0x4ac>)
 800870c:	f043 0301 	orr.w	r3, r3, #1
 8008710:	6713      	str	r3, [r2, #112]	@ 0x70
 8008712:	e00b      	b.n	800872c <HAL_RCC_OscConfig+0x358>
 8008714:	4b5a      	ldr	r3, [pc, #360]	@ (8008880 <HAL_RCC_OscConfig+0x4ac>)
 8008716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008718:	4a59      	ldr	r2, [pc, #356]	@ (8008880 <HAL_RCC_OscConfig+0x4ac>)
 800871a:	f023 0301 	bic.w	r3, r3, #1
 800871e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008720:	4b57      	ldr	r3, [pc, #348]	@ (8008880 <HAL_RCC_OscConfig+0x4ac>)
 8008722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008724:	4a56      	ldr	r2, [pc, #344]	@ (8008880 <HAL_RCC_OscConfig+0x4ac>)
 8008726:	f023 0304 	bic.w	r3, r3, #4
 800872a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d015      	beq.n	8008760 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008734:	f7fd ff28 	bl	8006588 <HAL_GetTick>
 8008738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800873a:	e00a      	b.n	8008752 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800873c:	f7fd ff24 	bl	8006588 <HAL_GetTick>
 8008740:	4602      	mov	r2, r0
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800874a:	4293      	cmp	r3, r2
 800874c:	d901      	bls.n	8008752 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e0d7      	b.n	8008902 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008752:	4b4b      	ldr	r3, [pc, #300]	@ (8008880 <HAL_RCC_OscConfig+0x4ac>)
 8008754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008756:	f003 0302 	and.w	r3, r3, #2
 800875a:	2b00      	cmp	r3, #0
 800875c:	d0ee      	beq.n	800873c <HAL_RCC_OscConfig+0x368>
 800875e:	e014      	b.n	800878a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008760:	f7fd ff12 	bl	8006588 <HAL_GetTick>
 8008764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008766:	e00a      	b.n	800877e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008768:	f7fd ff0e 	bl	8006588 <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008776:	4293      	cmp	r3, r2
 8008778:	d901      	bls.n	800877e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800877a:	2303      	movs	r3, #3
 800877c:	e0c1      	b.n	8008902 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800877e:	4b40      	ldr	r3, [pc, #256]	@ (8008880 <HAL_RCC_OscConfig+0x4ac>)
 8008780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008782:	f003 0302 	and.w	r3, r3, #2
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1ee      	bne.n	8008768 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800878a:	7dfb      	ldrb	r3, [r7, #23]
 800878c:	2b01      	cmp	r3, #1
 800878e:	d105      	bne.n	800879c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008790:	4b3b      	ldr	r3, [pc, #236]	@ (8008880 <HAL_RCC_OscConfig+0x4ac>)
 8008792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008794:	4a3a      	ldr	r2, [pc, #232]	@ (8008880 <HAL_RCC_OscConfig+0x4ac>)
 8008796:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800879a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f000 80ad 	beq.w	8008900 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80087a6:	4b36      	ldr	r3, [pc, #216]	@ (8008880 <HAL_RCC_OscConfig+0x4ac>)
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f003 030c 	and.w	r3, r3, #12
 80087ae:	2b08      	cmp	r3, #8
 80087b0:	d060      	beq.n	8008874 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d145      	bne.n	8008846 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087ba:	4b33      	ldr	r3, [pc, #204]	@ (8008888 <HAL_RCC_OscConfig+0x4b4>)
 80087bc:	2200      	movs	r2, #0
 80087be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087c0:	f7fd fee2 	bl	8006588 <HAL_GetTick>
 80087c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087c6:	e008      	b.n	80087da <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087c8:	f7fd fede 	bl	8006588 <HAL_GetTick>
 80087cc:	4602      	mov	r2, r0
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d901      	bls.n	80087da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80087d6:	2303      	movs	r3, #3
 80087d8:	e093      	b.n	8008902 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087da:	4b29      	ldr	r3, [pc, #164]	@ (8008880 <HAL_RCC_OscConfig+0x4ac>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1f0      	bne.n	80087c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	69da      	ldr	r2, [r3, #28]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	431a      	orrs	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f4:	019b      	lsls	r3, r3, #6
 80087f6:	431a      	orrs	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087fc:	085b      	lsrs	r3, r3, #1
 80087fe:	3b01      	subs	r3, #1
 8008800:	041b      	lsls	r3, r3, #16
 8008802:	431a      	orrs	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008808:	061b      	lsls	r3, r3, #24
 800880a:	431a      	orrs	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008810:	071b      	lsls	r3, r3, #28
 8008812:	491b      	ldr	r1, [pc, #108]	@ (8008880 <HAL_RCC_OscConfig+0x4ac>)
 8008814:	4313      	orrs	r3, r2
 8008816:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008818:	4b1b      	ldr	r3, [pc, #108]	@ (8008888 <HAL_RCC_OscConfig+0x4b4>)
 800881a:	2201      	movs	r2, #1
 800881c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800881e:	f7fd feb3 	bl	8006588 <HAL_GetTick>
 8008822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008824:	e008      	b.n	8008838 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008826:	f7fd feaf 	bl	8006588 <HAL_GetTick>
 800882a:	4602      	mov	r2, r0
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	2b02      	cmp	r3, #2
 8008832:	d901      	bls.n	8008838 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e064      	b.n	8008902 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008838:	4b11      	ldr	r3, [pc, #68]	@ (8008880 <HAL_RCC_OscConfig+0x4ac>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d0f0      	beq.n	8008826 <HAL_RCC_OscConfig+0x452>
 8008844:	e05c      	b.n	8008900 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008846:	4b10      	ldr	r3, [pc, #64]	@ (8008888 <HAL_RCC_OscConfig+0x4b4>)
 8008848:	2200      	movs	r2, #0
 800884a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800884c:	f7fd fe9c 	bl	8006588 <HAL_GetTick>
 8008850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008852:	e008      	b.n	8008866 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008854:	f7fd fe98 	bl	8006588 <HAL_GetTick>
 8008858:	4602      	mov	r2, r0
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	2b02      	cmp	r3, #2
 8008860:	d901      	bls.n	8008866 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	e04d      	b.n	8008902 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008866:	4b06      	ldr	r3, [pc, #24]	@ (8008880 <HAL_RCC_OscConfig+0x4ac>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1f0      	bne.n	8008854 <HAL_RCC_OscConfig+0x480>
 8008872:	e045      	b.n	8008900 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d107      	bne.n	800888c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e040      	b.n	8008902 <HAL_RCC_OscConfig+0x52e>
 8008880:	40023800 	.word	0x40023800
 8008884:	40007000 	.word	0x40007000
 8008888:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800888c:	4b1f      	ldr	r3, [pc, #124]	@ (800890c <HAL_RCC_OscConfig+0x538>)
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	699b      	ldr	r3, [r3, #24]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d030      	beq.n	80088fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d129      	bne.n	80088fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d122      	bne.n	80088fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80088bc:	4013      	ands	r3, r2
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80088c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d119      	bne.n	80088fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088d2:	085b      	lsrs	r3, r3, #1
 80088d4:	3b01      	subs	r3, #1
 80088d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80088d8:	429a      	cmp	r2, r3
 80088da:	d10f      	bne.n	80088fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d107      	bne.n	80088fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d001      	beq.n	8008900 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	e000      	b.n	8008902 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	3718      	adds	r7, #24
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	40023800 	.word	0x40023800

08008910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e041      	b.n	80089a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b00      	cmp	r3, #0
 800892c:	d106      	bne.n	800893c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f839 	bl	80089ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2202      	movs	r2, #2
 8008940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	3304      	adds	r3, #4
 800894c:	4619      	mov	r1, r3
 800894e:	4610      	mov	r0, r2
 8008950:	f000 f9c0 	bl	8008cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80089ae:	b480      	push	{r7}
 80089b0:	b083      	sub	sp, #12
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80089b6:	bf00      	nop
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
	...

080089c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d001      	beq.n	80089dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	e04e      	b.n	8008a7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2202      	movs	r2, #2
 80089e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68da      	ldr	r2, [r3, #12]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f042 0201 	orr.w	r2, r2, #1
 80089f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a23      	ldr	r2, [pc, #140]	@ (8008a88 <HAL_TIM_Base_Start_IT+0xc4>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d022      	beq.n	8008a44 <HAL_TIM_Base_Start_IT+0x80>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a06:	d01d      	beq.n	8008a44 <HAL_TIM_Base_Start_IT+0x80>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8008a8c <HAL_TIM_Base_Start_IT+0xc8>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d018      	beq.n	8008a44 <HAL_TIM_Base_Start_IT+0x80>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a1e      	ldr	r2, [pc, #120]	@ (8008a90 <HAL_TIM_Base_Start_IT+0xcc>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d013      	beq.n	8008a44 <HAL_TIM_Base_Start_IT+0x80>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a1c      	ldr	r2, [pc, #112]	@ (8008a94 <HAL_TIM_Base_Start_IT+0xd0>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d00e      	beq.n	8008a44 <HAL_TIM_Base_Start_IT+0x80>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8008a98 <HAL_TIM_Base_Start_IT+0xd4>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d009      	beq.n	8008a44 <HAL_TIM_Base_Start_IT+0x80>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a19      	ldr	r2, [pc, #100]	@ (8008a9c <HAL_TIM_Base_Start_IT+0xd8>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d004      	beq.n	8008a44 <HAL_TIM_Base_Start_IT+0x80>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a18      	ldr	r2, [pc, #96]	@ (8008aa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d111      	bne.n	8008a68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	f003 0307 	and.w	r3, r3, #7
 8008a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2b06      	cmp	r3, #6
 8008a54:	d010      	beq.n	8008a78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f042 0201 	orr.w	r2, r2, #1
 8008a64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a66:	e007      	b.n	8008a78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f042 0201 	orr.w	r2, r2, #1
 8008a76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	40010000 	.word	0x40010000
 8008a8c:	40000400 	.word	0x40000400
 8008a90:	40000800 	.word	0x40000800
 8008a94:	40000c00 	.word	0x40000c00
 8008a98:	40010400 	.word	0x40010400
 8008a9c:	40014000 	.word	0x40014000
 8008aa0:	40001800 	.word	0x40001800

08008aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	f003 0302 	and.w	r3, r3, #2
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d020      	beq.n	8008b08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f003 0302 	and.w	r3, r3, #2
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d01b      	beq.n	8008b08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f06f 0202 	mvn.w	r2, #2
 8008ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2201      	movs	r2, #1
 8008ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	699b      	ldr	r3, [r3, #24]
 8008ae6:	f003 0303 	and.w	r3, r3, #3
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d003      	beq.n	8008af6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f8d2 	bl	8008c98 <HAL_TIM_IC_CaptureCallback>
 8008af4:	e005      	b.n	8008b02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f8c4 	bl	8008c84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f8d5 	bl	8008cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	f003 0304 	and.w	r3, r3, #4
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d020      	beq.n	8008b54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f003 0304 	and.w	r3, r3, #4
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d01b      	beq.n	8008b54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f06f 0204 	mvn.w	r2, #4
 8008b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2202      	movs	r2, #2
 8008b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d003      	beq.n	8008b42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f8ac 	bl	8008c98 <HAL_TIM_IC_CaptureCallback>
 8008b40:	e005      	b.n	8008b4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f89e 	bl	8008c84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f8af 	bl	8008cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	f003 0308 	and.w	r3, r3, #8
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d020      	beq.n	8008ba0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f003 0308 	and.w	r3, r3, #8
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d01b      	beq.n	8008ba0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f06f 0208 	mvn.w	r2, #8
 8008b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2204      	movs	r2, #4
 8008b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	69db      	ldr	r3, [r3, #28]
 8008b7e:	f003 0303 	and.w	r3, r3, #3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d003      	beq.n	8008b8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f886 	bl	8008c98 <HAL_TIM_IC_CaptureCallback>
 8008b8c:	e005      	b.n	8008b9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 f878 	bl	8008c84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f889 	bl	8008cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	f003 0310 	and.w	r3, r3, #16
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d020      	beq.n	8008bec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f003 0310 	and.w	r3, r3, #16
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d01b      	beq.n	8008bec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f06f 0210 	mvn.w	r2, #16
 8008bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2208      	movs	r2, #8
 8008bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	69db      	ldr	r3, [r3, #28]
 8008bca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d003      	beq.n	8008bda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f860 	bl	8008c98 <HAL_TIM_IC_CaptureCallback>
 8008bd8:	e005      	b.n	8008be6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 f852 	bl	8008c84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f863 	bl	8008cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00c      	beq.n	8008c10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f003 0301 	and.w	r3, r3, #1
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d007      	beq.n	8008c10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f06f 0201 	mvn.w	r2, #1
 8008c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f7fc f95e 	bl	8004ecc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00c      	beq.n	8008c34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d007      	beq.n	8008c34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f900 	bl	8008e34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00c      	beq.n	8008c58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d007      	beq.n	8008c58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f834 	bl	8008cc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	f003 0320 	and.w	r3, r3, #32
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00c      	beq.n	8008c7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f003 0320 	and.w	r3, r3, #32
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d007      	beq.n	8008c7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f06f 0220 	mvn.w	r2, #32
 8008c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f8d2 	bl	8008e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c7c:	bf00      	nop
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a43      	ldr	r2, [pc, #268]	@ (8008df4 <TIM_Base_SetConfig+0x120>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d013      	beq.n	8008d14 <TIM_Base_SetConfig+0x40>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cf2:	d00f      	beq.n	8008d14 <TIM_Base_SetConfig+0x40>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a40      	ldr	r2, [pc, #256]	@ (8008df8 <TIM_Base_SetConfig+0x124>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d00b      	beq.n	8008d14 <TIM_Base_SetConfig+0x40>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a3f      	ldr	r2, [pc, #252]	@ (8008dfc <TIM_Base_SetConfig+0x128>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d007      	beq.n	8008d14 <TIM_Base_SetConfig+0x40>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a3e      	ldr	r2, [pc, #248]	@ (8008e00 <TIM_Base_SetConfig+0x12c>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d003      	beq.n	8008d14 <TIM_Base_SetConfig+0x40>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a3d      	ldr	r2, [pc, #244]	@ (8008e04 <TIM_Base_SetConfig+0x130>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d108      	bne.n	8008d26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a32      	ldr	r2, [pc, #200]	@ (8008df4 <TIM_Base_SetConfig+0x120>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d02b      	beq.n	8008d86 <TIM_Base_SetConfig+0xb2>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d34:	d027      	beq.n	8008d86 <TIM_Base_SetConfig+0xb2>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a2f      	ldr	r2, [pc, #188]	@ (8008df8 <TIM_Base_SetConfig+0x124>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d023      	beq.n	8008d86 <TIM_Base_SetConfig+0xb2>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a2e      	ldr	r2, [pc, #184]	@ (8008dfc <TIM_Base_SetConfig+0x128>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d01f      	beq.n	8008d86 <TIM_Base_SetConfig+0xb2>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a2d      	ldr	r2, [pc, #180]	@ (8008e00 <TIM_Base_SetConfig+0x12c>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d01b      	beq.n	8008d86 <TIM_Base_SetConfig+0xb2>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a2c      	ldr	r2, [pc, #176]	@ (8008e04 <TIM_Base_SetConfig+0x130>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d017      	beq.n	8008d86 <TIM_Base_SetConfig+0xb2>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a2b      	ldr	r2, [pc, #172]	@ (8008e08 <TIM_Base_SetConfig+0x134>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d013      	beq.n	8008d86 <TIM_Base_SetConfig+0xb2>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a2a      	ldr	r2, [pc, #168]	@ (8008e0c <TIM_Base_SetConfig+0x138>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d00f      	beq.n	8008d86 <TIM_Base_SetConfig+0xb2>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a29      	ldr	r2, [pc, #164]	@ (8008e10 <TIM_Base_SetConfig+0x13c>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d00b      	beq.n	8008d86 <TIM_Base_SetConfig+0xb2>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a28      	ldr	r2, [pc, #160]	@ (8008e14 <TIM_Base_SetConfig+0x140>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d007      	beq.n	8008d86 <TIM_Base_SetConfig+0xb2>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a27      	ldr	r2, [pc, #156]	@ (8008e18 <TIM_Base_SetConfig+0x144>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d003      	beq.n	8008d86 <TIM_Base_SetConfig+0xb2>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a26      	ldr	r2, [pc, #152]	@ (8008e1c <TIM_Base_SetConfig+0x148>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d108      	bne.n	8008d98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	689a      	ldr	r2, [r3, #8]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a0e      	ldr	r2, [pc, #56]	@ (8008df4 <TIM_Base_SetConfig+0x120>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d003      	beq.n	8008dc6 <TIM_Base_SetConfig+0xf2>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a10      	ldr	r2, [pc, #64]	@ (8008e04 <TIM_Base_SetConfig+0x130>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d103      	bne.n	8008dce <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	691a      	ldr	r2, [r3, #16]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f043 0204 	orr.w	r2, r3, #4
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	601a      	str	r2, [r3, #0]
}
 8008de6:	bf00      	nop
 8008de8:	3714      	adds	r7, #20
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	40010000 	.word	0x40010000
 8008df8:	40000400 	.word	0x40000400
 8008dfc:	40000800 	.word	0x40000800
 8008e00:	40000c00 	.word	0x40000c00
 8008e04:	40010400 	.word	0x40010400
 8008e08:	40014000 	.word	0x40014000
 8008e0c:	40014400 	.word	0x40014400
 8008e10:	40014800 	.word	0x40014800
 8008e14:	40001800 	.word	0x40001800
 8008e18:	40001c00 	.word	0x40001c00
 8008e1c:	40002000 	.word	0x40002000

08008e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e28:	bf00      	nop
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e3c:	bf00      	nop
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d101      	bne.n	8008e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e042      	b.n	8008ee0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d106      	bne.n	8008e74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f83a 	bl	8008ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2224      	movs	r2, #36	@ 0x24
 8008e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	68da      	ldr	r2, [r3, #12]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 fecb 	bl	8009c28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	691a      	ldr	r2, [r3, #16]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008ea0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	695a      	ldr	r2, [r3, #20]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008eb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68da      	ldr	r2, [r3, #12]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008ec0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2220      	movs	r2, #32
 8008ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8008ef0:	bf00      	nop
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	4613      	mov	r3, r2
 8008f08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b20      	cmp	r3, #32
 8008f14:	d121      	bne.n	8008f5a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d002      	beq.n	8008f22 <HAL_UART_Transmit_IT+0x26>
 8008f1c:	88fb      	ldrh	r3, [r7, #6]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e01a      	b.n	8008f5c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	88fa      	ldrh	r2, [r7, #6]
 8008f30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	88fa      	ldrh	r2, [r7, #6]
 8008f36:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2221      	movs	r2, #33	@ 0x21
 8008f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68da      	ldr	r2, [r3, #12]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008f54:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	e000      	b.n	8008f5c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8008f5a:	2302      	movs	r3, #2
  }
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3714      	adds	r7, #20
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	4613      	mov	r3, r2
 8008f74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	2b20      	cmp	r3, #32
 8008f80:	d112      	bne.n	8008fa8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d002      	beq.n	8008f8e <HAL_UART_Receive_DMA+0x26>
 8008f88:	88fb      	ldrh	r3, [r7, #6]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e00b      	b.n	8008faa <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008f98:	88fb      	ldrh	r3, [r7, #6]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	68b9      	ldr	r1, [r7, #8]
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f000 fbda 	bl	8009758 <UART_Start_Receive_DMA>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	e000      	b.n	8008faa <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008fa8:	2302      	movs	r3, #2
  }
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
	...

08008fb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b0ba      	sub	sp, #232	@ 0xe8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fea:	f003 030f 	and.w	r3, r3, #15
 8008fee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008ff2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d10f      	bne.n	800901a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ffe:	f003 0320 	and.w	r3, r3, #32
 8009002:	2b00      	cmp	r3, #0
 8009004:	d009      	beq.n	800901a <HAL_UART_IRQHandler+0x66>
 8009006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800900a:	f003 0320 	and.w	r3, r3, #32
 800900e:	2b00      	cmp	r3, #0
 8009010:	d003      	beq.n	800901a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 fd4a 	bl	8009aac <UART_Receive_IT>
      return;
 8009018:	e273      	b.n	8009502 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800901a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800901e:	2b00      	cmp	r3, #0
 8009020:	f000 80de 	beq.w	80091e0 <HAL_UART_IRQHandler+0x22c>
 8009024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009028:	f003 0301 	and.w	r3, r3, #1
 800902c:	2b00      	cmp	r3, #0
 800902e:	d106      	bne.n	800903e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009034:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009038:	2b00      	cmp	r3, #0
 800903a:	f000 80d1 	beq.w	80091e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800903e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00b      	beq.n	8009062 <HAL_UART_IRQHandler+0xae>
 800904a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800904e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009052:	2b00      	cmp	r3, #0
 8009054:	d005      	beq.n	8009062 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800905a:	f043 0201 	orr.w	r2, r3, #1
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009066:	f003 0304 	and.w	r3, r3, #4
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00b      	beq.n	8009086 <HAL_UART_IRQHandler+0xd2>
 800906e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	2b00      	cmp	r3, #0
 8009078:	d005      	beq.n	8009086 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800907e:	f043 0202 	orr.w	r2, r3, #2
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800908a:	f003 0302 	and.w	r3, r3, #2
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00b      	beq.n	80090aa <HAL_UART_IRQHandler+0xf6>
 8009092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009096:	f003 0301 	and.w	r3, r3, #1
 800909a:	2b00      	cmp	r3, #0
 800909c:	d005      	beq.n	80090aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090a2:	f043 0204 	orr.w	r2, r3, #4
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80090aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090ae:	f003 0308 	and.w	r3, r3, #8
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d011      	beq.n	80090da <HAL_UART_IRQHandler+0x126>
 80090b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090ba:	f003 0320 	and.w	r3, r3, #32
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d105      	bne.n	80090ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80090c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090c6:	f003 0301 	and.w	r3, r3, #1
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d005      	beq.n	80090da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090d2:	f043 0208 	orr.w	r2, r3, #8
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f000 820a 	beq.w	80094f8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80090e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090e8:	f003 0320 	and.w	r3, r3, #32
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d008      	beq.n	8009102 <HAL_UART_IRQHandler+0x14e>
 80090f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090f4:	f003 0320 	and.w	r3, r3, #32
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d002      	beq.n	8009102 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fcd5 	bl	8009aac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	695b      	ldr	r3, [r3, #20]
 8009108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800910c:	2b40      	cmp	r3, #64	@ 0x40
 800910e:	bf0c      	ite	eq
 8009110:	2301      	moveq	r3, #1
 8009112:	2300      	movne	r3, #0
 8009114:	b2db      	uxtb	r3, r3
 8009116:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800911e:	f003 0308 	and.w	r3, r3, #8
 8009122:	2b00      	cmp	r3, #0
 8009124:	d103      	bne.n	800912e <HAL_UART_IRQHandler+0x17a>
 8009126:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800912a:	2b00      	cmp	r3, #0
 800912c:	d04f      	beq.n	80091ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fbe0 	bl	80098f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800913e:	2b40      	cmp	r3, #64	@ 0x40
 8009140:	d141      	bne.n	80091c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3314      	adds	r3, #20
 8009148:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009150:	e853 3f00 	ldrex	r3, [r3]
 8009154:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009158:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800915c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009160:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	3314      	adds	r3, #20
 800916a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800916e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009172:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009176:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800917a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800917e:	e841 2300 	strex	r3, r2, [r1]
 8009182:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009186:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1d9      	bne.n	8009142 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009192:	2b00      	cmp	r3, #0
 8009194:	d013      	beq.n	80091be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800919a:	4a8a      	ldr	r2, [pc, #552]	@ (80093c4 <HAL_UART_IRQHandler+0x410>)
 800919c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7fe fa5d 	bl	8007662 <HAL_DMA_Abort_IT>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d016      	beq.n	80091dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80091b8:	4610      	mov	r0, r2
 80091ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091bc:	e00e      	b.n	80091dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f9b6 	bl	8009530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091c4:	e00a      	b.n	80091dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f9b2 	bl	8009530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091cc:	e006      	b.n	80091dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f9ae 	bl	8009530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80091da:	e18d      	b.n	80094f8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091dc:	bf00      	nop
    return;
 80091de:	e18b      	b.n	80094f8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	f040 8167 	bne.w	80094b8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80091ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091ee:	f003 0310 	and.w	r3, r3, #16
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f000 8160 	beq.w	80094b8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80091f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091fc:	f003 0310 	and.w	r3, r3, #16
 8009200:	2b00      	cmp	r3, #0
 8009202:	f000 8159 	beq.w	80094b8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009206:	2300      	movs	r3, #0
 8009208:	60bb      	str	r3, [r7, #8]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	60bb      	str	r3, [r7, #8]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	60bb      	str	r3, [r7, #8]
 800921a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009226:	2b40      	cmp	r3, #64	@ 0x40
 8009228:	f040 80ce 	bne.w	80093c8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009238:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800923c:	2b00      	cmp	r3, #0
 800923e:	f000 80a9 	beq.w	8009394 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009246:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800924a:	429a      	cmp	r2, r3
 800924c:	f080 80a2 	bcs.w	8009394 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009256:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800925c:	69db      	ldr	r3, [r3, #28]
 800925e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009262:	f000 8088 	beq.w	8009376 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	330c      	adds	r3, #12
 800926c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009270:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009274:	e853 3f00 	ldrex	r3, [r3]
 8009278:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800927c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009284:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	330c      	adds	r3, #12
 800928e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009292:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009296:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800929e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80092a2:	e841 2300 	strex	r3, r2, [r1]
 80092a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80092aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1d9      	bne.n	8009266 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	3314      	adds	r3, #20
 80092b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80092bc:	e853 3f00 	ldrex	r3, [r3]
 80092c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80092c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80092c4:	f023 0301 	bic.w	r3, r3, #1
 80092c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3314      	adds	r3, #20
 80092d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80092d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80092da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80092de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80092e2:	e841 2300 	strex	r3, r2, [r1]
 80092e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80092e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1e1      	bne.n	80092b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	3314      	adds	r3, #20
 80092f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80092f8:	e853 3f00 	ldrex	r3, [r3]
 80092fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80092fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009300:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009304:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3314      	adds	r3, #20
 800930e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009312:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009314:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009316:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009318:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800931a:	e841 2300 	strex	r3, r2, [r1]
 800931e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009320:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1e3      	bne.n	80092ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2220      	movs	r2, #32
 800932a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	330c      	adds	r3, #12
 800933a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800933e:	e853 3f00 	ldrex	r3, [r3]
 8009342:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009344:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009346:	f023 0310 	bic.w	r3, r3, #16
 800934a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	330c      	adds	r3, #12
 8009354:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009358:	65ba      	str	r2, [r7, #88]	@ 0x58
 800935a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800935e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009360:	e841 2300 	strex	r3, r2, [r1]
 8009364:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009368:	2b00      	cmp	r3, #0
 800936a:	d1e3      	bne.n	8009334 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009370:	4618      	mov	r0, r3
 8009372:	f7fe f906 	bl	8007582 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2202      	movs	r2, #2
 800937a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009384:	b29b      	uxth	r3, r3
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	b29b      	uxth	r3, r3
 800938a:	4619      	mov	r1, r3
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f8d9 	bl	8009544 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009392:	e0b3      	b.n	80094fc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009398:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800939c:	429a      	cmp	r2, r3
 800939e:	f040 80ad 	bne.w	80094fc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093a6:	69db      	ldr	r3, [r3, #28]
 80093a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093ac:	f040 80a6 	bne.w	80094fc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2202      	movs	r2, #2
 80093b4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80093ba:	4619      	mov	r1, r3
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 f8c1 	bl	8009544 <HAL_UARTEx_RxEventCallback>
      return;
 80093c2:	e09b      	b.n	80094fc <HAL_UART_IRQHandler+0x548>
 80093c4:	080099bb 	.word	0x080099bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80093dc:	b29b      	uxth	r3, r3
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f000 808e 	beq.w	8009500 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80093e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	f000 8089 	beq.w	8009500 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	330c      	adds	r3, #12
 80093f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f8:	e853 3f00 	ldrex	r3, [r3]
 80093fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009400:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009404:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	330c      	adds	r3, #12
 800940e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009412:	647a      	str	r2, [r7, #68]	@ 0x44
 8009414:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009416:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009418:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800941a:	e841 2300 	strex	r3, r2, [r1]
 800941e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1e3      	bne.n	80093ee <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3314      	adds	r3, #20
 800942c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800942e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009430:	e853 3f00 	ldrex	r3, [r3]
 8009434:	623b      	str	r3, [r7, #32]
   return(result);
 8009436:	6a3b      	ldr	r3, [r7, #32]
 8009438:	f023 0301 	bic.w	r3, r3, #1
 800943c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	3314      	adds	r3, #20
 8009446:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800944a:	633a      	str	r2, [r7, #48]	@ 0x30
 800944c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009450:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009452:	e841 2300 	strex	r3, r2, [r1]
 8009456:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1e3      	bne.n	8009426 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2220      	movs	r2, #32
 8009462:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	330c      	adds	r3, #12
 8009472:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	e853 3f00 	ldrex	r3, [r3]
 800947a:	60fb      	str	r3, [r7, #12]
   return(result);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f023 0310 	bic.w	r3, r3, #16
 8009482:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	330c      	adds	r3, #12
 800948c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009490:	61fa      	str	r2, [r7, #28]
 8009492:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009494:	69b9      	ldr	r1, [r7, #24]
 8009496:	69fa      	ldr	r2, [r7, #28]
 8009498:	e841 2300 	strex	r3, r2, [r1]
 800949c:	617b      	str	r3, [r7, #20]
   return(result);
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1e3      	bne.n	800946c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2202      	movs	r2, #2
 80094a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80094aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80094ae:	4619      	mov	r1, r3
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 f847 	bl	8009544 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80094b6:	e023      	b.n	8009500 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80094b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d009      	beq.n	80094d8 <HAL_UART_IRQHandler+0x524>
 80094c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d003      	beq.n	80094d8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 fa83 	bl	80099dc <UART_Transmit_IT>
    return;
 80094d6:	e014      	b.n	8009502 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80094d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00e      	beq.n	8009502 <HAL_UART_IRQHandler+0x54e>
 80094e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d008      	beq.n	8009502 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fac3 	bl	8009a7c <UART_EndTransmit_IT>
    return;
 80094f6:	e004      	b.n	8009502 <HAL_UART_IRQHandler+0x54e>
    return;
 80094f8:	bf00      	nop
 80094fa:	e002      	b.n	8009502 <HAL_UART_IRQHandler+0x54e>
      return;
 80094fc:	bf00      	nop
 80094fe:	e000      	b.n	8009502 <HAL_UART_IRQHandler+0x54e>
      return;
 8009500:	bf00      	nop
  }
}
 8009502:	37e8      	adds	r7, #232	@ 0xe8
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	460b      	mov	r3, r1
 800954e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b09c      	sub	sp, #112	@ 0x70
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009568:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009574:	2b00      	cmp	r3, #0
 8009576:	d172      	bne.n	800965e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800957a:	2200      	movs	r2, #0
 800957c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800957e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	330c      	adds	r3, #12
 8009584:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009586:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009588:	e853 3f00 	ldrex	r3, [r3]
 800958c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800958e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009594:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009596:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	330c      	adds	r3, #12
 800959c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800959e:	65ba      	str	r2, [r7, #88]	@ 0x58
 80095a0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80095a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80095a6:	e841 2300 	strex	r3, r2, [r1]
 80095aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80095ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1e5      	bne.n	800957e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	3314      	adds	r3, #20
 80095b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095bc:	e853 3f00 	ldrex	r3, [r3]
 80095c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095c4:	f023 0301 	bic.w	r3, r3, #1
 80095c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80095ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	3314      	adds	r3, #20
 80095d0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80095d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80095d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095da:	e841 2300 	strex	r3, r2, [r1]
 80095de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1e5      	bne.n	80095b2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	3314      	adds	r3, #20
 80095ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f0:	e853 3f00 	ldrex	r3, [r3]
 80095f4:	623b      	str	r3, [r7, #32]
   return(result);
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80095fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	3314      	adds	r3, #20
 8009604:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009606:	633a      	str	r2, [r7, #48]	@ 0x30
 8009608:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800960c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800960e:	e841 2300 	strex	r3, r2, [r1]
 8009612:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1e5      	bne.n	80095e6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800961a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800961c:	2220      	movs	r2, #32
 800961e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009622:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009626:	2b01      	cmp	r3, #1
 8009628:	d119      	bne.n	800965e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800962a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	330c      	adds	r3, #12
 8009630:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	e853 3f00 	ldrex	r3, [r3]
 8009638:	60fb      	str	r3, [r7, #12]
   return(result);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f023 0310 	bic.w	r3, r3, #16
 8009640:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009642:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	330c      	adds	r3, #12
 8009648:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800964a:	61fa      	str	r2, [r7, #28]
 800964c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964e:	69b9      	ldr	r1, [r7, #24]
 8009650:	69fa      	ldr	r2, [r7, #28]
 8009652:	e841 2300 	strex	r3, r2, [r1]
 8009656:	617b      	str	r3, [r7, #20]
   return(result);
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1e5      	bne.n	800962a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800965e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009660:	2200      	movs	r2, #0
 8009662:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009664:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009668:	2b01      	cmp	r3, #1
 800966a:	d106      	bne.n	800967a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800966c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800966e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009670:	4619      	mov	r1, r3
 8009672:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009674:	f7ff ff66 	bl	8009544 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009678:	e002      	b.n	8009680 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800967a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800967c:	f7fb fe78 	bl	8005370 <HAL_UART_RxCpltCallback>
}
 8009680:	bf00      	nop
 8009682:	3770      	adds	r7, #112	@ 0x70
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009694:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2201      	movs	r2, #1
 800969a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d108      	bne.n	80096b6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80096a8:	085b      	lsrs	r3, r3, #1
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	4619      	mov	r1, r3
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f7ff ff48 	bl	8009544 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096b4:	e002      	b.n	80096bc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f7ff ff30 	bl	800951c <HAL_UART_RxHalfCpltCallback>
}
 80096bc:	bf00      	nop
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80096cc:	2300      	movs	r3, #0
 80096ce:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096d4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	695b      	ldr	r3, [r3, #20]
 80096dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096e0:	2b80      	cmp	r3, #128	@ 0x80
 80096e2:	bf0c      	ite	eq
 80096e4:	2301      	moveq	r3, #1
 80096e6:	2300      	movne	r3, #0
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	2b21      	cmp	r3, #33	@ 0x21
 80096f6:	d108      	bne.n	800970a <UART_DMAError+0x46>
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d005      	beq.n	800970a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	2200      	movs	r2, #0
 8009702:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009704:	68b8      	ldr	r0, [r7, #8]
 8009706:	f000 f8cd 	bl	80098a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	695b      	ldr	r3, [r3, #20]
 8009710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009714:	2b40      	cmp	r3, #64	@ 0x40
 8009716:	bf0c      	ite	eq
 8009718:	2301      	moveq	r3, #1
 800971a:	2300      	movne	r3, #0
 800971c:	b2db      	uxtb	r3, r3
 800971e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009726:	b2db      	uxtb	r3, r3
 8009728:	2b22      	cmp	r3, #34	@ 0x22
 800972a:	d108      	bne.n	800973e <UART_DMAError+0x7a>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d005      	beq.n	800973e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	2200      	movs	r2, #0
 8009736:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009738:	68b8      	ldr	r0, [r7, #8]
 800973a:	f000 f8db 	bl	80098f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009742:	f043 0210 	orr.w	r2, r3, #16
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800974a:	68b8      	ldr	r0, [r7, #8]
 800974c:	f7ff fef0 	bl	8009530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009750:	bf00      	nop
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b098      	sub	sp, #96	@ 0x60
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	4613      	mov	r3, r2
 8009764:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009766:	68ba      	ldr	r2, [r7, #8]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	88fa      	ldrh	r2, [r7, #6]
 8009770:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2200      	movs	r2, #0
 8009776:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2222      	movs	r2, #34	@ 0x22
 800977c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009784:	4a44      	ldr	r2, [pc, #272]	@ (8009898 <UART_Start_Receive_DMA+0x140>)
 8009786:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800978c:	4a43      	ldr	r2, [pc, #268]	@ (800989c <UART_Start_Receive_DMA+0x144>)
 800978e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009794:	4a42      	ldr	r2, [pc, #264]	@ (80098a0 <UART_Start_Receive_DMA+0x148>)
 8009796:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800979c:	2200      	movs	r2, #0
 800979e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80097a0:	f107 0308 	add.w	r3, r7, #8
 80097a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	3304      	adds	r3, #4
 80097b0:	4619      	mov	r1, r3
 80097b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	88fb      	ldrh	r3, [r7, #6]
 80097b8:	f7fd fe8b 	bl	80074d2 <HAL_DMA_Start_IT>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d008      	beq.n	80097d4 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2210      	movs	r2, #16
 80097c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2220      	movs	r2, #32
 80097cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	e05d      	b.n	8009890 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80097d4:	2300      	movs	r3, #0
 80097d6:	613b      	str	r3, [r7, #16]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	613b      	str	r3, [r7, #16]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	613b      	str	r3, [r7, #16]
 80097e8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d019      	beq.n	8009826 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	330c      	adds	r3, #12
 80097f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097fc:	e853 3f00 	ldrex	r3, [r3]
 8009800:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009808:	65bb      	str	r3, [r7, #88]	@ 0x58
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	330c      	adds	r3, #12
 8009810:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009812:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009814:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009816:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009818:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800981a:	e841 2300 	strex	r3, r2, [r1]
 800981e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1e5      	bne.n	80097f2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	3314      	adds	r3, #20
 800982c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009830:	e853 3f00 	ldrex	r3, [r3]
 8009834:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009838:	f043 0301 	orr.w	r3, r3, #1
 800983c:	657b      	str	r3, [r7, #84]	@ 0x54
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3314      	adds	r3, #20
 8009844:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009846:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009848:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800984c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800984e:	e841 2300 	strex	r3, r2, [r1]
 8009852:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1e5      	bne.n	8009826 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	3314      	adds	r3, #20
 8009860:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	e853 3f00 	ldrex	r3, [r3]
 8009868:	617b      	str	r3, [r7, #20]
   return(result);
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009870:	653b      	str	r3, [r7, #80]	@ 0x50
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	3314      	adds	r3, #20
 8009878:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800987a:	627a      	str	r2, [r7, #36]	@ 0x24
 800987c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987e:	6a39      	ldr	r1, [r7, #32]
 8009880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009882:	e841 2300 	strex	r3, r2, [r1]
 8009886:	61fb      	str	r3, [r7, #28]
   return(result);
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1e5      	bne.n	800985a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3760      	adds	r7, #96	@ 0x60
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	0800955d 	.word	0x0800955d
 800989c:	08009689 	.word	0x08009689
 80098a0:	080096c5 	.word	0x080096c5

080098a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b089      	sub	sp, #36	@ 0x24
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	330c      	adds	r3, #12
 80098b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	e853 3f00 	ldrex	r3, [r3]
 80098ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80098c2:	61fb      	str	r3, [r7, #28]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	330c      	adds	r3, #12
 80098ca:	69fa      	ldr	r2, [r7, #28]
 80098cc:	61ba      	str	r2, [r7, #24]
 80098ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d0:	6979      	ldr	r1, [r7, #20]
 80098d2:	69ba      	ldr	r2, [r7, #24]
 80098d4:	e841 2300 	strex	r3, r2, [r1]
 80098d8:	613b      	str	r3, [r7, #16]
   return(result);
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1e5      	bne.n	80098ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2220      	movs	r2, #32
 80098e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80098e8:	bf00      	nop
 80098ea:	3724      	adds	r7, #36	@ 0x24
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b095      	sub	sp, #84	@ 0x54
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	330c      	adds	r3, #12
 8009902:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009906:	e853 3f00 	ldrex	r3, [r3]
 800990a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800990c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800990e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	330c      	adds	r3, #12
 800991a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800991c:	643a      	str	r2, [r7, #64]	@ 0x40
 800991e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009920:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009922:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009924:	e841 2300 	strex	r3, r2, [r1]
 8009928:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800992a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800992c:	2b00      	cmp	r3, #0
 800992e:	d1e5      	bne.n	80098fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	3314      	adds	r3, #20
 8009936:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009938:	6a3b      	ldr	r3, [r7, #32]
 800993a:	e853 3f00 	ldrex	r3, [r3]
 800993e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	f023 0301 	bic.w	r3, r3, #1
 8009946:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	3314      	adds	r3, #20
 800994e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009950:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009952:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009954:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009956:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009958:	e841 2300 	strex	r3, r2, [r1]
 800995c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800995e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1e5      	bne.n	8009930 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009968:	2b01      	cmp	r3, #1
 800996a:	d119      	bne.n	80099a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	330c      	adds	r3, #12
 8009972:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	e853 3f00 	ldrex	r3, [r3]
 800997a:	60bb      	str	r3, [r7, #8]
   return(result);
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	f023 0310 	bic.w	r3, r3, #16
 8009982:	647b      	str	r3, [r7, #68]	@ 0x44
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	330c      	adds	r3, #12
 800998a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800998c:	61ba      	str	r2, [r7, #24]
 800998e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009990:	6979      	ldr	r1, [r7, #20]
 8009992:	69ba      	ldr	r2, [r7, #24]
 8009994:	e841 2300 	strex	r3, r2, [r1]
 8009998:	613b      	str	r3, [r7, #16]
   return(result);
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1e5      	bne.n	800996c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2220      	movs	r2, #32
 80099a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80099ae:	bf00      	nop
 80099b0:	3754      	adds	r7, #84	@ 0x54
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr

080099ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b084      	sub	sp, #16
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2200      	movs	r2, #0
 80099cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f7ff fdae 	bl	8009530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099d4:	bf00      	nop
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	2b21      	cmp	r3, #33	@ 0x21
 80099ee:	d13e      	bne.n	8009a6e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099f8:	d114      	bne.n	8009a24 <UART_Transmit_IT+0x48>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d110      	bne.n	8009a24 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a1b      	ldr	r3, [r3, #32]
 8009a06:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	881b      	ldrh	r3, [r3, #0]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a16:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a1b      	ldr	r3, [r3, #32]
 8009a1c:	1c9a      	adds	r2, r3, #2
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	621a      	str	r2, [r3, #32]
 8009a22:	e008      	b.n	8009a36 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a1b      	ldr	r3, [r3, #32]
 8009a28:	1c59      	adds	r1, r3, #1
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	6211      	str	r1, [r2, #32]
 8009a2e:	781a      	ldrb	r2, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	4619      	mov	r1, r3
 8009a44:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d10f      	bne.n	8009a6a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68da      	ldr	r2, [r3, #12]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009a58:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68da      	ldr	r2, [r3, #12]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009a68:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	e000      	b.n	8009a70 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009a6e:	2302      	movs	r3, #2
  }
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3714      	adds	r7, #20
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	68da      	ldr	r2, [r3, #12]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a92:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2220      	movs	r2, #32
 8009a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f7ff fd33 	bl	8009508 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b08c      	sub	sp, #48	@ 0x30
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	2b22      	cmp	r3, #34	@ 0x22
 8009ac6:	f040 80aa 	bne.w	8009c1e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ad2:	d115      	bne.n	8009b00 <UART_Receive_IT+0x54>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d111      	bne.n	8009b00 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aee:	b29a      	uxth	r2, r3
 8009af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009af8:	1c9a      	adds	r2, r3, #2
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	629a      	str	r2, [r3, #40]	@ 0x28
 8009afe:	e024      	b.n	8009b4a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b0e:	d007      	beq.n	8009b20 <UART_Receive_IT+0x74>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10a      	bne.n	8009b2e <UART_Receive_IT+0x82>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d106      	bne.n	8009b2e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	b2da      	uxtb	r2, r3
 8009b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b2a:	701a      	strb	r2, [r3, #0]
 8009b2c:	e008      	b.n	8009b40 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b3a:	b2da      	uxtb	r2, r3
 8009b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b3e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b44:	1c5a      	adds	r2, r3, #1
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	3b01      	subs	r3, #1
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	4619      	mov	r1, r3
 8009b58:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d15d      	bne.n	8009c1a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	68da      	ldr	r2, [r3, #12]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f022 0220 	bic.w	r2, r2, #32
 8009b6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	68da      	ldr	r2, [r3, #12]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009b7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	695a      	ldr	r2, [r3, #20]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f022 0201 	bic.w	r2, r2, #1
 8009b8c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2220      	movs	r2, #32
 8009b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d135      	bne.n	8009c10 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	330c      	adds	r3, #12
 8009bb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	e853 3f00 	ldrex	r3, [r3]
 8009bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	f023 0310 	bic.w	r3, r3, #16
 8009bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	330c      	adds	r3, #12
 8009bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bca:	623a      	str	r2, [r7, #32]
 8009bcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bce:	69f9      	ldr	r1, [r7, #28]
 8009bd0:	6a3a      	ldr	r2, [r7, #32]
 8009bd2:	e841 2300 	strex	r3, r2, [r1]
 8009bd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1e5      	bne.n	8009baa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 0310 	and.w	r3, r3, #16
 8009be8:	2b10      	cmp	r3, #16
 8009bea:	d10a      	bne.n	8009c02 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009bec:	2300      	movs	r3, #0
 8009bee:	60fb      	str	r3, [r7, #12]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	60fb      	str	r3, [r7, #12]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	60fb      	str	r3, [r7, #12]
 8009c00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009c06:	4619      	mov	r1, r3
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f7ff fc9b 	bl	8009544 <HAL_UARTEx_RxEventCallback>
 8009c0e:	e002      	b.n	8009c16 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7fb fbad 	bl	8005370 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009c16:	2300      	movs	r3, #0
 8009c18:	e002      	b.n	8009c20 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	e000      	b.n	8009c20 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009c1e:	2302      	movs	r3, #2
  }
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3730      	adds	r7, #48	@ 0x30
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c2c:	b0c0      	sub	sp, #256	@ 0x100
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	691b      	ldr	r3, [r3, #16]
 8009c3c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c44:	68d9      	ldr	r1, [r3, #12]
 8009c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	ea40 0301 	orr.w	r3, r0, r1
 8009c50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c56:	689a      	ldr	r2, [r3, #8]
 8009c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c5c:	691b      	ldr	r3, [r3, #16]
 8009c5e:	431a      	orrs	r2, r3
 8009c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c64:	695b      	ldr	r3, [r3, #20]
 8009c66:	431a      	orrs	r2, r3
 8009c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c6c:	69db      	ldr	r3, [r3, #28]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009c80:	f021 010c 	bic.w	r1, r1, #12
 8009c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009c8e:	430b      	orrs	r3, r1
 8009c90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	695b      	ldr	r3, [r3, #20]
 8009c9a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ca2:	6999      	ldr	r1, [r3, #24]
 8009ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	ea40 0301 	orr.w	r3, r0, r1
 8009cae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	4b8f      	ldr	r3, [pc, #572]	@ (8009ef4 <UART_SetConfig+0x2cc>)
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d005      	beq.n	8009cc8 <UART_SetConfig+0xa0>
 8009cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	4b8d      	ldr	r3, [pc, #564]	@ (8009ef8 <UART_SetConfig+0x2d0>)
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d104      	bne.n	8009cd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009cc8:	f7fe f940 	bl	8007f4c <HAL_RCC_GetPCLK2Freq>
 8009ccc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009cd0:	e003      	b.n	8009cda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009cd2:	f7fe f927 	bl	8007f24 <HAL_RCC_GetPCLK1Freq>
 8009cd6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cde:	69db      	ldr	r3, [r3, #28]
 8009ce0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ce4:	f040 810c 	bne.w	8009f00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009ce8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009cec:	2200      	movs	r2, #0
 8009cee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009cf2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009cf6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009cfa:	4622      	mov	r2, r4
 8009cfc:	462b      	mov	r3, r5
 8009cfe:	1891      	adds	r1, r2, r2
 8009d00:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009d02:	415b      	adcs	r3, r3
 8009d04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009d0a:	4621      	mov	r1, r4
 8009d0c:	eb12 0801 	adds.w	r8, r2, r1
 8009d10:	4629      	mov	r1, r5
 8009d12:	eb43 0901 	adc.w	r9, r3, r1
 8009d16:	f04f 0200 	mov.w	r2, #0
 8009d1a:	f04f 0300 	mov.w	r3, #0
 8009d1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009d22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009d26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d2a:	4690      	mov	r8, r2
 8009d2c:	4699      	mov	r9, r3
 8009d2e:	4623      	mov	r3, r4
 8009d30:	eb18 0303 	adds.w	r3, r8, r3
 8009d34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009d38:	462b      	mov	r3, r5
 8009d3a:	eb49 0303 	adc.w	r3, r9, r3
 8009d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009d4e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009d52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009d56:	460b      	mov	r3, r1
 8009d58:	18db      	adds	r3, r3, r3
 8009d5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	eb42 0303 	adc.w	r3, r2, r3
 8009d62:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009d68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009d6c:	f7f6 fee0 	bl	8000b30 <__aeabi_uldivmod>
 8009d70:	4602      	mov	r2, r0
 8009d72:	460b      	mov	r3, r1
 8009d74:	4b61      	ldr	r3, [pc, #388]	@ (8009efc <UART_SetConfig+0x2d4>)
 8009d76:	fba3 2302 	umull	r2, r3, r3, r2
 8009d7a:	095b      	lsrs	r3, r3, #5
 8009d7c:	011c      	lsls	r4, r3, #4
 8009d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d82:	2200      	movs	r2, #0
 8009d84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d88:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009d8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009d90:	4642      	mov	r2, r8
 8009d92:	464b      	mov	r3, r9
 8009d94:	1891      	adds	r1, r2, r2
 8009d96:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009d98:	415b      	adcs	r3, r3
 8009d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009da0:	4641      	mov	r1, r8
 8009da2:	eb12 0a01 	adds.w	sl, r2, r1
 8009da6:	4649      	mov	r1, r9
 8009da8:	eb43 0b01 	adc.w	fp, r3, r1
 8009dac:	f04f 0200 	mov.w	r2, #0
 8009db0:	f04f 0300 	mov.w	r3, #0
 8009db4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009db8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009dbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009dc0:	4692      	mov	sl, r2
 8009dc2:	469b      	mov	fp, r3
 8009dc4:	4643      	mov	r3, r8
 8009dc6:	eb1a 0303 	adds.w	r3, sl, r3
 8009dca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009dce:	464b      	mov	r3, r9
 8009dd0:	eb4b 0303 	adc.w	r3, fp, r3
 8009dd4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009de4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009de8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009dec:	460b      	mov	r3, r1
 8009dee:	18db      	adds	r3, r3, r3
 8009df0:	643b      	str	r3, [r7, #64]	@ 0x40
 8009df2:	4613      	mov	r3, r2
 8009df4:	eb42 0303 	adc.w	r3, r2, r3
 8009df8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009dfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009e02:	f7f6 fe95 	bl	8000b30 <__aeabi_uldivmod>
 8009e06:	4602      	mov	r2, r0
 8009e08:	460b      	mov	r3, r1
 8009e0a:	4611      	mov	r1, r2
 8009e0c:	4b3b      	ldr	r3, [pc, #236]	@ (8009efc <UART_SetConfig+0x2d4>)
 8009e0e:	fba3 2301 	umull	r2, r3, r3, r1
 8009e12:	095b      	lsrs	r3, r3, #5
 8009e14:	2264      	movs	r2, #100	@ 0x64
 8009e16:	fb02 f303 	mul.w	r3, r2, r3
 8009e1a:	1acb      	subs	r3, r1, r3
 8009e1c:	00db      	lsls	r3, r3, #3
 8009e1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009e22:	4b36      	ldr	r3, [pc, #216]	@ (8009efc <UART_SetConfig+0x2d4>)
 8009e24:	fba3 2302 	umull	r2, r3, r3, r2
 8009e28:	095b      	lsrs	r3, r3, #5
 8009e2a:	005b      	lsls	r3, r3, #1
 8009e2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009e30:	441c      	add	r4, r3
 8009e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e36:	2200      	movs	r2, #0
 8009e38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009e40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009e44:	4642      	mov	r2, r8
 8009e46:	464b      	mov	r3, r9
 8009e48:	1891      	adds	r1, r2, r2
 8009e4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009e4c:	415b      	adcs	r3, r3
 8009e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009e54:	4641      	mov	r1, r8
 8009e56:	1851      	adds	r1, r2, r1
 8009e58:	6339      	str	r1, [r7, #48]	@ 0x30
 8009e5a:	4649      	mov	r1, r9
 8009e5c:	414b      	adcs	r3, r1
 8009e5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e60:	f04f 0200 	mov.w	r2, #0
 8009e64:	f04f 0300 	mov.w	r3, #0
 8009e68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009e6c:	4659      	mov	r1, fp
 8009e6e:	00cb      	lsls	r3, r1, #3
 8009e70:	4651      	mov	r1, sl
 8009e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e76:	4651      	mov	r1, sl
 8009e78:	00ca      	lsls	r2, r1, #3
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	4603      	mov	r3, r0
 8009e80:	4642      	mov	r2, r8
 8009e82:	189b      	adds	r3, r3, r2
 8009e84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e88:	464b      	mov	r3, r9
 8009e8a:	460a      	mov	r2, r1
 8009e8c:	eb42 0303 	adc.w	r3, r2, r3
 8009e90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009ea0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009ea4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	18db      	adds	r3, r3, r3
 8009eac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009eae:	4613      	mov	r3, r2
 8009eb0:	eb42 0303 	adc.w	r3, r2, r3
 8009eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009eb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009eba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009ebe:	f7f6 fe37 	bl	8000b30 <__aeabi_uldivmod>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8009efc <UART_SetConfig+0x2d4>)
 8009ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8009ecc:	095b      	lsrs	r3, r3, #5
 8009ece:	2164      	movs	r1, #100	@ 0x64
 8009ed0:	fb01 f303 	mul.w	r3, r1, r3
 8009ed4:	1ad3      	subs	r3, r2, r3
 8009ed6:	00db      	lsls	r3, r3, #3
 8009ed8:	3332      	adds	r3, #50	@ 0x32
 8009eda:	4a08      	ldr	r2, [pc, #32]	@ (8009efc <UART_SetConfig+0x2d4>)
 8009edc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee0:	095b      	lsrs	r3, r3, #5
 8009ee2:	f003 0207 	and.w	r2, r3, #7
 8009ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4422      	add	r2, r4
 8009eee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009ef0:	e106      	b.n	800a100 <UART_SetConfig+0x4d8>
 8009ef2:	bf00      	nop
 8009ef4:	40011000 	.word	0x40011000
 8009ef8:	40011400 	.word	0x40011400
 8009efc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f04:	2200      	movs	r2, #0
 8009f06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009f0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009f0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009f12:	4642      	mov	r2, r8
 8009f14:	464b      	mov	r3, r9
 8009f16:	1891      	adds	r1, r2, r2
 8009f18:	6239      	str	r1, [r7, #32]
 8009f1a:	415b      	adcs	r3, r3
 8009f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009f22:	4641      	mov	r1, r8
 8009f24:	1854      	adds	r4, r2, r1
 8009f26:	4649      	mov	r1, r9
 8009f28:	eb43 0501 	adc.w	r5, r3, r1
 8009f2c:	f04f 0200 	mov.w	r2, #0
 8009f30:	f04f 0300 	mov.w	r3, #0
 8009f34:	00eb      	lsls	r3, r5, #3
 8009f36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f3a:	00e2      	lsls	r2, r4, #3
 8009f3c:	4614      	mov	r4, r2
 8009f3e:	461d      	mov	r5, r3
 8009f40:	4643      	mov	r3, r8
 8009f42:	18e3      	adds	r3, r4, r3
 8009f44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009f48:	464b      	mov	r3, r9
 8009f4a:	eb45 0303 	adc.w	r3, r5, r3
 8009f4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009f5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009f62:	f04f 0200 	mov.w	r2, #0
 8009f66:	f04f 0300 	mov.w	r3, #0
 8009f6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009f6e:	4629      	mov	r1, r5
 8009f70:	008b      	lsls	r3, r1, #2
 8009f72:	4621      	mov	r1, r4
 8009f74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f78:	4621      	mov	r1, r4
 8009f7a:	008a      	lsls	r2, r1, #2
 8009f7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009f80:	f7f6 fdd6 	bl	8000b30 <__aeabi_uldivmod>
 8009f84:	4602      	mov	r2, r0
 8009f86:	460b      	mov	r3, r1
 8009f88:	4b60      	ldr	r3, [pc, #384]	@ (800a10c <UART_SetConfig+0x4e4>)
 8009f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8009f8e:	095b      	lsrs	r3, r3, #5
 8009f90:	011c      	lsls	r4, r3, #4
 8009f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f96:	2200      	movs	r2, #0
 8009f98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009fa0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009fa4:	4642      	mov	r2, r8
 8009fa6:	464b      	mov	r3, r9
 8009fa8:	1891      	adds	r1, r2, r2
 8009faa:	61b9      	str	r1, [r7, #24]
 8009fac:	415b      	adcs	r3, r3
 8009fae:	61fb      	str	r3, [r7, #28]
 8009fb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009fb4:	4641      	mov	r1, r8
 8009fb6:	1851      	adds	r1, r2, r1
 8009fb8:	6139      	str	r1, [r7, #16]
 8009fba:	4649      	mov	r1, r9
 8009fbc:	414b      	adcs	r3, r1
 8009fbe:	617b      	str	r3, [r7, #20]
 8009fc0:	f04f 0200 	mov.w	r2, #0
 8009fc4:	f04f 0300 	mov.w	r3, #0
 8009fc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009fcc:	4659      	mov	r1, fp
 8009fce:	00cb      	lsls	r3, r1, #3
 8009fd0:	4651      	mov	r1, sl
 8009fd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009fd6:	4651      	mov	r1, sl
 8009fd8:	00ca      	lsls	r2, r1, #3
 8009fda:	4610      	mov	r0, r2
 8009fdc:	4619      	mov	r1, r3
 8009fde:	4603      	mov	r3, r0
 8009fe0:	4642      	mov	r2, r8
 8009fe2:	189b      	adds	r3, r3, r2
 8009fe4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009fe8:	464b      	mov	r3, r9
 8009fea:	460a      	mov	r2, r1
 8009fec:	eb42 0303 	adc.w	r3, r2, r3
 8009ff0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009ffe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a000:	f04f 0200 	mov.w	r2, #0
 800a004:	f04f 0300 	mov.w	r3, #0
 800a008:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a00c:	4649      	mov	r1, r9
 800a00e:	008b      	lsls	r3, r1, #2
 800a010:	4641      	mov	r1, r8
 800a012:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a016:	4641      	mov	r1, r8
 800a018:	008a      	lsls	r2, r1, #2
 800a01a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a01e:	f7f6 fd87 	bl	8000b30 <__aeabi_uldivmod>
 800a022:	4602      	mov	r2, r0
 800a024:	460b      	mov	r3, r1
 800a026:	4611      	mov	r1, r2
 800a028:	4b38      	ldr	r3, [pc, #224]	@ (800a10c <UART_SetConfig+0x4e4>)
 800a02a:	fba3 2301 	umull	r2, r3, r3, r1
 800a02e:	095b      	lsrs	r3, r3, #5
 800a030:	2264      	movs	r2, #100	@ 0x64
 800a032:	fb02 f303 	mul.w	r3, r2, r3
 800a036:	1acb      	subs	r3, r1, r3
 800a038:	011b      	lsls	r3, r3, #4
 800a03a:	3332      	adds	r3, #50	@ 0x32
 800a03c:	4a33      	ldr	r2, [pc, #204]	@ (800a10c <UART_SetConfig+0x4e4>)
 800a03e:	fba2 2303 	umull	r2, r3, r2, r3
 800a042:	095b      	lsrs	r3, r3, #5
 800a044:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a048:	441c      	add	r4, r3
 800a04a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a04e:	2200      	movs	r2, #0
 800a050:	673b      	str	r3, [r7, #112]	@ 0x70
 800a052:	677a      	str	r2, [r7, #116]	@ 0x74
 800a054:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a058:	4642      	mov	r2, r8
 800a05a:	464b      	mov	r3, r9
 800a05c:	1891      	adds	r1, r2, r2
 800a05e:	60b9      	str	r1, [r7, #8]
 800a060:	415b      	adcs	r3, r3
 800a062:	60fb      	str	r3, [r7, #12]
 800a064:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a068:	4641      	mov	r1, r8
 800a06a:	1851      	adds	r1, r2, r1
 800a06c:	6039      	str	r1, [r7, #0]
 800a06e:	4649      	mov	r1, r9
 800a070:	414b      	adcs	r3, r1
 800a072:	607b      	str	r3, [r7, #4]
 800a074:	f04f 0200 	mov.w	r2, #0
 800a078:	f04f 0300 	mov.w	r3, #0
 800a07c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a080:	4659      	mov	r1, fp
 800a082:	00cb      	lsls	r3, r1, #3
 800a084:	4651      	mov	r1, sl
 800a086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a08a:	4651      	mov	r1, sl
 800a08c:	00ca      	lsls	r2, r1, #3
 800a08e:	4610      	mov	r0, r2
 800a090:	4619      	mov	r1, r3
 800a092:	4603      	mov	r3, r0
 800a094:	4642      	mov	r2, r8
 800a096:	189b      	adds	r3, r3, r2
 800a098:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a09a:	464b      	mov	r3, r9
 800a09c:	460a      	mov	r2, r1
 800a09e:	eb42 0303 	adc.w	r3, r2, r3
 800a0a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a0a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	663b      	str	r3, [r7, #96]	@ 0x60
 800a0ae:	667a      	str	r2, [r7, #100]	@ 0x64
 800a0b0:	f04f 0200 	mov.w	r2, #0
 800a0b4:	f04f 0300 	mov.w	r3, #0
 800a0b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a0bc:	4649      	mov	r1, r9
 800a0be:	008b      	lsls	r3, r1, #2
 800a0c0:	4641      	mov	r1, r8
 800a0c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0c6:	4641      	mov	r1, r8
 800a0c8:	008a      	lsls	r2, r1, #2
 800a0ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a0ce:	f7f6 fd2f 	bl	8000b30 <__aeabi_uldivmod>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a10c <UART_SetConfig+0x4e4>)
 800a0d8:	fba3 1302 	umull	r1, r3, r3, r2
 800a0dc:	095b      	lsrs	r3, r3, #5
 800a0de:	2164      	movs	r1, #100	@ 0x64
 800a0e0:	fb01 f303 	mul.w	r3, r1, r3
 800a0e4:	1ad3      	subs	r3, r2, r3
 800a0e6:	011b      	lsls	r3, r3, #4
 800a0e8:	3332      	adds	r3, #50	@ 0x32
 800a0ea:	4a08      	ldr	r2, [pc, #32]	@ (800a10c <UART_SetConfig+0x4e4>)
 800a0ec:	fba2 2303 	umull	r2, r3, r2, r3
 800a0f0:	095b      	lsrs	r3, r3, #5
 800a0f2:	f003 020f 	and.w	r2, r3, #15
 800a0f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4422      	add	r2, r4
 800a0fe:	609a      	str	r2, [r3, #8]
}
 800a100:	bf00      	nop
 800a102:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a106:	46bd      	mov	sp, r7
 800a108:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a10c:	51eb851f 	.word	0x51eb851f

0800a110 <memset>:
 800a110:	4402      	add	r2, r0
 800a112:	4603      	mov	r3, r0
 800a114:	4293      	cmp	r3, r2
 800a116:	d100      	bne.n	800a11a <memset+0xa>
 800a118:	4770      	bx	lr
 800a11a:	f803 1b01 	strb.w	r1, [r3], #1
 800a11e:	e7f9      	b.n	800a114 <memset+0x4>

0800a120 <__errno>:
 800a120:	4b01      	ldr	r3, [pc, #4]	@ (800a128 <__errno+0x8>)
 800a122:	6818      	ldr	r0, [r3, #0]
 800a124:	4770      	bx	lr
 800a126:	bf00      	nop
 800a128:	2000000c 	.word	0x2000000c

0800a12c <__libc_init_array>:
 800a12c:	b570      	push	{r4, r5, r6, lr}
 800a12e:	4d0d      	ldr	r5, [pc, #52]	@ (800a164 <__libc_init_array+0x38>)
 800a130:	4c0d      	ldr	r4, [pc, #52]	@ (800a168 <__libc_init_array+0x3c>)
 800a132:	1b64      	subs	r4, r4, r5
 800a134:	10a4      	asrs	r4, r4, #2
 800a136:	2600      	movs	r6, #0
 800a138:	42a6      	cmp	r6, r4
 800a13a:	d109      	bne.n	800a150 <__libc_init_array+0x24>
 800a13c:	4d0b      	ldr	r5, [pc, #44]	@ (800a16c <__libc_init_array+0x40>)
 800a13e:	4c0c      	ldr	r4, [pc, #48]	@ (800a170 <__libc_init_array+0x44>)
 800a140:	f000 ff78 	bl	800b034 <_init>
 800a144:	1b64      	subs	r4, r4, r5
 800a146:	10a4      	asrs	r4, r4, #2
 800a148:	2600      	movs	r6, #0
 800a14a:	42a6      	cmp	r6, r4
 800a14c:	d105      	bne.n	800a15a <__libc_init_array+0x2e>
 800a14e:	bd70      	pop	{r4, r5, r6, pc}
 800a150:	f855 3b04 	ldr.w	r3, [r5], #4
 800a154:	4798      	blx	r3
 800a156:	3601      	adds	r6, #1
 800a158:	e7ee      	b.n	800a138 <__libc_init_array+0xc>
 800a15a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a15e:	4798      	blx	r3
 800a160:	3601      	adds	r6, #1
 800a162:	e7f2      	b.n	800a14a <__libc_init_array+0x1e>
 800a164:	0800b0b0 	.word	0x0800b0b0
 800a168:	0800b0b0 	.word	0x0800b0b0
 800a16c:	0800b0b0 	.word	0x0800b0b0
 800a170:	0800b0b4 	.word	0x0800b0b4

0800a174 <pow>:
 800a174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a176:	ed2d 8b02 	vpush	{d8}
 800a17a:	eeb0 8a40 	vmov.f32	s16, s0
 800a17e:	eef0 8a60 	vmov.f32	s17, s1
 800a182:	ec55 4b11 	vmov	r4, r5, d1
 800a186:	f000 f873 	bl	800a270 <__ieee754_pow>
 800a18a:	4622      	mov	r2, r4
 800a18c:	462b      	mov	r3, r5
 800a18e:	4620      	mov	r0, r4
 800a190:	4629      	mov	r1, r5
 800a192:	ec57 6b10 	vmov	r6, r7, d0
 800a196:	f7f6 fc95 	bl	8000ac4 <__aeabi_dcmpun>
 800a19a:	2800      	cmp	r0, #0
 800a19c:	d13b      	bne.n	800a216 <pow+0xa2>
 800a19e:	ec51 0b18 	vmov	r0, r1, d8
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	f7f6 fc5b 	bl	8000a60 <__aeabi_dcmpeq>
 800a1aa:	b1b8      	cbz	r0, 800a1dc <pow+0x68>
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	4629      	mov	r1, r5
 800a1b4:	f7f6 fc54 	bl	8000a60 <__aeabi_dcmpeq>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	d146      	bne.n	800a24a <pow+0xd6>
 800a1bc:	ec45 4b10 	vmov	d0, r4, r5
 800a1c0:	f000 f848 	bl	800a254 <finite>
 800a1c4:	b338      	cbz	r0, 800a216 <pow+0xa2>
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	4629      	mov	r1, r5
 800a1ce:	f7f6 fc51 	bl	8000a74 <__aeabi_dcmplt>
 800a1d2:	b300      	cbz	r0, 800a216 <pow+0xa2>
 800a1d4:	f7ff ffa4 	bl	800a120 <__errno>
 800a1d8:	2322      	movs	r3, #34	@ 0x22
 800a1da:	e01b      	b.n	800a214 <pow+0xa0>
 800a1dc:	ec47 6b10 	vmov	d0, r6, r7
 800a1e0:	f000 f838 	bl	800a254 <finite>
 800a1e4:	b9e0      	cbnz	r0, 800a220 <pow+0xac>
 800a1e6:	eeb0 0a48 	vmov.f32	s0, s16
 800a1ea:	eef0 0a68 	vmov.f32	s1, s17
 800a1ee:	f000 f831 	bl	800a254 <finite>
 800a1f2:	b1a8      	cbz	r0, 800a220 <pow+0xac>
 800a1f4:	ec45 4b10 	vmov	d0, r4, r5
 800a1f8:	f000 f82c 	bl	800a254 <finite>
 800a1fc:	b180      	cbz	r0, 800a220 <pow+0xac>
 800a1fe:	4632      	mov	r2, r6
 800a200:	463b      	mov	r3, r7
 800a202:	4630      	mov	r0, r6
 800a204:	4639      	mov	r1, r7
 800a206:	f7f6 fc5d 	bl	8000ac4 <__aeabi_dcmpun>
 800a20a:	2800      	cmp	r0, #0
 800a20c:	d0e2      	beq.n	800a1d4 <pow+0x60>
 800a20e:	f7ff ff87 	bl	800a120 <__errno>
 800a212:	2321      	movs	r3, #33	@ 0x21
 800a214:	6003      	str	r3, [r0, #0]
 800a216:	ecbd 8b02 	vpop	{d8}
 800a21a:	ec47 6b10 	vmov	d0, r6, r7
 800a21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a220:	2200      	movs	r2, #0
 800a222:	2300      	movs	r3, #0
 800a224:	4630      	mov	r0, r6
 800a226:	4639      	mov	r1, r7
 800a228:	f7f6 fc1a 	bl	8000a60 <__aeabi_dcmpeq>
 800a22c:	2800      	cmp	r0, #0
 800a22e:	d0f2      	beq.n	800a216 <pow+0xa2>
 800a230:	eeb0 0a48 	vmov.f32	s0, s16
 800a234:	eef0 0a68 	vmov.f32	s1, s17
 800a238:	f000 f80c 	bl	800a254 <finite>
 800a23c:	2800      	cmp	r0, #0
 800a23e:	d0ea      	beq.n	800a216 <pow+0xa2>
 800a240:	ec45 4b10 	vmov	d0, r4, r5
 800a244:	f000 f806 	bl	800a254 <finite>
 800a248:	e7c3      	b.n	800a1d2 <pow+0x5e>
 800a24a:	4f01      	ldr	r7, [pc, #4]	@ (800a250 <pow+0xdc>)
 800a24c:	2600      	movs	r6, #0
 800a24e:	e7e2      	b.n	800a216 <pow+0xa2>
 800a250:	3ff00000 	.word	0x3ff00000

0800a254 <finite>:
 800a254:	b082      	sub	sp, #8
 800a256:	ed8d 0b00 	vstr	d0, [sp]
 800a25a:	9801      	ldr	r0, [sp, #4]
 800a25c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800a260:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a264:	0fc0      	lsrs	r0, r0, #31
 800a266:	b002      	add	sp, #8
 800a268:	4770      	bx	lr
 800a26a:	0000      	movs	r0, r0
 800a26c:	0000      	movs	r0, r0
	...

0800a270 <__ieee754_pow>:
 800a270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a274:	b091      	sub	sp, #68	@ 0x44
 800a276:	ed8d 1b00 	vstr	d1, [sp]
 800a27a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800a27e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800a282:	ea5a 0001 	orrs.w	r0, sl, r1
 800a286:	ec57 6b10 	vmov	r6, r7, d0
 800a28a:	d113      	bne.n	800a2b4 <__ieee754_pow+0x44>
 800a28c:	19b3      	adds	r3, r6, r6
 800a28e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800a292:	4152      	adcs	r2, r2
 800a294:	4298      	cmp	r0, r3
 800a296:	4b9a      	ldr	r3, [pc, #616]	@ (800a500 <__ieee754_pow+0x290>)
 800a298:	4193      	sbcs	r3, r2
 800a29a:	f080 84ee 	bcs.w	800ac7a <__ieee754_pow+0xa0a>
 800a29e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	4639      	mov	r1, r7
 800a2a6:	f7f5 ffbd 	bl	8000224 <__adddf3>
 800a2aa:	ec41 0b10 	vmov	d0, r0, r1
 800a2ae:	b011      	add	sp, #68	@ 0x44
 800a2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b4:	4a93      	ldr	r2, [pc, #588]	@ (800a504 <__ieee754_pow+0x294>)
 800a2b6:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800a2ba:	4295      	cmp	r5, r2
 800a2bc:	46b8      	mov	r8, r7
 800a2be:	4633      	mov	r3, r6
 800a2c0:	d80a      	bhi.n	800a2d8 <__ieee754_pow+0x68>
 800a2c2:	d104      	bne.n	800a2ce <__ieee754_pow+0x5e>
 800a2c4:	2e00      	cmp	r6, #0
 800a2c6:	d1ea      	bne.n	800a29e <__ieee754_pow+0x2e>
 800a2c8:	45aa      	cmp	sl, r5
 800a2ca:	d8e8      	bhi.n	800a29e <__ieee754_pow+0x2e>
 800a2cc:	e001      	b.n	800a2d2 <__ieee754_pow+0x62>
 800a2ce:	4592      	cmp	sl, r2
 800a2d0:	d802      	bhi.n	800a2d8 <__ieee754_pow+0x68>
 800a2d2:	4592      	cmp	sl, r2
 800a2d4:	d10f      	bne.n	800a2f6 <__ieee754_pow+0x86>
 800a2d6:	b171      	cbz	r1, 800a2f6 <__ieee754_pow+0x86>
 800a2d8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800a2dc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800a2e0:	ea58 0803 	orrs.w	r8, r8, r3
 800a2e4:	d1db      	bne.n	800a29e <__ieee754_pow+0x2e>
 800a2e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a2ea:	18db      	adds	r3, r3, r3
 800a2ec:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a2f0:	4152      	adcs	r2, r2
 800a2f2:	4598      	cmp	r8, r3
 800a2f4:	e7cf      	b.n	800a296 <__ieee754_pow+0x26>
 800a2f6:	f1b8 0f00 	cmp.w	r8, #0
 800a2fa:	46ab      	mov	fp, r5
 800a2fc:	da43      	bge.n	800a386 <__ieee754_pow+0x116>
 800a2fe:	4a82      	ldr	r2, [pc, #520]	@ (800a508 <__ieee754_pow+0x298>)
 800a300:	4592      	cmp	sl, r2
 800a302:	d856      	bhi.n	800a3b2 <__ieee754_pow+0x142>
 800a304:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a308:	4592      	cmp	sl, r2
 800a30a:	f240 84c5 	bls.w	800ac98 <__ieee754_pow+0xa28>
 800a30e:	ea4f 522a 	mov.w	r2, sl, asr #20
 800a312:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a316:	2a14      	cmp	r2, #20
 800a318:	dd18      	ble.n	800a34c <__ieee754_pow+0xdc>
 800a31a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a31e:	fa21 f402 	lsr.w	r4, r1, r2
 800a322:	fa04 f202 	lsl.w	r2, r4, r2
 800a326:	428a      	cmp	r2, r1
 800a328:	f040 84b6 	bne.w	800ac98 <__ieee754_pow+0xa28>
 800a32c:	f004 0401 	and.w	r4, r4, #1
 800a330:	f1c4 0402 	rsb	r4, r4, #2
 800a334:	2900      	cmp	r1, #0
 800a336:	d159      	bne.n	800a3ec <__ieee754_pow+0x17c>
 800a338:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800a33c:	d148      	bne.n	800a3d0 <__ieee754_pow+0x160>
 800a33e:	4632      	mov	r2, r6
 800a340:	463b      	mov	r3, r7
 800a342:	4630      	mov	r0, r6
 800a344:	4639      	mov	r1, r7
 800a346:	f7f6 f923 	bl	8000590 <__aeabi_dmul>
 800a34a:	e7ae      	b.n	800a2aa <__ieee754_pow+0x3a>
 800a34c:	2900      	cmp	r1, #0
 800a34e:	d14c      	bne.n	800a3ea <__ieee754_pow+0x17a>
 800a350:	f1c2 0214 	rsb	r2, r2, #20
 800a354:	fa4a f402 	asr.w	r4, sl, r2
 800a358:	fa04 f202 	lsl.w	r2, r4, r2
 800a35c:	4552      	cmp	r2, sl
 800a35e:	f040 8498 	bne.w	800ac92 <__ieee754_pow+0xa22>
 800a362:	f004 0401 	and.w	r4, r4, #1
 800a366:	f1c4 0402 	rsb	r4, r4, #2
 800a36a:	4a68      	ldr	r2, [pc, #416]	@ (800a50c <__ieee754_pow+0x29c>)
 800a36c:	4592      	cmp	sl, r2
 800a36e:	d1e3      	bne.n	800a338 <__ieee754_pow+0xc8>
 800a370:	f1b9 0f00 	cmp.w	r9, #0
 800a374:	f280 8489 	bge.w	800ac8a <__ieee754_pow+0xa1a>
 800a378:	4964      	ldr	r1, [pc, #400]	@ (800a50c <__ieee754_pow+0x29c>)
 800a37a:	4632      	mov	r2, r6
 800a37c:	463b      	mov	r3, r7
 800a37e:	2000      	movs	r0, #0
 800a380:	f7f6 fa30 	bl	80007e4 <__aeabi_ddiv>
 800a384:	e791      	b.n	800a2aa <__ieee754_pow+0x3a>
 800a386:	2400      	movs	r4, #0
 800a388:	bb81      	cbnz	r1, 800a3ec <__ieee754_pow+0x17c>
 800a38a:	4a5e      	ldr	r2, [pc, #376]	@ (800a504 <__ieee754_pow+0x294>)
 800a38c:	4592      	cmp	sl, r2
 800a38e:	d1ec      	bne.n	800a36a <__ieee754_pow+0xfa>
 800a390:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800a394:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800a398:	431a      	orrs	r2, r3
 800a39a:	f000 846e 	beq.w	800ac7a <__ieee754_pow+0xa0a>
 800a39e:	4b5c      	ldr	r3, [pc, #368]	@ (800a510 <__ieee754_pow+0x2a0>)
 800a3a0:	429d      	cmp	r5, r3
 800a3a2:	d908      	bls.n	800a3b6 <__ieee754_pow+0x146>
 800a3a4:	f1b9 0f00 	cmp.w	r9, #0
 800a3a8:	f280 846b 	bge.w	800ac82 <__ieee754_pow+0xa12>
 800a3ac:	2000      	movs	r0, #0
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	e77b      	b.n	800a2aa <__ieee754_pow+0x3a>
 800a3b2:	2402      	movs	r4, #2
 800a3b4:	e7e8      	b.n	800a388 <__ieee754_pow+0x118>
 800a3b6:	f1b9 0f00 	cmp.w	r9, #0
 800a3ba:	f04f 0000 	mov.w	r0, #0
 800a3be:	f04f 0100 	mov.w	r1, #0
 800a3c2:	f6bf af72 	bge.w	800a2aa <__ieee754_pow+0x3a>
 800a3c6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a3ca:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a3ce:	e76c      	b.n	800a2aa <__ieee754_pow+0x3a>
 800a3d0:	4a50      	ldr	r2, [pc, #320]	@ (800a514 <__ieee754_pow+0x2a4>)
 800a3d2:	4591      	cmp	r9, r2
 800a3d4:	d10a      	bne.n	800a3ec <__ieee754_pow+0x17c>
 800a3d6:	f1b8 0f00 	cmp.w	r8, #0
 800a3da:	db07      	blt.n	800a3ec <__ieee754_pow+0x17c>
 800a3dc:	ec47 6b10 	vmov	d0, r6, r7
 800a3e0:	b011      	add	sp, #68	@ 0x44
 800a3e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e6:	f000 bd4f 	b.w	800ae88 <__ieee754_sqrt>
 800a3ea:	2400      	movs	r4, #0
 800a3ec:	ec47 6b10 	vmov	d0, r6, r7
 800a3f0:	9302      	str	r3, [sp, #8]
 800a3f2:	f000 fc87 	bl	800ad04 <fabs>
 800a3f6:	9b02      	ldr	r3, [sp, #8]
 800a3f8:	ec51 0b10 	vmov	r0, r1, d0
 800a3fc:	bb43      	cbnz	r3, 800a450 <__ieee754_pow+0x1e0>
 800a3fe:	4b43      	ldr	r3, [pc, #268]	@ (800a50c <__ieee754_pow+0x29c>)
 800a400:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800a404:	429a      	cmp	r2, r3
 800a406:	d000      	beq.n	800a40a <__ieee754_pow+0x19a>
 800a408:	bb15      	cbnz	r5, 800a450 <__ieee754_pow+0x1e0>
 800a40a:	f1b9 0f00 	cmp.w	r9, #0
 800a40e:	da05      	bge.n	800a41c <__ieee754_pow+0x1ac>
 800a410:	4602      	mov	r2, r0
 800a412:	460b      	mov	r3, r1
 800a414:	2000      	movs	r0, #0
 800a416:	493d      	ldr	r1, [pc, #244]	@ (800a50c <__ieee754_pow+0x29c>)
 800a418:	f7f6 f9e4 	bl	80007e4 <__aeabi_ddiv>
 800a41c:	f1b8 0f00 	cmp.w	r8, #0
 800a420:	f6bf af43 	bge.w	800a2aa <__ieee754_pow+0x3a>
 800a424:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a428:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a42c:	4325      	orrs	r5, r4
 800a42e:	d108      	bne.n	800a442 <__ieee754_pow+0x1d2>
 800a430:	4602      	mov	r2, r0
 800a432:	460b      	mov	r3, r1
 800a434:	4610      	mov	r0, r2
 800a436:	4619      	mov	r1, r3
 800a438:	f7f5 fef2 	bl	8000220 <__aeabi_dsub>
 800a43c:	4602      	mov	r2, r0
 800a43e:	460b      	mov	r3, r1
 800a440:	e79e      	b.n	800a380 <__ieee754_pow+0x110>
 800a442:	2c01      	cmp	r4, #1
 800a444:	f47f af31 	bne.w	800a2aa <__ieee754_pow+0x3a>
 800a448:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a44c:	4619      	mov	r1, r3
 800a44e:	e72c      	b.n	800a2aa <__ieee754_pow+0x3a>
 800a450:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800a454:	3b01      	subs	r3, #1
 800a456:	ea53 0204 	orrs.w	r2, r3, r4
 800a45a:	d102      	bne.n	800a462 <__ieee754_pow+0x1f2>
 800a45c:	4632      	mov	r2, r6
 800a45e:	463b      	mov	r3, r7
 800a460:	e7e8      	b.n	800a434 <__ieee754_pow+0x1c4>
 800a462:	3c01      	subs	r4, #1
 800a464:	431c      	orrs	r4, r3
 800a466:	d016      	beq.n	800a496 <__ieee754_pow+0x226>
 800a468:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a4f0 <__ieee754_pow+0x280>
 800a46c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800a470:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a474:	f240 8110 	bls.w	800a698 <__ieee754_pow+0x428>
 800a478:	4b27      	ldr	r3, [pc, #156]	@ (800a518 <__ieee754_pow+0x2a8>)
 800a47a:	459a      	cmp	sl, r3
 800a47c:	4b24      	ldr	r3, [pc, #144]	@ (800a510 <__ieee754_pow+0x2a0>)
 800a47e:	d916      	bls.n	800a4ae <__ieee754_pow+0x23e>
 800a480:	429d      	cmp	r5, r3
 800a482:	d80b      	bhi.n	800a49c <__ieee754_pow+0x22c>
 800a484:	f1b9 0f00 	cmp.w	r9, #0
 800a488:	da0b      	bge.n	800a4a2 <__ieee754_pow+0x232>
 800a48a:	2000      	movs	r0, #0
 800a48c:	b011      	add	sp, #68	@ 0x44
 800a48e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a492:	f000 bcf1 	b.w	800ae78 <__math_oflow>
 800a496:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800a4f8 <__ieee754_pow+0x288>
 800a49a:	e7e7      	b.n	800a46c <__ieee754_pow+0x1fc>
 800a49c:	f1b9 0f00 	cmp.w	r9, #0
 800a4a0:	dcf3      	bgt.n	800a48a <__ieee754_pow+0x21a>
 800a4a2:	2000      	movs	r0, #0
 800a4a4:	b011      	add	sp, #68	@ 0x44
 800a4a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4aa:	f000 bcdd 	b.w	800ae68 <__math_uflow>
 800a4ae:	429d      	cmp	r5, r3
 800a4b0:	d20c      	bcs.n	800a4cc <__ieee754_pow+0x25c>
 800a4b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	f7f6 fadb 	bl	8000a74 <__aeabi_dcmplt>
 800a4be:	3800      	subs	r0, #0
 800a4c0:	bf18      	it	ne
 800a4c2:	2001      	movne	r0, #1
 800a4c4:	f1b9 0f00 	cmp.w	r9, #0
 800a4c8:	daec      	bge.n	800a4a4 <__ieee754_pow+0x234>
 800a4ca:	e7df      	b.n	800a48c <__ieee754_pow+0x21c>
 800a4cc:	4b0f      	ldr	r3, [pc, #60]	@ (800a50c <__ieee754_pow+0x29c>)
 800a4ce:	429d      	cmp	r5, r3
 800a4d0:	f04f 0200 	mov.w	r2, #0
 800a4d4:	d922      	bls.n	800a51c <__ieee754_pow+0x2ac>
 800a4d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4da:	2300      	movs	r3, #0
 800a4dc:	f7f6 faca 	bl	8000a74 <__aeabi_dcmplt>
 800a4e0:	3800      	subs	r0, #0
 800a4e2:	bf18      	it	ne
 800a4e4:	2001      	movne	r0, #1
 800a4e6:	f1b9 0f00 	cmp.w	r9, #0
 800a4ea:	dccf      	bgt.n	800a48c <__ieee754_pow+0x21c>
 800a4ec:	e7da      	b.n	800a4a4 <__ieee754_pow+0x234>
 800a4ee:	bf00      	nop
 800a4f0:	00000000 	.word	0x00000000
 800a4f4:	3ff00000 	.word	0x3ff00000
 800a4f8:	00000000 	.word	0x00000000
 800a4fc:	bff00000 	.word	0xbff00000
 800a500:	fff00000 	.word	0xfff00000
 800a504:	7ff00000 	.word	0x7ff00000
 800a508:	433fffff 	.word	0x433fffff
 800a50c:	3ff00000 	.word	0x3ff00000
 800a510:	3fefffff 	.word	0x3fefffff
 800a514:	3fe00000 	.word	0x3fe00000
 800a518:	43f00000 	.word	0x43f00000
 800a51c:	4b5a      	ldr	r3, [pc, #360]	@ (800a688 <__ieee754_pow+0x418>)
 800a51e:	f7f5 fe7f 	bl	8000220 <__aeabi_dsub>
 800a522:	a351      	add	r3, pc, #324	@ (adr r3, 800a668 <__ieee754_pow+0x3f8>)
 800a524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a528:	4604      	mov	r4, r0
 800a52a:	460d      	mov	r5, r1
 800a52c:	f7f6 f830 	bl	8000590 <__aeabi_dmul>
 800a530:	a34f      	add	r3, pc, #316	@ (adr r3, 800a670 <__ieee754_pow+0x400>)
 800a532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a536:	4606      	mov	r6, r0
 800a538:	460f      	mov	r7, r1
 800a53a:	4620      	mov	r0, r4
 800a53c:	4629      	mov	r1, r5
 800a53e:	f7f6 f827 	bl	8000590 <__aeabi_dmul>
 800a542:	4b52      	ldr	r3, [pc, #328]	@ (800a68c <__ieee754_pow+0x41c>)
 800a544:	4682      	mov	sl, r0
 800a546:	468b      	mov	fp, r1
 800a548:	2200      	movs	r2, #0
 800a54a:	4620      	mov	r0, r4
 800a54c:	4629      	mov	r1, r5
 800a54e:	f7f6 f81f 	bl	8000590 <__aeabi_dmul>
 800a552:	4602      	mov	r2, r0
 800a554:	460b      	mov	r3, r1
 800a556:	a148      	add	r1, pc, #288	@ (adr r1, 800a678 <__ieee754_pow+0x408>)
 800a558:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a55c:	f7f5 fe60 	bl	8000220 <__aeabi_dsub>
 800a560:	4622      	mov	r2, r4
 800a562:	462b      	mov	r3, r5
 800a564:	f7f6 f814 	bl	8000590 <__aeabi_dmul>
 800a568:	4602      	mov	r2, r0
 800a56a:	460b      	mov	r3, r1
 800a56c:	2000      	movs	r0, #0
 800a56e:	4948      	ldr	r1, [pc, #288]	@ (800a690 <__ieee754_pow+0x420>)
 800a570:	f7f5 fe56 	bl	8000220 <__aeabi_dsub>
 800a574:	4622      	mov	r2, r4
 800a576:	4680      	mov	r8, r0
 800a578:	4689      	mov	r9, r1
 800a57a:	462b      	mov	r3, r5
 800a57c:	4620      	mov	r0, r4
 800a57e:	4629      	mov	r1, r5
 800a580:	f7f6 f806 	bl	8000590 <__aeabi_dmul>
 800a584:	4602      	mov	r2, r0
 800a586:	460b      	mov	r3, r1
 800a588:	4640      	mov	r0, r8
 800a58a:	4649      	mov	r1, r9
 800a58c:	f7f6 f800 	bl	8000590 <__aeabi_dmul>
 800a590:	a33b      	add	r3, pc, #236	@ (adr r3, 800a680 <__ieee754_pow+0x410>)
 800a592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a596:	f7f5 fffb 	bl	8000590 <__aeabi_dmul>
 800a59a:	4602      	mov	r2, r0
 800a59c:	460b      	mov	r3, r1
 800a59e:	4650      	mov	r0, sl
 800a5a0:	4659      	mov	r1, fp
 800a5a2:	f7f5 fe3d 	bl	8000220 <__aeabi_dsub>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	4680      	mov	r8, r0
 800a5ac:	4689      	mov	r9, r1
 800a5ae:	4630      	mov	r0, r6
 800a5b0:	4639      	mov	r1, r7
 800a5b2:	f7f5 fe37 	bl	8000224 <__adddf3>
 800a5b6:	2400      	movs	r4, #0
 800a5b8:	4632      	mov	r2, r6
 800a5ba:	463b      	mov	r3, r7
 800a5bc:	4620      	mov	r0, r4
 800a5be:	460d      	mov	r5, r1
 800a5c0:	f7f5 fe2e 	bl	8000220 <__aeabi_dsub>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	4640      	mov	r0, r8
 800a5ca:	4649      	mov	r1, r9
 800a5cc:	f7f5 fe28 	bl	8000220 <__aeabi_dsub>
 800a5d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a5d8:	2300      	movs	r3, #0
 800a5da:	9304      	str	r3, [sp, #16]
 800a5dc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a5e0:	4606      	mov	r6, r0
 800a5e2:	460f      	mov	r7, r1
 800a5e4:	465b      	mov	r3, fp
 800a5e6:	4652      	mov	r2, sl
 800a5e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5ec:	f7f5 fe18 	bl	8000220 <__aeabi_dsub>
 800a5f0:	4622      	mov	r2, r4
 800a5f2:	462b      	mov	r3, r5
 800a5f4:	f7f5 ffcc 	bl	8000590 <__aeabi_dmul>
 800a5f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5fc:	4680      	mov	r8, r0
 800a5fe:	4689      	mov	r9, r1
 800a600:	4630      	mov	r0, r6
 800a602:	4639      	mov	r1, r7
 800a604:	f7f5 ffc4 	bl	8000590 <__aeabi_dmul>
 800a608:	4602      	mov	r2, r0
 800a60a:	460b      	mov	r3, r1
 800a60c:	4640      	mov	r0, r8
 800a60e:	4649      	mov	r1, r9
 800a610:	f7f5 fe08 	bl	8000224 <__adddf3>
 800a614:	465b      	mov	r3, fp
 800a616:	4606      	mov	r6, r0
 800a618:	460f      	mov	r7, r1
 800a61a:	4652      	mov	r2, sl
 800a61c:	4620      	mov	r0, r4
 800a61e:	4629      	mov	r1, r5
 800a620:	f7f5 ffb6 	bl	8000590 <__aeabi_dmul>
 800a624:	460b      	mov	r3, r1
 800a626:	4602      	mov	r2, r0
 800a628:	4680      	mov	r8, r0
 800a62a:	4689      	mov	r9, r1
 800a62c:	4630      	mov	r0, r6
 800a62e:	4639      	mov	r1, r7
 800a630:	f7f5 fdf8 	bl	8000224 <__adddf3>
 800a634:	4b17      	ldr	r3, [pc, #92]	@ (800a694 <__ieee754_pow+0x424>)
 800a636:	4299      	cmp	r1, r3
 800a638:	4604      	mov	r4, r0
 800a63a:	460d      	mov	r5, r1
 800a63c:	468b      	mov	fp, r1
 800a63e:	f340 820b 	ble.w	800aa58 <__ieee754_pow+0x7e8>
 800a642:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a646:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a64a:	4303      	orrs	r3, r0
 800a64c:	f000 81ea 	beq.w	800aa24 <__ieee754_pow+0x7b4>
 800a650:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a654:	2200      	movs	r2, #0
 800a656:	2300      	movs	r3, #0
 800a658:	f7f6 fa0c 	bl	8000a74 <__aeabi_dcmplt>
 800a65c:	3800      	subs	r0, #0
 800a65e:	bf18      	it	ne
 800a660:	2001      	movne	r0, #1
 800a662:	e713      	b.n	800a48c <__ieee754_pow+0x21c>
 800a664:	f3af 8000 	nop.w
 800a668:	60000000 	.word	0x60000000
 800a66c:	3ff71547 	.word	0x3ff71547
 800a670:	f85ddf44 	.word	0xf85ddf44
 800a674:	3e54ae0b 	.word	0x3e54ae0b
 800a678:	55555555 	.word	0x55555555
 800a67c:	3fd55555 	.word	0x3fd55555
 800a680:	652b82fe 	.word	0x652b82fe
 800a684:	3ff71547 	.word	0x3ff71547
 800a688:	3ff00000 	.word	0x3ff00000
 800a68c:	3fd00000 	.word	0x3fd00000
 800a690:	3fe00000 	.word	0x3fe00000
 800a694:	408fffff 	.word	0x408fffff
 800a698:	4bd5      	ldr	r3, [pc, #852]	@ (800a9f0 <__ieee754_pow+0x780>)
 800a69a:	ea08 0303 	and.w	r3, r8, r3
 800a69e:	2200      	movs	r2, #0
 800a6a0:	b92b      	cbnz	r3, 800a6ae <__ieee754_pow+0x43e>
 800a6a2:	4bd4      	ldr	r3, [pc, #848]	@ (800a9f4 <__ieee754_pow+0x784>)
 800a6a4:	f7f5 ff74 	bl	8000590 <__aeabi_dmul>
 800a6a8:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800a6ac:	468b      	mov	fp, r1
 800a6ae:	ea4f 532b 	mov.w	r3, fp, asr #20
 800a6b2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a6b6:	4413      	add	r3, r2
 800a6b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6ba:	4bcf      	ldr	r3, [pc, #828]	@ (800a9f8 <__ieee754_pow+0x788>)
 800a6bc:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800a6c0:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800a6c4:	459b      	cmp	fp, r3
 800a6c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a6ca:	dd08      	ble.n	800a6de <__ieee754_pow+0x46e>
 800a6cc:	4bcb      	ldr	r3, [pc, #812]	@ (800a9fc <__ieee754_pow+0x78c>)
 800a6ce:	459b      	cmp	fp, r3
 800a6d0:	f340 81a5 	ble.w	800aa1e <__ieee754_pow+0x7ae>
 800a6d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6da:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a6de:	f04f 0a00 	mov.w	sl, #0
 800a6e2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a6e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6e8:	4bc5      	ldr	r3, [pc, #788]	@ (800aa00 <__ieee754_pow+0x790>)
 800a6ea:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a6ee:	ed93 7b00 	vldr	d7, [r3]
 800a6f2:	4629      	mov	r1, r5
 800a6f4:	ec53 2b17 	vmov	r2, r3, d7
 800a6f8:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a6fc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a700:	f7f5 fd8e 	bl	8000220 <__aeabi_dsub>
 800a704:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a708:	4606      	mov	r6, r0
 800a70a:	460f      	mov	r7, r1
 800a70c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a710:	f7f5 fd88 	bl	8000224 <__adddf3>
 800a714:	4602      	mov	r2, r0
 800a716:	460b      	mov	r3, r1
 800a718:	2000      	movs	r0, #0
 800a71a:	49ba      	ldr	r1, [pc, #744]	@ (800aa04 <__ieee754_pow+0x794>)
 800a71c:	f7f6 f862 	bl	80007e4 <__aeabi_ddiv>
 800a720:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a724:	4602      	mov	r2, r0
 800a726:	460b      	mov	r3, r1
 800a728:	4630      	mov	r0, r6
 800a72a:	4639      	mov	r1, r7
 800a72c:	f7f5 ff30 	bl	8000590 <__aeabi_dmul>
 800a730:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a734:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800a738:	106d      	asrs	r5, r5, #1
 800a73a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a73e:	f04f 0b00 	mov.w	fp, #0
 800a742:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a746:	4661      	mov	r1, ip
 800a748:	2200      	movs	r2, #0
 800a74a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a74e:	4658      	mov	r0, fp
 800a750:	46e1      	mov	r9, ip
 800a752:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800a756:	4614      	mov	r4, r2
 800a758:	461d      	mov	r5, r3
 800a75a:	f7f5 ff19 	bl	8000590 <__aeabi_dmul>
 800a75e:	4602      	mov	r2, r0
 800a760:	460b      	mov	r3, r1
 800a762:	4630      	mov	r0, r6
 800a764:	4639      	mov	r1, r7
 800a766:	f7f5 fd5b 	bl	8000220 <__aeabi_dsub>
 800a76a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a76e:	4606      	mov	r6, r0
 800a770:	460f      	mov	r7, r1
 800a772:	4620      	mov	r0, r4
 800a774:	4629      	mov	r1, r5
 800a776:	f7f5 fd53 	bl	8000220 <__aeabi_dsub>
 800a77a:	4602      	mov	r2, r0
 800a77c:	460b      	mov	r3, r1
 800a77e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a782:	f7f5 fd4d 	bl	8000220 <__aeabi_dsub>
 800a786:	465a      	mov	r2, fp
 800a788:	464b      	mov	r3, r9
 800a78a:	f7f5 ff01 	bl	8000590 <__aeabi_dmul>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	4630      	mov	r0, r6
 800a794:	4639      	mov	r1, r7
 800a796:	f7f5 fd43 	bl	8000220 <__aeabi_dsub>
 800a79a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a79e:	f7f5 fef7 	bl	8000590 <__aeabi_dmul>
 800a7a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a7aa:	4610      	mov	r0, r2
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	f7f5 feef 	bl	8000590 <__aeabi_dmul>
 800a7b2:	a37d      	add	r3, pc, #500	@ (adr r3, 800a9a8 <__ieee754_pow+0x738>)
 800a7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b8:	4604      	mov	r4, r0
 800a7ba:	460d      	mov	r5, r1
 800a7bc:	f7f5 fee8 	bl	8000590 <__aeabi_dmul>
 800a7c0:	a37b      	add	r3, pc, #492	@ (adr r3, 800a9b0 <__ieee754_pow+0x740>)
 800a7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c6:	f7f5 fd2d 	bl	8000224 <__adddf3>
 800a7ca:	4622      	mov	r2, r4
 800a7cc:	462b      	mov	r3, r5
 800a7ce:	f7f5 fedf 	bl	8000590 <__aeabi_dmul>
 800a7d2:	a379      	add	r3, pc, #484	@ (adr r3, 800a9b8 <__ieee754_pow+0x748>)
 800a7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d8:	f7f5 fd24 	bl	8000224 <__adddf3>
 800a7dc:	4622      	mov	r2, r4
 800a7de:	462b      	mov	r3, r5
 800a7e0:	f7f5 fed6 	bl	8000590 <__aeabi_dmul>
 800a7e4:	a376      	add	r3, pc, #472	@ (adr r3, 800a9c0 <__ieee754_pow+0x750>)
 800a7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ea:	f7f5 fd1b 	bl	8000224 <__adddf3>
 800a7ee:	4622      	mov	r2, r4
 800a7f0:	462b      	mov	r3, r5
 800a7f2:	f7f5 fecd 	bl	8000590 <__aeabi_dmul>
 800a7f6:	a374      	add	r3, pc, #464	@ (adr r3, 800a9c8 <__ieee754_pow+0x758>)
 800a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fc:	f7f5 fd12 	bl	8000224 <__adddf3>
 800a800:	4622      	mov	r2, r4
 800a802:	462b      	mov	r3, r5
 800a804:	f7f5 fec4 	bl	8000590 <__aeabi_dmul>
 800a808:	a371      	add	r3, pc, #452	@ (adr r3, 800a9d0 <__ieee754_pow+0x760>)
 800a80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80e:	f7f5 fd09 	bl	8000224 <__adddf3>
 800a812:	4622      	mov	r2, r4
 800a814:	4606      	mov	r6, r0
 800a816:	460f      	mov	r7, r1
 800a818:	462b      	mov	r3, r5
 800a81a:	4620      	mov	r0, r4
 800a81c:	4629      	mov	r1, r5
 800a81e:	f7f5 feb7 	bl	8000590 <__aeabi_dmul>
 800a822:	4602      	mov	r2, r0
 800a824:	460b      	mov	r3, r1
 800a826:	4630      	mov	r0, r6
 800a828:	4639      	mov	r1, r7
 800a82a:	f7f5 feb1 	bl	8000590 <__aeabi_dmul>
 800a82e:	465a      	mov	r2, fp
 800a830:	4604      	mov	r4, r0
 800a832:	460d      	mov	r5, r1
 800a834:	464b      	mov	r3, r9
 800a836:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a83a:	f7f5 fcf3 	bl	8000224 <__adddf3>
 800a83e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a842:	f7f5 fea5 	bl	8000590 <__aeabi_dmul>
 800a846:	4622      	mov	r2, r4
 800a848:	462b      	mov	r3, r5
 800a84a:	f7f5 fceb 	bl	8000224 <__adddf3>
 800a84e:	465a      	mov	r2, fp
 800a850:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a854:	464b      	mov	r3, r9
 800a856:	4658      	mov	r0, fp
 800a858:	4649      	mov	r1, r9
 800a85a:	f7f5 fe99 	bl	8000590 <__aeabi_dmul>
 800a85e:	4b6a      	ldr	r3, [pc, #424]	@ (800aa08 <__ieee754_pow+0x798>)
 800a860:	2200      	movs	r2, #0
 800a862:	4606      	mov	r6, r0
 800a864:	460f      	mov	r7, r1
 800a866:	f7f5 fcdd 	bl	8000224 <__adddf3>
 800a86a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a86e:	f7f5 fcd9 	bl	8000224 <__adddf3>
 800a872:	46d8      	mov	r8, fp
 800a874:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800a878:	460d      	mov	r5, r1
 800a87a:	465a      	mov	r2, fp
 800a87c:	460b      	mov	r3, r1
 800a87e:	4640      	mov	r0, r8
 800a880:	4649      	mov	r1, r9
 800a882:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800a886:	f7f5 fe83 	bl	8000590 <__aeabi_dmul>
 800a88a:	465c      	mov	r4, fp
 800a88c:	4680      	mov	r8, r0
 800a88e:	4689      	mov	r9, r1
 800a890:	4b5d      	ldr	r3, [pc, #372]	@ (800aa08 <__ieee754_pow+0x798>)
 800a892:	2200      	movs	r2, #0
 800a894:	4620      	mov	r0, r4
 800a896:	4629      	mov	r1, r5
 800a898:	f7f5 fcc2 	bl	8000220 <__aeabi_dsub>
 800a89c:	4632      	mov	r2, r6
 800a89e:	463b      	mov	r3, r7
 800a8a0:	f7f5 fcbe 	bl	8000220 <__aeabi_dsub>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a8ac:	f7f5 fcb8 	bl	8000220 <__aeabi_dsub>
 800a8b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8b4:	f7f5 fe6c 	bl	8000590 <__aeabi_dmul>
 800a8b8:	4622      	mov	r2, r4
 800a8ba:	4606      	mov	r6, r0
 800a8bc:	460f      	mov	r7, r1
 800a8be:	462b      	mov	r3, r5
 800a8c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8c4:	f7f5 fe64 	bl	8000590 <__aeabi_dmul>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4630      	mov	r0, r6
 800a8ce:	4639      	mov	r1, r7
 800a8d0:	f7f5 fca8 	bl	8000224 <__adddf3>
 800a8d4:	4606      	mov	r6, r0
 800a8d6:	460f      	mov	r7, r1
 800a8d8:	4602      	mov	r2, r0
 800a8da:	460b      	mov	r3, r1
 800a8dc:	4640      	mov	r0, r8
 800a8de:	4649      	mov	r1, r9
 800a8e0:	f7f5 fca0 	bl	8000224 <__adddf3>
 800a8e4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800a8e8:	a33b      	add	r3, pc, #236	@ (adr r3, 800a9d8 <__ieee754_pow+0x768>)
 800a8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ee:	4658      	mov	r0, fp
 800a8f0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800a8f4:	460d      	mov	r5, r1
 800a8f6:	f7f5 fe4b 	bl	8000590 <__aeabi_dmul>
 800a8fa:	465c      	mov	r4, fp
 800a8fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a900:	4642      	mov	r2, r8
 800a902:	464b      	mov	r3, r9
 800a904:	4620      	mov	r0, r4
 800a906:	4629      	mov	r1, r5
 800a908:	f7f5 fc8a 	bl	8000220 <__aeabi_dsub>
 800a90c:	4602      	mov	r2, r0
 800a90e:	460b      	mov	r3, r1
 800a910:	4630      	mov	r0, r6
 800a912:	4639      	mov	r1, r7
 800a914:	f7f5 fc84 	bl	8000220 <__aeabi_dsub>
 800a918:	a331      	add	r3, pc, #196	@ (adr r3, 800a9e0 <__ieee754_pow+0x770>)
 800a91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91e:	f7f5 fe37 	bl	8000590 <__aeabi_dmul>
 800a922:	a331      	add	r3, pc, #196	@ (adr r3, 800a9e8 <__ieee754_pow+0x778>)
 800a924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a928:	4606      	mov	r6, r0
 800a92a:	460f      	mov	r7, r1
 800a92c:	4620      	mov	r0, r4
 800a92e:	4629      	mov	r1, r5
 800a930:	f7f5 fe2e 	bl	8000590 <__aeabi_dmul>
 800a934:	4602      	mov	r2, r0
 800a936:	460b      	mov	r3, r1
 800a938:	4630      	mov	r0, r6
 800a93a:	4639      	mov	r1, r7
 800a93c:	f7f5 fc72 	bl	8000224 <__adddf3>
 800a940:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a942:	4b32      	ldr	r3, [pc, #200]	@ (800aa0c <__ieee754_pow+0x79c>)
 800a944:	4413      	add	r3, r2
 800a946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94a:	f7f5 fc6b 	bl	8000224 <__adddf3>
 800a94e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a952:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a954:	f7f5 fdb2 	bl	80004bc <__aeabi_i2d>
 800a958:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a95a:	4b2d      	ldr	r3, [pc, #180]	@ (800aa10 <__ieee754_pow+0x7a0>)
 800a95c:	4413      	add	r3, r2
 800a95e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a962:	4606      	mov	r6, r0
 800a964:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a968:	460f      	mov	r7, r1
 800a96a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a96e:	f7f5 fc59 	bl	8000224 <__adddf3>
 800a972:	4642      	mov	r2, r8
 800a974:	464b      	mov	r3, r9
 800a976:	f7f5 fc55 	bl	8000224 <__adddf3>
 800a97a:	4632      	mov	r2, r6
 800a97c:	463b      	mov	r3, r7
 800a97e:	f7f5 fc51 	bl	8000224 <__adddf3>
 800a982:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800a986:	4632      	mov	r2, r6
 800a988:	463b      	mov	r3, r7
 800a98a:	4658      	mov	r0, fp
 800a98c:	460d      	mov	r5, r1
 800a98e:	f7f5 fc47 	bl	8000220 <__aeabi_dsub>
 800a992:	4642      	mov	r2, r8
 800a994:	464b      	mov	r3, r9
 800a996:	f7f5 fc43 	bl	8000220 <__aeabi_dsub>
 800a99a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a99e:	f7f5 fc3f 	bl	8000220 <__aeabi_dsub>
 800a9a2:	465c      	mov	r4, fp
 800a9a4:	e036      	b.n	800aa14 <__ieee754_pow+0x7a4>
 800a9a6:	bf00      	nop
 800a9a8:	4a454eef 	.word	0x4a454eef
 800a9ac:	3fca7e28 	.word	0x3fca7e28
 800a9b0:	93c9db65 	.word	0x93c9db65
 800a9b4:	3fcd864a 	.word	0x3fcd864a
 800a9b8:	a91d4101 	.word	0xa91d4101
 800a9bc:	3fd17460 	.word	0x3fd17460
 800a9c0:	518f264d 	.word	0x518f264d
 800a9c4:	3fd55555 	.word	0x3fd55555
 800a9c8:	db6fabff 	.word	0xdb6fabff
 800a9cc:	3fdb6db6 	.word	0x3fdb6db6
 800a9d0:	33333303 	.word	0x33333303
 800a9d4:	3fe33333 	.word	0x3fe33333
 800a9d8:	e0000000 	.word	0xe0000000
 800a9dc:	3feec709 	.word	0x3feec709
 800a9e0:	dc3a03fd 	.word	0xdc3a03fd
 800a9e4:	3feec709 	.word	0x3feec709
 800a9e8:	145b01f5 	.word	0x145b01f5
 800a9ec:	be3e2fe0 	.word	0xbe3e2fe0
 800a9f0:	7ff00000 	.word	0x7ff00000
 800a9f4:	43400000 	.word	0x43400000
 800a9f8:	0003988e 	.word	0x0003988e
 800a9fc:	000bb679 	.word	0x000bb679
 800aa00:	0800b088 	.word	0x0800b088
 800aa04:	3ff00000 	.word	0x3ff00000
 800aa08:	40080000 	.word	0x40080000
 800aa0c:	0800b068 	.word	0x0800b068
 800aa10:	0800b078 	.word	0x0800b078
 800aa14:	4602      	mov	r2, r0
 800aa16:	460b      	mov	r3, r1
 800aa18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa1c:	e5d6      	b.n	800a5cc <__ieee754_pow+0x35c>
 800aa1e:	f04f 0a01 	mov.w	sl, #1
 800aa22:	e65e      	b.n	800a6e2 <__ieee754_pow+0x472>
 800aa24:	a3b5      	add	r3, pc, #724	@ (adr r3, 800acfc <__ieee754_pow+0xa8c>)
 800aa26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	4639      	mov	r1, r7
 800aa2e:	f7f5 fbf9 	bl	8000224 <__adddf3>
 800aa32:	4642      	mov	r2, r8
 800aa34:	e9cd 0100 	strd	r0, r1, [sp]
 800aa38:	464b      	mov	r3, r9
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	4629      	mov	r1, r5
 800aa3e:	f7f5 fbef 	bl	8000220 <__aeabi_dsub>
 800aa42:	4602      	mov	r2, r0
 800aa44:	460b      	mov	r3, r1
 800aa46:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa4a:	f7f6 f831 	bl	8000ab0 <__aeabi_dcmpgt>
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	f47f adfe 	bne.w	800a650 <__ieee754_pow+0x3e0>
 800aa54:	4ba2      	ldr	r3, [pc, #648]	@ (800ace0 <__ieee754_pow+0xa70>)
 800aa56:	e022      	b.n	800aa9e <__ieee754_pow+0x82e>
 800aa58:	4ca2      	ldr	r4, [pc, #648]	@ (800ace4 <__ieee754_pow+0xa74>)
 800aa5a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800aa5e:	42a3      	cmp	r3, r4
 800aa60:	d919      	bls.n	800aa96 <__ieee754_pow+0x826>
 800aa62:	4ba1      	ldr	r3, [pc, #644]	@ (800ace8 <__ieee754_pow+0xa78>)
 800aa64:	440b      	add	r3, r1
 800aa66:	4303      	orrs	r3, r0
 800aa68:	d009      	beq.n	800aa7e <__ieee754_pow+0x80e>
 800aa6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	2300      	movs	r3, #0
 800aa72:	f7f5 ffff 	bl	8000a74 <__aeabi_dcmplt>
 800aa76:	3800      	subs	r0, #0
 800aa78:	bf18      	it	ne
 800aa7a:	2001      	movne	r0, #1
 800aa7c:	e512      	b.n	800a4a4 <__ieee754_pow+0x234>
 800aa7e:	4642      	mov	r2, r8
 800aa80:	464b      	mov	r3, r9
 800aa82:	f7f5 fbcd 	bl	8000220 <__aeabi_dsub>
 800aa86:	4632      	mov	r2, r6
 800aa88:	463b      	mov	r3, r7
 800aa8a:	f7f6 f807 	bl	8000a9c <__aeabi_dcmpge>
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	d1eb      	bne.n	800aa6a <__ieee754_pow+0x7fa>
 800aa92:	4b96      	ldr	r3, [pc, #600]	@ (800acec <__ieee754_pow+0xa7c>)
 800aa94:	e003      	b.n	800aa9e <__ieee754_pow+0x82e>
 800aa96:	4a96      	ldr	r2, [pc, #600]	@ (800acf0 <__ieee754_pow+0xa80>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	f240 80e7 	bls.w	800ac6c <__ieee754_pow+0x9fc>
 800aa9e:	151b      	asrs	r3, r3, #20
 800aaa0:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800aaa4:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800aaa8:	fa4a fa03 	asr.w	sl, sl, r3
 800aaac:	44da      	add	sl, fp
 800aaae:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800aab2:	4890      	ldr	r0, [pc, #576]	@ (800acf4 <__ieee754_pow+0xa84>)
 800aab4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800aab8:	4108      	asrs	r0, r1
 800aaba:	ea00 030a 	and.w	r3, r0, sl
 800aabe:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800aac2:	f1c1 0114 	rsb	r1, r1, #20
 800aac6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800aaca:	fa4a fa01 	asr.w	sl, sl, r1
 800aace:	f1bb 0f00 	cmp.w	fp, #0
 800aad2:	4640      	mov	r0, r8
 800aad4:	4649      	mov	r1, r9
 800aad6:	f04f 0200 	mov.w	r2, #0
 800aada:	bfb8      	it	lt
 800aadc:	f1ca 0a00 	rsblt	sl, sl, #0
 800aae0:	f7f5 fb9e 	bl	8000220 <__aeabi_dsub>
 800aae4:	4680      	mov	r8, r0
 800aae6:	4689      	mov	r9, r1
 800aae8:	4632      	mov	r2, r6
 800aaea:	463b      	mov	r3, r7
 800aaec:	4640      	mov	r0, r8
 800aaee:	4649      	mov	r1, r9
 800aaf0:	f7f5 fb98 	bl	8000224 <__adddf3>
 800aaf4:	2400      	movs	r4, #0
 800aaf6:	a36a      	add	r3, pc, #424	@ (adr r3, 800aca0 <__ieee754_pow+0xa30>)
 800aaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafc:	4620      	mov	r0, r4
 800aafe:	460d      	mov	r5, r1
 800ab00:	f7f5 fd46 	bl	8000590 <__aeabi_dmul>
 800ab04:	4642      	mov	r2, r8
 800ab06:	e9cd 0100 	strd	r0, r1, [sp]
 800ab0a:	464b      	mov	r3, r9
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	4629      	mov	r1, r5
 800ab10:	f7f5 fb86 	bl	8000220 <__aeabi_dsub>
 800ab14:	4602      	mov	r2, r0
 800ab16:	460b      	mov	r3, r1
 800ab18:	4630      	mov	r0, r6
 800ab1a:	4639      	mov	r1, r7
 800ab1c:	f7f5 fb80 	bl	8000220 <__aeabi_dsub>
 800ab20:	a361      	add	r3, pc, #388	@ (adr r3, 800aca8 <__ieee754_pow+0xa38>)
 800ab22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab26:	f7f5 fd33 	bl	8000590 <__aeabi_dmul>
 800ab2a:	a361      	add	r3, pc, #388	@ (adr r3, 800acb0 <__ieee754_pow+0xa40>)
 800ab2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab30:	4680      	mov	r8, r0
 800ab32:	4689      	mov	r9, r1
 800ab34:	4620      	mov	r0, r4
 800ab36:	4629      	mov	r1, r5
 800ab38:	f7f5 fd2a 	bl	8000590 <__aeabi_dmul>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	460b      	mov	r3, r1
 800ab40:	4640      	mov	r0, r8
 800ab42:	4649      	mov	r1, r9
 800ab44:	f7f5 fb6e 	bl	8000224 <__adddf3>
 800ab48:	4604      	mov	r4, r0
 800ab4a:	460d      	mov	r5, r1
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	460b      	mov	r3, r1
 800ab50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab54:	f7f5 fb66 	bl	8000224 <__adddf3>
 800ab58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab5c:	4680      	mov	r8, r0
 800ab5e:	4689      	mov	r9, r1
 800ab60:	f7f5 fb5e 	bl	8000220 <__aeabi_dsub>
 800ab64:	4602      	mov	r2, r0
 800ab66:	460b      	mov	r3, r1
 800ab68:	4620      	mov	r0, r4
 800ab6a:	4629      	mov	r1, r5
 800ab6c:	f7f5 fb58 	bl	8000220 <__aeabi_dsub>
 800ab70:	4642      	mov	r2, r8
 800ab72:	4606      	mov	r6, r0
 800ab74:	460f      	mov	r7, r1
 800ab76:	464b      	mov	r3, r9
 800ab78:	4640      	mov	r0, r8
 800ab7a:	4649      	mov	r1, r9
 800ab7c:	f7f5 fd08 	bl	8000590 <__aeabi_dmul>
 800ab80:	a34d      	add	r3, pc, #308	@ (adr r3, 800acb8 <__ieee754_pow+0xa48>)
 800ab82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab86:	4604      	mov	r4, r0
 800ab88:	460d      	mov	r5, r1
 800ab8a:	f7f5 fd01 	bl	8000590 <__aeabi_dmul>
 800ab8e:	a34c      	add	r3, pc, #304	@ (adr r3, 800acc0 <__ieee754_pow+0xa50>)
 800ab90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab94:	f7f5 fb44 	bl	8000220 <__aeabi_dsub>
 800ab98:	4622      	mov	r2, r4
 800ab9a:	462b      	mov	r3, r5
 800ab9c:	f7f5 fcf8 	bl	8000590 <__aeabi_dmul>
 800aba0:	a349      	add	r3, pc, #292	@ (adr r3, 800acc8 <__ieee754_pow+0xa58>)
 800aba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba6:	f7f5 fb3d 	bl	8000224 <__adddf3>
 800abaa:	4622      	mov	r2, r4
 800abac:	462b      	mov	r3, r5
 800abae:	f7f5 fcef 	bl	8000590 <__aeabi_dmul>
 800abb2:	a347      	add	r3, pc, #284	@ (adr r3, 800acd0 <__ieee754_pow+0xa60>)
 800abb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb8:	f7f5 fb32 	bl	8000220 <__aeabi_dsub>
 800abbc:	4622      	mov	r2, r4
 800abbe:	462b      	mov	r3, r5
 800abc0:	f7f5 fce6 	bl	8000590 <__aeabi_dmul>
 800abc4:	a344      	add	r3, pc, #272	@ (adr r3, 800acd8 <__ieee754_pow+0xa68>)
 800abc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abca:	f7f5 fb2b 	bl	8000224 <__adddf3>
 800abce:	4622      	mov	r2, r4
 800abd0:	462b      	mov	r3, r5
 800abd2:	f7f5 fcdd 	bl	8000590 <__aeabi_dmul>
 800abd6:	4602      	mov	r2, r0
 800abd8:	460b      	mov	r3, r1
 800abda:	4640      	mov	r0, r8
 800abdc:	4649      	mov	r1, r9
 800abde:	f7f5 fb1f 	bl	8000220 <__aeabi_dsub>
 800abe2:	4604      	mov	r4, r0
 800abe4:	460d      	mov	r5, r1
 800abe6:	4602      	mov	r2, r0
 800abe8:	460b      	mov	r3, r1
 800abea:	4640      	mov	r0, r8
 800abec:	4649      	mov	r1, r9
 800abee:	f7f5 fccf 	bl	8000590 <__aeabi_dmul>
 800abf2:	2200      	movs	r2, #0
 800abf4:	e9cd 0100 	strd	r0, r1, [sp]
 800abf8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800abfc:	4620      	mov	r0, r4
 800abfe:	4629      	mov	r1, r5
 800ac00:	f7f5 fb0e 	bl	8000220 <__aeabi_dsub>
 800ac04:	4602      	mov	r2, r0
 800ac06:	460b      	mov	r3, r1
 800ac08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac0c:	f7f5 fdea 	bl	80007e4 <__aeabi_ddiv>
 800ac10:	4632      	mov	r2, r6
 800ac12:	4604      	mov	r4, r0
 800ac14:	460d      	mov	r5, r1
 800ac16:	463b      	mov	r3, r7
 800ac18:	4640      	mov	r0, r8
 800ac1a:	4649      	mov	r1, r9
 800ac1c:	f7f5 fcb8 	bl	8000590 <__aeabi_dmul>
 800ac20:	4632      	mov	r2, r6
 800ac22:	463b      	mov	r3, r7
 800ac24:	f7f5 fafe 	bl	8000224 <__adddf3>
 800ac28:	4602      	mov	r2, r0
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	4629      	mov	r1, r5
 800ac30:	f7f5 faf6 	bl	8000220 <__aeabi_dsub>
 800ac34:	4642      	mov	r2, r8
 800ac36:	464b      	mov	r3, r9
 800ac38:	f7f5 faf2 	bl	8000220 <__aeabi_dsub>
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	4602      	mov	r2, r0
 800ac40:	492d      	ldr	r1, [pc, #180]	@ (800acf8 <__ieee754_pow+0xa88>)
 800ac42:	2000      	movs	r0, #0
 800ac44:	f7f5 faec 	bl	8000220 <__aeabi_dsub>
 800ac48:	ec41 0b10 	vmov	d0, r0, r1
 800ac4c:	ee10 3a90 	vmov	r3, s1
 800ac50:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ac54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac58:	da0b      	bge.n	800ac72 <__ieee754_pow+0xa02>
 800ac5a:	4650      	mov	r0, sl
 800ac5c:	f000 f85c 	bl	800ad18 <scalbn>
 800ac60:	ec51 0b10 	vmov	r0, r1, d0
 800ac64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac68:	f7ff bb6d 	b.w	800a346 <__ieee754_pow+0xd6>
 800ac6c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ac70:	e73a      	b.n	800aae8 <__ieee754_pow+0x878>
 800ac72:	ec51 0b10 	vmov	r0, r1, d0
 800ac76:	4619      	mov	r1, r3
 800ac78:	e7f4      	b.n	800ac64 <__ieee754_pow+0x9f4>
 800ac7a:	491f      	ldr	r1, [pc, #124]	@ (800acf8 <__ieee754_pow+0xa88>)
 800ac7c:	2000      	movs	r0, #0
 800ac7e:	f7ff bb14 	b.w	800a2aa <__ieee754_pow+0x3a>
 800ac82:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac86:	f7ff bb10 	b.w	800a2aa <__ieee754_pow+0x3a>
 800ac8a:	4630      	mov	r0, r6
 800ac8c:	4639      	mov	r1, r7
 800ac8e:	f7ff bb0c 	b.w	800a2aa <__ieee754_pow+0x3a>
 800ac92:	460c      	mov	r4, r1
 800ac94:	f7ff bb69 	b.w	800a36a <__ieee754_pow+0xfa>
 800ac98:	2400      	movs	r4, #0
 800ac9a:	f7ff bb4b 	b.w	800a334 <__ieee754_pow+0xc4>
 800ac9e:	bf00      	nop
 800aca0:	00000000 	.word	0x00000000
 800aca4:	3fe62e43 	.word	0x3fe62e43
 800aca8:	fefa39ef 	.word	0xfefa39ef
 800acac:	3fe62e42 	.word	0x3fe62e42
 800acb0:	0ca86c39 	.word	0x0ca86c39
 800acb4:	be205c61 	.word	0xbe205c61
 800acb8:	72bea4d0 	.word	0x72bea4d0
 800acbc:	3e663769 	.word	0x3e663769
 800acc0:	c5d26bf1 	.word	0xc5d26bf1
 800acc4:	3ebbbd41 	.word	0x3ebbbd41
 800acc8:	af25de2c 	.word	0xaf25de2c
 800accc:	3f11566a 	.word	0x3f11566a
 800acd0:	16bebd93 	.word	0x16bebd93
 800acd4:	3f66c16c 	.word	0x3f66c16c
 800acd8:	5555553e 	.word	0x5555553e
 800acdc:	3fc55555 	.word	0x3fc55555
 800ace0:	40900000 	.word	0x40900000
 800ace4:	4090cbff 	.word	0x4090cbff
 800ace8:	3f6f3400 	.word	0x3f6f3400
 800acec:	4090cc00 	.word	0x4090cc00
 800acf0:	3fe00000 	.word	0x3fe00000
 800acf4:	fff00000 	.word	0xfff00000
 800acf8:	3ff00000 	.word	0x3ff00000
 800acfc:	652b82fe 	.word	0x652b82fe
 800ad00:	3c971547 	.word	0x3c971547

0800ad04 <fabs>:
 800ad04:	ec51 0b10 	vmov	r0, r1, d0
 800ad08:	4602      	mov	r2, r0
 800ad0a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ad0e:	ec43 2b10 	vmov	d0, r2, r3
 800ad12:	4770      	bx	lr
 800ad14:	0000      	movs	r0, r0
	...

0800ad18 <scalbn>:
 800ad18:	b570      	push	{r4, r5, r6, lr}
 800ad1a:	ec55 4b10 	vmov	r4, r5, d0
 800ad1e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ad22:	4606      	mov	r6, r0
 800ad24:	462b      	mov	r3, r5
 800ad26:	b991      	cbnz	r1, 800ad4e <scalbn+0x36>
 800ad28:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ad2c:	4323      	orrs	r3, r4
 800ad2e:	d03b      	beq.n	800ada8 <scalbn+0x90>
 800ad30:	4b33      	ldr	r3, [pc, #204]	@ (800ae00 <scalbn+0xe8>)
 800ad32:	4620      	mov	r0, r4
 800ad34:	4629      	mov	r1, r5
 800ad36:	2200      	movs	r2, #0
 800ad38:	f7f5 fc2a 	bl	8000590 <__aeabi_dmul>
 800ad3c:	4b31      	ldr	r3, [pc, #196]	@ (800ae04 <scalbn+0xec>)
 800ad3e:	429e      	cmp	r6, r3
 800ad40:	4604      	mov	r4, r0
 800ad42:	460d      	mov	r5, r1
 800ad44:	da0f      	bge.n	800ad66 <scalbn+0x4e>
 800ad46:	a326      	add	r3, pc, #152	@ (adr r3, 800ade0 <scalbn+0xc8>)
 800ad48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4c:	e01e      	b.n	800ad8c <scalbn+0x74>
 800ad4e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ad52:	4291      	cmp	r1, r2
 800ad54:	d10b      	bne.n	800ad6e <scalbn+0x56>
 800ad56:	4622      	mov	r2, r4
 800ad58:	4620      	mov	r0, r4
 800ad5a:	4629      	mov	r1, r5
 800ad5c:	f7f5 fa62 	bl	8000224 <__adddf3>
 800ad60:	4604      	mov	r4, r0
 800ad62:	460d      	mov	r5, r1
 800ad64:	e020      	b.n	800ada8 <scalbn+0x90>
 800ad66:	460b      	mov	r3, r1
 800ad68:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ad6c:	3936      	subs	r1, #54	@ 0x36
 800ad6e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ad72:	4296      	cmp	r6, r2
 800ad74:	dd0d      	ble.n	800ad92 <scalbn+0x7a>
 800ad76:	2d00      	cmp	r5, #0
 800ad78:	a11b      	add	r1, pc, #108	@ (adr r1, 800ade8 <scalbn+0xd0>)
 800ad7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad7e:	da02      	bge.n	800ad86 <scalbn+0x6e>
 800ad80:	a11b      	add	r1, pc, #108	@ (adr r1, 800adf0 <scalbn+0xd8>)
 800ad82:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad86:	a318      	add	r3, pc, #96	@ (adr r3, 800ade8 <scalbn+0xd0>)
 800ad88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8c:	f7f5 fc00 	bl	8000590 <__aeabi_dmul>
 800ad90:	e7e6      	b.n	800ad60 <scalbn+0x48>
 800ad92:	1872      	adds	r2, r6, r1
 800ad94:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ad98:	428a      	cmp	r2, r1
 800ad9a:	dcec      	bgt.n	800ad76 <scalbn+0x5e>
 800ad9c:	2a00      	cmp	r2, #0
 800ad9e:	dd06      	ble.n	800adae <scalbn+0x96>
 800ada0:	f36f 531e 	bfc	r3, #20, #11
 800ada4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ada8:	ec45 4b10 	vmov	d0, r4, r5
 800adac:	bd70      	pop	{r4, r5, r6, pc}
 800adae:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800adb2:	da08      	bge.n	800adc6 <scalbn+0xae>
 800adb4:	2d00      	cmp	r5, #0
 800adb6:	a10a      	add	r1, pc, #40	@ (adr r1, 800ade0 <scalbn+0xc8>)
 800adb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adbc:	dac3      	bge.n	800ad46 <scalbn+0x2e>
 800adbe:	a10e      	add	r1, pc, #56	@ (adr r1, 800adf8 <scalbn+0xe0>)
 800adc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adc4:	e7bf      	b.n	800ad46 <scalbn+0x2e>
 800adc6:	3236      	adds	r2, #54	@ 0x36
 800adc8:	f36f 531e 	bfc	r3, #20, #11
 800adcc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800add0:	4620      	mov	r0, r4
 800add2:	4b0d      	ldr	r3, [pc, #52]	@ (800ae08 <scalbn+0xf0>)
 800add4:	4629      	mov	r1, r5
 800add6:	2200      	movs	r2, #0
 800add8:	e7d8      	b.n	800ad8c <scalbn+0x74>
 800adda:	bf00      	nop
 800addc:	f3af 8000 	nop.w
 800ade0:	c2f8f359 	.word	0xc2f8f359
 800ade4:	01a56e1f 	.word	0x01a56e1f
 800ade8:	8800759c 	.word	0x8800759c
 800adec:	7e37e43c 	.word	0x7e37e43c
 800adf0:	8800759c 	.word	0x8800759c
 800adf4:	fe37e43c 	.word	0xfe37e43c
 800adf8:	c2f8f359 	.word	0xc2f8f359
 800adfc:	81a56e1f 	.word	0x81a56e1f
 800ae00:	43500000 	.word	0x43500000
 800ae04:	ffff3cb0 	.word	0xffff3cb0
 800ae08:	3c900000 	.word	0x3c900000

0800ae0c <with_errno>:
 800ae0c:	b510      	push	{r4, lr}
 800ae0e:	ed2d 8b02 	vpush	{d8}
 800ae12:	eeb0 8a40 	vmov.f32	s16, s0
 800ae16:	eef0 8a60 	vmov.f32	s17, s1
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	f7ff f980 	bl	800a120 <__errno>
 800ae20:	eeb0 0a48 	vmov.f32	s0, s16
 800ae24:	eef0 0a68 	vmov.f32	s1, s17
 800ae28:	ecbd 8b02 	vpop	{d8}
 800ae2c:	6004      	str	r4, [r0, #0]
 800ae2e:	bd10      	pop	{r4, pc}

0800ae30 <xflow>:
 800ae30:	4603      	mov	r3, r0
 800ae32:	b507      	push	{r0, r1, r2, lr}
 800ae34:	ec51 0b10 	vmov	r0, r1, d0
 800ae38:	b183      	cbz	r3, 800ae5c <xflow+0x2c>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae40:	e9cd 2300 	strd	r2, r3, [sp]
 800ae44:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae48:	f7f5 fba2 	bl	8000590 <__aeabi_dmul>
 800ae4c:	ec41 0b10 	vmov	d0, r0, r1
 800ae50:	2022      	movs	r0, #34	@ 0x22
 800ae52:	b003      	add	sp, #12
 800ae54:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae58:	f7ff bfd8 	b.w	800ae0c <with_errno>
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	460b      	mov	r3, r1
 800ae60:	e7ee      	b.n	800ae40 <xflow+0x10>
 800ae62:	0000      	movs	r0, r0
 800ae64:	0000      	movs	r0, r0
	...

0800ae68 <__math_uflow>:
 800ae68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ae70 <__math_uflow+0x8>
 800ae6c:	f7ff bfe0 	b.w	800ae30 <xflow>
 800ae70:	00000000 	.word	0x00000000
 800ae74:	10000000 	.word	0x10000000

0800ae78 <__math_oflow>:
 800ae78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ae80 <__math_oflow+0x8>
 800ae7c:	f7ff bfd8 	b.w	800ae30 <xflow>
 800ae80:	00000000 	.word	0x00000000
 800ae84:	70000000 	.word	0x70000000

0800ae88 <__ieee754_sqrt>:
 800ae88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae8c:	4a66      	ldr	r2, [pc, #408]	@ (800b028 <__ieee754_sqrt+0x1a0>)
 800ae8e:	ec55 4b10 	vmov	r4, r5, d0
 800ae92:	43aa      	bics	r2, r5
 800ae94:	462b      	mov	r3, r5
 800ae96:	4621      	mov	r1, r4
 800ae98:	d110      	bne.n	800aebc <__ieee754_sqrt+0x34>
 800ae9a:	4622      	mov	r2, r4
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	4629      	mov	r1, r5
 800aea0:	f7f5 fb76 	bl	8000590 <__aeabi_dmul>
 800aea4:	4602      	mov	r2, r0
 800aea6:	460b      	mov	r3, r1
 800aea8:	4620      	mov	r0, r4
 800aeaa:	4629      	mov	r1, r5
 800aeac:	f7f5 f9ba 	bl	8000224 <__adddf3>
 800aeb0:	4604      	mov	r4, r0
 800aeb2:	460d      	mov	r5, r1
 800aeb4:	ec45 4b10 	vmov	d0, r4, r5
 800aeb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aebc:	2d00      	cmp	r5, #0
 800aebe:	dc0e      	bgt.n	800aede <__ieee754_sqrt+0x56>
 800aec0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800aec4:	4322      	orrs	r2, r4
 800aec6:	d0f5      	beq.n	800aeb4 <__ieee754_sqrt+0x2c>
 800aec8:	b19d      	cbz	r5, 800aef2 <__ieee754_sqrt+0x6a>
 800aeca:	4622      	mov	r2, r4
 800aecc:	4620      	mov	r0, r4
 800aece:	4629      	mov	r1, r5
 800aed0:	f7f5 f9a6 	bl	8000220 <__aeabi_dsub>
 800aed4:	4602      	mov	r2, r0
 800aed6:	460b      	mov	r3, r1
 800aed8:	f7f5 fc84 	bl	80007e4 <__aeabi_ddiv>
 800aedc:	e7e8      	b.n	800aeb0 <__ieee754_sqrt+0x28>
 800aede:	152a      	asrs	r2, r5, #20
 800aee0:	d115      	bne.n	800af0e <__ieee754_sqrt+0x86>
 800aee2:	2000      	movs	r0, #0
 800aee4:	e009      	b.n	800aefa <__ieee754_sqrt+0x72>
 800aee6:	0acb      	lsrs	r3, r1, #11
 800aee8:	3a15      	subs	r2, #21
 800aeea:	0549      	lsls	r1, r1, #21
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d0fa      	beq.n	800aee6 <__ieee754_sqrt+0x5e>
 800aef0:	e7f7      	b.n	800aee2 <__ieee754_sqrt+0x5a>
 800aef2:	462a      	mov	r2, r5
 800aef4:	e7fa      	b.n	800aeec <__ieee754_sqrt+0x64>
 800aef6:	005b      	lsls	r3, r3, #1
 800aef8:	3001      	adds	r0, #1
 800aefa:	02dc      	lsls	r4, r3, #11
 800aefc:	d5fb      	bpl.n	800aef6 <__ieee754_sqrt+0x6e>
 800aefe:	1e44      	subs	r4, r0, #1
 800af00:	1b12      	subs	r2, r2, r4
 800af02:	f1c0 0420 	rsb	r4, r0, #32
 800af06:	fa21 f404 	lsr.w	r4, r1, r4
 800af0a:	4323      	orrs	r3, r4
 800af0c:	4081      	lsls	r1, r0
 800af0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af12:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800af16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800af1a:	07d2      	lsls	r2, r2, #31
 800af1c:	bf5c      	itt	pl
 800af1e:	005b      	lslpl	r3, r3, #1
 800af20:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800af24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800af28:	bf58      	it	pl
 800af2a:	0049      	lslpl	r1, r1, #1
 800af2c:	2600      	movs	r6, #0
 800af2e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800af32:	107f      	asrs	r7, r7, #1
 800af34:	0049      	lsls	r1, r1, #1
 800af36:	2016      	movs	r0, #22
 800af38:	4632      	mov	r2, r6
 800af3a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800af3e:	1915      	adds	r5, r2, r4
 800af40:	429d      	cmp	r5, r3
 800af42:	bfde      	ittt	le
 800af44:	192a      	addle	r2, r5, r4
 800af46:	1b5b      	suble	r3, r3, r5
 800af48:	1936      	addle	r6, r6, r4
 800af4a:	0fcd      	lsrs	r5, r1, #31
 800af4c:	3801      	subs	r0, #1
 800af4e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800af52:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800af56:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800af5a:	d1f0      	bne.n	800af3e <__ieee754_sqrt+0xb6>
 800af5c:	4605      	mov	r5, r0
 800af5e:	2420      	movs	r4, #32
 800af60:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800af64:	4293      	cmp	r3, r2
 800af66:	eb0c 0e00 	add.w	lr, ip, r0
 800af6a:	dc02      	bgt.n	800af72 <__ieee754_sqrt+0xea>
 800af6c:	d113      	bne.n	800af96 <__ieee754_sqrt+0x10e>
 800af6e:	458e      	cmp	lr, r1
 800af70:	d811      	bhi.n	800af96 <__ieee754_sqrt+0x10e>
 800af72:	f1be 0f00 	cmp.w	lr, #0
 800af76:	eb0e 000c 	add.w	r0, lr, ip
 800af7a:	da3f      	bge.n	800affc <__ieee754_sqrt+0x174>
 800af7c:	2800      	cmp	r0, #0
 800af7e:	db3d      	blt.n	800affc <__ieee754_sqrt+0x174>
 800af80:	f102 0801 	add.w	r8, r2, #1
 800af84:	1a9b      	subs	r3, r3, r2
 800af86:	458e      	cmp	lr, r1
 800af88:	bf88      	it	hi
 800af8a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800af8e:	eba1 010e 	sub.w	r1, r1, lr
 800af92:	4465      	add	r5, ip
 800af94:	4642      	mov	r2, r8
 800af96:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800af9a:	3c01      	subs	r4, #1
 800af9c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800afa0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800afa4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800afa8:	d1dc      	bne.n	800af64 <__ieee754_sqrt+0xdc>
 800afaa:	4319      	orrs	r1, r3
 800afac:	d01b      	beq.n	800afe6 <__ieee754_sqrt+0x15e>
 800afae:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800b02c <__ieee754_sqrt+0x1a4>
 800afb2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800b030 <__ieee754_sqrt+0x1a8>
 800afb6:	e9da 0100 	ldrd	r0, r1, [sl]
 800afba:	e9db 2300 	ldrd	r2, r3, [fp]
 800afbe:	f7f5 f92f 	bl	8000220 <__aeabi_dsub>
 800afc2:	e9da 8900 	ldrd	r8, r9, [sl]
 800afc6:	4602      	mov	r2, r0
 800afc8:	460b      	mov	r3, r1
 800afca:	4640      	mov	r0, r8
 800afcc:	4649      	mov	r1, r9
 800afce:	f7f5 fd5b 	bl	8000a88 <__aeabi_dcmple>
 800afd2:	b140      	cbz	r0, 800afe6 <__ieee754_sqrt+0x15e>
 800afd4:	f1b5 3fff 	cmp.w	r5, #4294967295
 800afd8:	e9da 0100 	ldrd	r0, r1, [sl]
 800afdc:	e9db 2300 	ldrd	r2, r3, [fp]
 800afe0:	d10e      	bne.n	800b000 <__ieee754_sqrt+0x178>
 800afe2:	3601      	adds	r6, #1
 800afe4:	4625      	mov	r5, r4
 800afe6:	1073      	asrs	r3, r6, #1
 800afe8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800afec:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800aff0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800aff4:	086b      	lsrs	r3, r5, #1
 800aff6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800affa:	e759      	b.n	800aeb0 <__ieee754_sqrt+0x28>
 800affc:	4690      	mov	r8, r2
 800affe:	e7c1      	b.n	800af84 <__ieee754_sqrt+0xfc>
 800b000:	f7f5 f910 	bl	8000224 <__adddf3>
 800b004:	e9da 8900 	ldrd	r8, r9, [sl]
 800b008:	4602      	mov	r2, r0
 800b00a:	460b      	mov	r3, r1
 800b00c:	4640      	mov	r0, r8
 800b00e:	4649      	mov	r1, r9
 800b010:	f7f5 fd30 	bl	8000a74 <__aeabi_dcmplt>
 800b014:	b120      	cbz	r0, 800b020 <__ieee754_sqrt+0x198>
 800b016:	1cab      	adds	r3, r5, #2
 800b018:	bf08      	it	eq
 800b01a:	3601      	addeq	r6, #1
 800b01c:	3502      	adds	r5, #2
 800b01e:	e7e2      	b.n	800afe6 <__ieee754_sqrt+0x15e>
 800b020:	1c6b      	adds	r3, r5, #1
 800b022:	f023 0501 	bic.w	r5, r3, #1
 800b026:	e7de      	b.n	800afe6 <__ieee754_sqrt+0x15e>
 800b028:	7ff00000 	.word	0x7ff00000
 800b02c:	0800b0a0 	.word	0x0800b0a0
 800b030:	0800b098 	.word	0x0800b098

0800b034 <_init>:
 800b034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b036:	bf00      	nop
 800b038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b03a:	bc08      	pop	{r3}
 800b03c:	469e      	mov	lr, r3
 800b03e:	4770      	bx	lr

0800b040 <_fini>:
 800b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b042:	bf00      	nop
 800b044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b046:	bc08      	pop	{r3}
 800b048:	469e      	mov	lr, r3
 800b04a:	4770      	bx	lr
